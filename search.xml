<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c++基础</title>
      <link href="2020/01/01/C++%E5%9F%BA%E7%A1%80/"/>
      <url>2020/01/01/C++%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="c基础上"><a class="markdownIt-Anchor" href="#c基础上"></a> c++基础（上）</h2><h3 id="什么是c"><a class="markdownIt-Anchor" href="#什么是c"></a> 什么是c++</h3><p>c语言的升级版，在c的基础上增加了很多功能。是一种高级语言。</p><h3 id="什么是面向对象什么是面向过程"><a class="markdownIt-Anchor" href="#什么是面向对象什么是面向过程"></a> 什么是面向对象，什么是面向过程</h3><p>c语言就是面向过程的，c++就是面向对象的。</p><p>示例：a+b</p><p>​直接计算a+b就是面向过程</p><p>​面向对象就是a+b封装到类里面，形成一个方法。</p><h3 id="c的灵魂c的类"><a class="markdownIt-Anchor" href="#c的灵魂c的类"></a> c<ins>的灵魂，c</ins>的类</h3><p>类可以看成是c语言的结构体的升级版。类的成员不仅是变量，也可以是函数。</p><h3 id="如何定义一个类"><a class="markdownIt-Anchor" href="#如何定义一个类"></a> 如何定义一个类</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是对象"><a class="markdownIt-Anchor" href="#什么是对象"></a> 什么是对象</h3><p>对象是类的实例化。</p><h3 id="如何定义一个对象"><a class="markdownIt-Anchor" href="#如何定义一个对象"></a> 如何定义一个对象</h3><p>直接定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student my;<span class="comment">//student是类，my是对象</span></span><br></pre></td></tr></table></figure><p>在堆里定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student *my = <span class="keyword">new</span> student;<span class="comment">//</span></span><br></pre></td></tr></table></figure><p>删除对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> my;</span><br></pre></td></tr></table></figure><h3 id="怎么访问类的成员"><a class="markdownIt-Anchor" href="#怎么访问类的成员"></a> 怎么访问类的成员</h3><p>普通类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student my;<span class="comment">//student是类，my是对象</span></span><br><span class="line">my.age;</span><br></pre></td></tr></table></figure><p>指针类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student *my = <span class="keyword">new</span> student;<span class="comment">//</span></span><br><span class="line">my-&gt;age;</span><br></pre></td></tr></table></figure><h3 id="类的成员函数"><a class="markdownIt-Anchor" href="#类的成员函数"></a> 类的成员函数</h3><p>类里面的成员不仅可以是变量也可以是函数</p><p>第一步：在类里面声明函数</p><p>第二步：实现函数。在类里面写，也可以在类外面写</p><p>写在里面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">123</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写在外面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">student::test</span><span class="params">()</span></span>&#123; <span class="comment">//student::表示属于这个类里面的函数</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">123</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的访问修饰符"><a class="markdownIt-Anchor" href="#类的访问修饰符"></a> 类的访问修饰符</h3><p>类的访问修饰符是对类的成员进行权限管理。</p><p>public：表示函数和变量是公有的，任何人都可以用访问。</p><p>private：表示私有，只能在类里面访问。想在类外面访问，可以通过公有成员函数访问。</p><p>protected：表示函数和变量只能在自己的类里面自己访问自己，但是可以被派生类访问。</p><h2 id="c基础下"><a class="markdownIt-Anchor" href="#c基础下"></a> c++基础（下）</h2><h3 id="类函数的重载特性"><a class="markdownIt-Anchor" href="#类函数的重载特性"></a> 类函数的重载特性</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重载函数在调用的时候会根据参数来自动匹配函数进行调用</p><h3 id="构造函数和析构函数"><a class="markdownIt-Anchor" href="#构造函数和析构函数"></a> 构造函数和析构函数</h3><p>析构函数：假如定义了析构函数，当对象被删除或者生命周期结束的时候，就会触发析构函数。</p><p>构造函数：假如定义了构造函数，当对象被创建就会触发这个构造函数。</p><p>如何定义？</p><ol><li>析构函数和构造函数的名字必须和类名一样。</li><li>析构函数需要在函数名前加~</li><li>构造函数可以被重载，析构函数不能被重载</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    student();</span><br><span class="line">    student(<span class="keyword">int</span> b);</span><br><span class="line">    ~student();</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">student::student()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student::student(<span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student::~student()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    student *my = <span class="keyword">new</span> student(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的继承"><a class="markdownIt-Anchor" href="#类的继承"></a> 类的继承</h3><p>什么是类的继承？</p><p>类的继承允许我们在新的类里面继承父类的public还有protected部分，private是不能被继承的。</p><p>格式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 儿子:</span><span class="keyword">public</span> 爸爸&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">……</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mystudent</span>:</span><span class="keyword">public</span> student&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如何在子类访问父类成员？</p><p>也是通过.和-&gt;来访问</p><h3 id="虚函数和纯虚函数"><a class="markdownIt-Anchor" href="#虚函数和纯虚函数"></a> 虚函数和纯虚函数</h3><p>虚函数：有实际定义的，允许派生类对他进行覆盖式的替换，用virtual来修饰。</p><p>纯虚函数：没有实际定义的虚函数就是纯虚函数。</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;<span class="comment">//虚函数 父类定义 子类覆盖修改</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//纯虚函数</span></span><br></pre></td></tr></table></figure><p>如何定义一个虚函数？</p><p>用virtual来进行修饰。</p><p>虚函数的优点？</p><p>可以预留接口，便于分工合作。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt使用MySql</title>
      <link href="2020/01/01/Qt%E4%BD%BF%E7%94%A8MySql/"/>
      <url>2020/01/01/Qt%E4%BD%BF%E7%94%A8MySql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="mysql免安装版本的安装"><a class="markdownIt-Anchor" href="#mysql免安装版本的安装"></a> MySql免安装版本的安装</h3><h4 id="mysql安装文件下载"><a class="markdownIt-Anchor" href="#mysql安装文件下载"></a> MySql安装文件下载</h4><p>MySql安装文件的下载有两种方式</p><h5 id="官网下载"><a class="markdownIt-Anchor" href="#官网下载"></a> 官网下载</h5><p><a href="https://dev.mysql.com/downloads/mysql/">MySql官网</a></p><h5 id="国内镜像"><a class="markdownIt-Anchor" href="#国内镜像"></a> 国内镜像</h5><p>由于外国软件的官网一般访问速度令人捉鸡，国内都会有相应的软件镜像。在这些开源镜像站下载，速度会快很多。</p><p>企业站点</p><ol><li><p>网易：<a href="https://www.svlik.com/go.php?https://mirrors.163.com/">https://mirrors.163.com/</a></p></li><li><p>搜狐：<a href="https://www.svlik.com/go.php?http://mirrors.sohu.com/">http://mirrors.sohu.com/</a>（Ubuntu旧发行版同步被冻结，不同步Ubuntu新发行版，Ubuntu源同步正常）</p></li><li><p>阿里云：<a href="https://www.svlik.com/go.php?https://opsx.alibaba.com/mirror">https://opsx.alibaba.com/mirror</a>（部分镜像同步延迟超过1天）</p></li></ol><p>教育站点</p><ol><li>中国科技大学：<a href="https://www.svlik.com/go.php?https://mirrors.ustc.edu.cn/">https://mirrors.ustc.edu.cn/</a></li><li>清华大学：<a href="https://www.svlik.com/go.php?https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn/</a></li></ol><h4 id="mysql安装"><a class="markdownIt-Anchor" href="#mysql安装"></a> MySql安装</h4><h5 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h5><p>配置用户环境变量，将D:/MySql/bin文件夹包含到path环境变量下。</p><h5 id="添加myini文件"><a class="markdownIt-Anchor" href="#添加myini文件"></a> 添加my.ini文件</h5><p>添加代码</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">basedir</span>=D:/MySql</span><br><span class="line"><span class="attr">datadir</span>=D:/MySql/data</span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure><h5 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h5><p>在bin文件夹下管理员模式启动cmd然后输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld –<span class="literal">-initialize</span></span><br></pre></td></tr></table></figure><p>根目录会生成一个data文件夹</p><h5 id="安装mysql服务"><a class="markdownIt-Anchor" href="#安装mysql服务"></a> 安装MySql服务</h5><p>继续输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld install</span><br></pre></td></tr></table></figure><p>会提示服务安装成功。</p><h5 id="启动服务"><a class="markdownIt-Anchor" href="#启动服务"></a> 启动服务</h5><p>继续输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net <span class="built_in">start</span> mysql</span><br></pre></td></tr></table></figure><h5 id="登录mysql"><a class="markdownIt-Anchor" href="#登录mysql"></a> 登录MySql</h5><p>继续输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="literal">-u</span> root <span class="literal">-p</span></span><br></pre></td></tr></table></figure><p>免密码直接进入</p><h5 id="修改密码"><a class="markdownIt-Anchor" href="#修改密码"></a> 修改密码</h5><p>登录mysql下执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> <span class="keyword">for</span> root@localhost = <span class="keyword">password</span>(<span class="string">&#x27;新密码&#x27;</span>); </span><br></pre></td></tr></table></figure><h5 id="退出登录"><a class="markdownIt-Anchor" href="#退出登录"></a> 退出登录</h5><p>mysql下执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h5 id="停止服务"><a class="markdownIt-Anchor" href="#停止服务"></a> 停止服务</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure><h5 id="卸载mysql"><a class="markdownIt-Anchor" href="#卸载mysql"></a> 卸载MySql</h5><p>sc delete mysql</p><h5 id="远程连接"><a class="markdownIt-Anchor" href="#远程连接"></a> 远程连接</h5><hr /><p>Qt 数据库 SQL</p><p><img src="https://i.loli.net/2020/12/28/6AmUfvyGCpTzhHw.png" alt="img" /></p><ul><li>用户接口层：用来把数据显示到窗口部件</li><li>SQL接口层：提供对数据库的访问</li><li>驱动层：为具体数据库和SQL接口之间提供了底层的桥梁（不用深入）</li></ul><h3 id="mysql驱动的编译"><a class="markdownIt-Anchor" href="#mysql驱动的编译"></a> MySql驱动的编译</h3><p>Qt连接MySql数据库要经过两层驱动，一个是MySql本身的驱动libmysql.dll，另外一个是Qt本身的驱动qsqlmysql.dll。在Qt5版本中，Qt本身没有自带MySql的驱动，需要自己进行编译。在Qt的源码中有MySql的qt工程，对其进行编译后会生成qsqlmysql.dll。</p><p>打开源码中MySql.pro工程文件，在下面这个文件夹</p><p>…\Qt\Qt5.12.3\5.12.3\Src\qtbase\src\plugins\sqldrivers\mysql中。</p><h4 id="更改mysqlpro文件的内容"><a class="markdownIt-Anchor" href="#更改mysqlpro文件的内容"></a> 更改MySql.pro文件的内容</h4><p>添加链接库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#QMAKE_USE += mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主要看libmysql的位置在哪</span></span><br><span class="line"><span class="attr">win32</span>:<span class="string">LIBS += -LD:/MySql/lib -llibmysql </span></span><br><span class="line"><span class="attr">INCLUDEPATH</span> <span class="string">+= D:/MySql/include</span></span><br><span class="line"><span class="attr">DEPENDPATH</span> <span class="string">+= D:/MySql/include</span></span><br></pre></td></tr></table></figure><p>…\Qt\Qt5.12.3\5.12.3\Src\qtbase\src\plugins\sqldrivers\qsqldriverbase.pri</p><h4 id="更改qsqldriverbasepri文件"><a class="markdownIt-Anchor" href="#更改qsqldriverbasepri文件"></a> 更改qsqldriverbase.pri文件</h4><p>添加配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">include(..\Qt\Qt5.12.3\5.12.3\Src\qtbase\src\plugins\sqldrivers\configure.pri)</span></span><br></pre></td></tr></table></figure><h4 id="进行编译"><a class="markdownIt-Anchor" href="#进行编译"></a> 进行编译</h4><ol><li>qmake</li><li>构建</li><li>运行</li></ol><p>在Qt的同级目录下生成了驱动文件夹。</p><h4 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h4><p>一般libmysql.dll和qsqlmysql.dll需要成对出现，才能让相应版本的MySql和QtCreater构建连接，然后进行正确驱动。qt通常为64位的，但是MySql的版本有时候为32位，这样在链接动态库的时候，往往会报错。我们需要选用正确位数的ibmysql.dll。</p><p>mysql位数的查询</p><ol><li><p>mysql -V（cmd控制台）</p><p><img src="https://i.loli.net/2020/12/28/rYEZ3XRBcn1Kgb9.png" alt="image-20201221223409087" /></p></li><li><p>show variables like ‘%version_%’; （使用mysql -u root -p进入mysql之后）</p><p><img src="https://i.loli.net/2020/12/28/iWluvePsmoEQV2T.png" alt="image-20201221223548665" /></p></li><li><p>which mysql |xargs file (linux/unix系统）</p></li><li><p>echo STATUS|mysql -uroot -ppassword |grep Ver</p></li></ol><p>可以看到我的mysql版本就是32位，这就是我为什么弄到凌晨五点才搞好驱动的原因。那么我们需要搞到同版本的64位驱动，去哪找呢？</p><p><img src="https://i.loli.net/2020/12/28/UwmgubWk9NFtCyn.png" alt="image-20201221223953030" /></p><p>官网上选择5.7.29位x86 64 bit的zip文件，解压之后找到lib目录下的libmysql.dll放到合适的位置，更改链接路径，就可以用64位的编译器进行编译。</p><h3 id="qt和mysql建立连接"><a class="markdownIt-Anchor" href="#qt和mysql建立连接"></a> Qt和MySql建立连接</h3><h4 id="添加驱动"><a class="markdownIt-Anchor" href="#添加驱动"></a> 添加驱动</h4><ol><li>MySql安装目录下的lib有libmysql.dll拷贝到qt编译器bin目录下。</li><li>编译生成的libqsqlmysql.dll和qsqlmysqld.dll添加到编译器./plugins/sqldrivers下面去。</li></ol><h4 id="在pro文件下添加代码"><a class="markdownIt-Anchor" href="#在pro文件下添加代码"></a> 在.pro文件下添加代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT +=sql</span><br></pre></td></tr></table></figure><h4 id="添加头文件"><a class="markdownIt-Anchor" href="#添加头文件"></a> 添加头文件</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSqlDatabase&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="连接代码"><a class="markdownIt-Anchor" href="#连接代码"></a> 连接代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">QSqlDatabase db = QSqlDatabase::addDatabase(<span class="string">&quot;QMYSQL&quot;</span>);  <span class="comment">//连接的MYSQL的数据库驱动</span></span><br><span class="line">db.setHostName(<span class="string">&quot;localhost&quot;</span>);         <span class="comment">//主机名</span></span><br><span class="line">db.setPort(<span class="number">3306</span>);                    <span class="comment">//端口</span></span><br><span class="line">db.setDatabaseName(<span class="string">&quot;test&quot;</span>);          <span class="comment">//数据库名</span></span><br><span class="line">db.setUserName(<span class="string">&quot;root&quot;</span>);              <span class="comment">//用户名</span></span><br><span class="line">db.setPassword(<span class="string">&quot;123456&quot;</span>); <span class="comment">//数据库的密码</span></span><br><span class="line">qDebug(<span class="string">&quot;database open status: %d\n&quot;</span>, db.open()); <span class="comment">//返回db的状态</span></span><br><span class="line">dp.close()</span><br></pre></td></tr></table></figure><p>这样就完成了Qt和数据库的连接</p><h3 id="qt中执行mysql语句"><a class="markdownIt-Anchor" href="#qt中执行mysql语句"></a> Qt中执行MySql语句</h3><p>在Qt中执行mysql语句可以使用<strong>QSqlQuery</strong>类，有两种使用方法。</p><h4 id="直接执行语句"><a class="markdownIt-Anchor" href="#直接执行语句"></a> 直接执行语句</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QSqlQuery query = QSqlQuery( <span class="keyword">this</span>-&gt;db );</span><br><span class="line">query.exec(<span class="string">&quot;sql语句&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="占位符语句执行"><a class="markdownIt-Anchor" href="#占位符语句执行"></a> 占位符语句执行</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QSqlQuery query = QSqlQuery( <span class="keyword">this</span>-&gt;db );</span><br><span class="line">QString sqlstr = <span class="string">&quot;select * from table_name where id=?&quot;</span><span class="string">&quot;;</span></span><br><span class="line"><span class="string">query.prepare(sqlstr);</span></span><br><span class="line"><span class="string">query.bindValue(0,1);</span></span><br></pre></td></tr></table></figure><p>这两种方式就可以完全操作mysql了，但是如果要在qt数据表控件里面使用mysql就需要使用其他类了。</p>]]></content>
      
      
      <categories>
          
          <category> QT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> Qt </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I.MX6U点灯（c语言）</title>
      <link href="2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E7%AC%94%E8%AE%B0/I.MX6U%E7%82%B9%E7%81%AFc%E8%AF%AD%E8%A8%80/"/>
      <url>2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E7%AC%94%E8%AE%B0/I.MX6U%E7%82%B9%E7%81%AFc%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="cortex-a7的九种运行模式"><a class="markdownIt-Anchor" href="#cortex-a7的九种运行模式"></a> Cortex-A7的九种运行模式</h2><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">User(USR)</td><td style="text-align:center">用户模式，非特权模式，大部分程序运行的时候就处于此模式。</td></tr><tr><td style="text-align:center">FIQ</td><td style="text-align:center">快速中断模式，进入 FIQ 中断异常</td></tr><tr><td style="text-align:center">IRQ</td><td style="text-align:center">一般中断模式。</td></tr><tr><td style="text-align:center">Supervisor(SVC)</td><td style="text-align:center">超级管理员模式，特权模式，供操作系统使用。</td></tr><tr><td style="text-align:center">Monitor(MON)</td><td style="text-align:center">监视模式？这个模式用于安全扩展模式。</td></tr><tr><td style="text-align:center">Abort(ABT)</td><td style="text-align:center">数据访问终止模式，用于虚拟存储以及存储保护。</td></tr><tr><td style="text-align:center">Hyp(HYP)</td><td style="text-align:center">超级监视模式？用于虚拟化扩展。</td></tr><tr><td style="text-align:center">Undef(UND)</td><td style="text-align:center">未定义指令终止模式。</td></tr><tr><td style="text-align:center">System(SYS)</td><td style="text-align:center">系统模式，用于运行特权级的操作系统任务</td></tr></tbody></table><h2 id="cpsr-寄存器"><a class="markdownIt-Anchor" href="#cpsr-寄存器"></a> CPSR 寄存器</h2><p><img src="https://i.loli.net/2020/12/29/IEy7JCHDdWzKLvj.png" alt="image-20201229143227646" /></p><ul><li>M[4:0]： 处理器模式控制位</li></ul><table><thead><tr><th style="text-align:center">M[4:0]</th><th style="text-align:center">处理器模式</th></tr></thead><tbody><tr><td style="text-align:center">10000</td><td style="text-align:center">User 模式</td></tr><tr><td style="text-align:center">10001</td><td style="text-align:center">FIQ 模式</td></tr><tr><td style="text-align:center">10010</td><td style="text-align:center">IRQ 模式</td></tr><tr><td style="text-align:center">10011</td><td style="text-align:center">Supervisor(SVC)模式</td></tr><tr><td style="text-align:center">10110</td><td style="text-align:center">Monitor(MON)模式</td></tr><tr><td style="text-align:center">10111</td><td style="text-align:center">Abort(ABT)模式</td></tr><tr><td style="text-align:center">11010</td><td style="text-align:center">Hyp(HYP)模式</td></tr><tr><td style="text-align:center">11011</td><td style="text-align:center">Undef(UND)模式</td></tr><tr><td style="text-align:center">11111</td><td style="text-align:center">System(SYS)模式</td></tr></tbody></table><h2 id="堆栈的上下增长方式"><a class="markdownIt-Anchor" href="#堆栈的上下增长方式"></a> 堆栈的上下增长方式</h2><ul><li><p>向上增长</p><p>低地址向高地址增长</p></li><li><p>向下增长</p><p>高地址向低地址增长</p></li></ul><h2 id="初始化c语言环境"><a class="markdownIt-Anchor" href="#初始化c语言环境"></a> 初始化c语言环境</h2><ol><li><p>进入SVC模式</p><p>将bit4-bit0配置为10011</p></li><li><p>设置栈指针</p><p>设置sp指针为0x80200000，ddr3的地址在0x80000000，栈的空间大小为0x200000=2M</p></li><li><p>跳转到main函数</p></li></ol><h2 id="点灯代码"><a class="markdownIt-Anchor" href="#点灯代码"></a> 点灯代码</h2><p>start.s初始化c语言环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    mrs r0,cpsr@将cpsr的值存入r0 </span><br><span class="line">    bic r0,r0,#0x1f@将r0低5位清0</span><br><span class="line">    orr r0,r0,#013@将10011和r0按位或，写入低5位，SVC模式</span><br><span class="line">    msr cpsr,r0@将r0的值写回到cpsr</span><br><span class="line"></span><br><span class="line">    ldr sp,&#x3D;0x80200000@将sp指针地址设置为0x80200000</span><br><span class="line">    b main@跳转到main函数</span><br></pre></td></tr></table></figure><p>main.h定义相关寄存器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MAIN_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MAIN_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CCM寄存器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR0                   *((volatile unsigned int *)0x020c4068)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR1                   *((volatile unsigned int *)0x020c406c)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR2                   *((volatile unsigned int *)0x020c4070)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR3                   *((volatile unsigned int *)0x020c4074)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR4                   *((volatile unsigned int *)0x020c4078)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR5                   *((volatile unsigned int *)0x020c407c)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR6                   *((volatile unsigned int *)0x020c4080)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IOMUX 相关寄存器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SW_MUX_GPIO1_IO03           *((volatile unsigned int *)0x020e0068)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SW_PAD_GPIO1_IO03           *((volatile unsigned int *)0x020e02f4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GPIO1 相关寄存器地址</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_DR                    *((volatile unsigned int *)0x0209c000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_GDIR                  *((volatile unsigned int *)0x0209c004)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_PSR                   *((volatile unsigned int *)0x0209c008)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_ICR1                  *((volatile unsigned int *)0x0209c00c)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_ICR2                  *((volatile unsigned int *)0x0209c010)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_IMR                   *((volatile unsigned int *)0x0209c014)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_ISR                   *((volatile unsigned int *)0x0209c018)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_EDGE_SEL              *((volatile unsigned int *)0x0209c01c)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p>main.c点灯程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//时钟使能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clk_enable</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CCM_CCGR0 = <span class="number">0xffffffff</span>;</span><br><span class="line">    CCM_CCGR1 = <span class="number">0xffffffff</span>;</span><br><span class="line">    CCM_CCGR2 = <span class="number">0xffffffff</span>;</span><br><span class="line">    CCM_CCGR3 = <span class="number">0xffffffff</span>;</span><br><span class="line">    CCM_CCGR4 = <span class="number">0xffffffff</span>;</span><br><span class="line">    CCM_CCGR5 = <span class="number">0xffffffff</span>;</span><br><span class="line">    CCM_CCGR6 = <span class="number">0xffffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//led初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SW_MUX_GPIO1_IO03 = <span class="number">0x5</span>;</span><br><span class="line">    SW_PAD_GPIO1_IO03 = <span class="number">0x10b0</span>;</span><br><span class="line">    GPIO1_GDIR = <span class="number">0x00000008</span>;</span><br><span class="line">    GPIO1_DR = <span class="number">0x0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//led打开</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_on</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPIO1_DR &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">3</span>);    <span class="comment">//bit3清零</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//led关闭</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_off</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPIO1_DR |= (<span class="number">1</span>&lt;<span class="number">3</span>);<span class="comment">//bit3置1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_short</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(n--);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时ms</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        delay_short(<span class="number">0x7ff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clk_enable();</span><br><span class="line">    led_init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       led_off();</span><br><span class="line">       delay(<span class="number">500</span>);</span><br><span class="line">       led_on();</span><br><span class="line">       delay(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Makefile自动编译文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">objs := start.o main.o</span><br><span class="line"></span><br><span class="line"><span class="section">ledc.bin:<span class="variable">$(objs)</span></span></span><br><span class="line">arm-linux-gnueabihf-ld -Ttext 0x87800000 -o ledc.elf <span class="variable">$^</span></span><br><span class="line">arm-linux-gnueabihf-objcopy -O binary -S ledc.elf <span class="variable">$@</span></span><br><span class="line">arm-linux-gnueabihf-objdump -D -m arm ledc.elf &gt; ledc.dis</span><br><span class="line"></span><br><span class="line"><span class="section">%.o:%.s</span></span><br><span class="line">arm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o:%.S</span></span><br><span class="line">arm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o:%.c</span></span><br><span class="line">arm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf *.o ledc.bin ledc.elf ledc.dis</span><br></pre></td></tr></table></figure><ul><li><p>第一行：objs变量 包含生成ledc.bin的依赖文件。</p></li><li><p>第三行：生成文件ledc.bin，依赖start.o和main.o。</p></li><li><p>第四行：使用arm-linux-gnueabihf-ld链接，起始地址为0x87800000，“$^”表示所有依赖文件的集合，要把start.o放在最前面，因为需要汇编代码在最前面进行初始化。等同于：</p><p><code>arm-linux-gnueabihf-ld -Ttext 0x87800000 -o ledc.elf start.o main.o</code></p></li><li><p>第五行：使用arm-linux-gnueabihf-objcopy将ledc.elf文件转为ledc.bin文件，“$@”表示目标集合，等同于：</p><p><code>arm-linux-gnueabihf-objcopy -O binary -S ledc.elf ledc.bin</code></p></li><li><p>第六行：使用arm-linux-gnueabihf-objdump反汇编，生成ledc.dis</p></li><li><p>后面是用arm-linux-gnueabihf-gcc把.s、.c、.S文件生成对应的.o文件，就是把start.s生成start.o，把main.c生成main.o</p></li></ul><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ul><li>汇编初始化c语言环境<ul><li>配置模式</li><li>配置sp指针</li><li>配置跳转函数</li></ul></li><li>h文件定义需要操作的寄存器<ul><li>CCM寄存器</li><li>IOMUX 相关寄存器</li><li>GPIO1 相关寄存器</li></ul></li><li>c文件配置寄存器以及逻辑代码<ul><li>初始化时钟</li><li>初始化led灯（GPIO的配置）</li><li>延时函数</li></ul></li><li>Makefile文件<ul><li>o文件的生成</li><li>bin文件的生成<ul><li>链接起始地址 生成.elf</li><li>.elf文件生成.bin文件</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux驱动开发笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> I.MX6U </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

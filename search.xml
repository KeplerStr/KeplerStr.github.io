<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c++基础</title>
      <link href="2020/01/01/C++%E5%9F%BA%E7%A1%80/"/>
      <url>2020/01/01/C++%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="c基础上"><a class="markdownIt-Anchor" href="#c基础上"></a> c++基础（上）</h2><h3 id="什么是c"><a class="markdownIt-Anchor" href="#什么是c"></a> 什么是c++·</h3><p>c语言的升级版，在c的基础上增加了很多功能。是一种高级语言。</p><h3 id="什么是面向对象什么是面向过程"><a class="markdownIt-Anchor" href="#什么是面向对象什么是面向过程"></a> 什么是面向对象，什么是面向过程</h3><p>c语言就是面向过程的，c++就是面向对象的。</p><p>示例：a+b</p><p>​直接计算a+b就是面向过程</p><p>​面向对象就是a+b封装到类里面，形成一个方法。</p><h3 id="c的灵魂c的类"><a class="markdownIt-Anchor" href="#c的灵魂c的类"></a> c<ins>的灵魂，c</ins>的类</h3><p>类可以看成是c语言的结构体的升级版。类的成员不仅是变量，也可以是函数。</p><h3 id="如何定义一个类"><a class="markdownIt-Anchor" href="#如何定义一个类"></a> 如何定义一个类</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是对象"><a class="markdownIt-Anchor" href="#什么是对象"></a> 什么是对象</h3><p>对象是类的实例化。</p><h3 id="如何定义一个对象"><a class="markdownIt-Anchor" href="#如何定义一个对象"></a> 如何定义一个对象</h3><p>直接定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student my;<span class="comment">//student是类，my是对象</span></span><br></pre></td></tr></table></figure><p>在堆里定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student *my = <span class="keyword">new</span> student;<span class="comment">//</span></span><br></pre></td></tr></table></figure><p>删除对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> my;</span><br></pre></td></tr></table></figure><h3 id="怎么访问类的成员"><a class="markdownIt-Anchor" href="#怎么访问类的成员"></a> 怎么访问类的成员</h3><p>普通类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student my;<span class="comment">//student是类，my是对象</span></span><br><span class="line">my.age;</span><br></pre></td></tr></table></figure><p>指针类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student *my = <span class="keyword">new</span> student;<span class="comment">//</span></span><br><span class="line">my-&gt;age;</span><br></pre></td></tr></table></figure><h3 id="类的成员函数"><a class="markdownIt-Anchor" href="#类的成员函数"></a> 类的成员函数</h3><p>类里面的成员不仅可以是变量也可以是函数</p><p>第一步：在类里面声明函数</p><p>第二步：实现函数。在类里面写，也可以在类外面写</p><p>写在里面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">123</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写在外面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">student::test</span><span class="params">()</span></span>&#123; <span class="comment">//student::表示属于这个类里面的函数</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">123</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的访问修饰符"><a class="markdownIt-Anchor" href="#类的访问修饰符"></a> 类的访问修饰符</h3><p>类的访问修饰符是对类的成员进行权限管理。</p><p>public：表示函数和变量是公有的，任何人都可以用访问。</p><p>private：表示私有，只能在类里面访问。想在类外面访问，可以通过公有成员函数访问。</p><p>protected：表示函数和变量只能在自己的类里面自己访问自己，但是可以被派生类访问。</p><h2 id="c基础下"><a class="markdownIt-Anchor" href="#c基础下"></a> c++基础（下）</h2><h3 id="类函数的重载特性"><a class="markdownIt-Anchor" href="#类函数的重载特性"></a> 类函数的重载特性</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重载函数在调用的时候会根据参数来自动匹配函数进行调用</p><h3 id="构造函数和析构函数"><a class="markdownIt-Anchor" href="#构造函数和析构函数"></a> 构造函数和析构函数</h3><p>析构函数：假如定义了析构函数，当对象被删除或者生命周期结束的时候，就会触发析构函数。</p><p>构造函数：假如定义了构造函数，当对象被创建就会触发这个构造函数。</p><p>如何定义？</p><ol><li>析构函数和构造函数的名字必须和类名一样。</li><li>析构函数需要在函数名前加~</li><li>构造函数可以被重载，析构函数不能被重载</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    student();</span><br><span class="line">    student(<span class="keyword">int</span> b);</span><br><span class="line">    ~student();</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">student::student()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student::student(<span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student::~student()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    student *my = <span class="keyword">new</span> student(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的继承"><a class="markdownIt-Anchor" href="#类的继承"></a> 类的继承</h3><p>什么是类的继承？</p><p>类的继承允许我们在新的类里面继承父类的public还有protected部分，private是不能被继承的。</p><p>格式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 儿子:</span><span class="keyword">public</span> 爸爸&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">……</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mystudent</span>:</span><span class="keyword">public</span> student&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如何在子类访问父类成员？</p><p>也是通过.和-&gt;来访问</p><h3 id="虚函数和纯虚函数"><a class="markdownIt-Anchor" href="#虚函数和纯虚函数"></a> 虚函数和纯虚函数</h3><p>虚函数：有实际定义的，允许派生类对他进行覆盖式的替换，用virtual来修饰。</p><p>纯虚函数：没有实际定义的虚函数就是纯虚函数。</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;<span class="comment">//虚函数 父类定义 子类覆盖修改</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//纯虚函数</span></span><br></pre></td></tr></table></figure><p>如何定义一个虚函数？</p><p>用virtual来进行修饰。</p><p>虚函数的优点？</p><p>可以预留接口，便于分工合作。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx基本概念</title>
      <link href="2020/01/01/Nginx_notes/Nginx%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>2020/01/01/Nginx_notes/Nginx%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="nginx简介"><a class="markdownIt-Anchor" href="#nginx简介"></a> Nginx简介</h2><p>1、什么是Nginx？<a href="https://baike.baidu.com/item/nginx">百度百科</a></p><p><em>Nginx</em> (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>web服务器</p><p>专为性能优化而开发</p><p>具有很高的稳定性</p><h2 id="反向代理"><a class="markdownIt-Anchor" href="#反向代理"></a> 反向代理</h2><p>正向代理：</p><ul><li>在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问</li></ul><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210228151428.png" alt="image-20210228151424602" /></p><p>反向代理：</p><p>将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210228152559.png" alt="image-20210228152515695" /></p><h2 id="负载均衡"><a class="markdownIt-Anchor" href="#负载均衡"></a> 负载均衡</h2><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210228153403.png" alt="image-20210228153401019" /></p><p>单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210228153651.png" alt="image-20210228153648503" /></p><h2 id="动静分离"><a class="markdownIt-Anchor" href="#动静分离"></a> 动静分离</h2><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210228154233.png" alt="单一服务器访问资源" /></p><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210228154516.png" alt="image-20210228154512191" /></p>]]></content>
      
      
      <categories>
          
          <category> web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反向代理</title>
      <link href="2020/01/01/Nginx_notes/Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B/"/>
      <url>2020/01/01/Nginx_notes/Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="反向代理"><a class="markdownIt-Anchor" href="#反向代理"></a> 反向代理</h2><h3 id="实例1windows进行访问"><a class="markdownIt-Anchor" href="#实例1windows进行访问"></a> 实例1：windows进行访问</h3><p>实现效果</p><p>打开浏览器，<a href="http://xn--www-0v1e42u56awbb6lc4448byfnmk1gl7q.123.com">在浏览器地址栏输入地址www.123.com</a>，跳转到Linux系统下的tomcat主页面中。</p><p>准备工作</p><p>在Linux中安装tomcat，使用默认端口8080</p><ul><li>下载压缩包</li></ul><p><a href="https://tomcat.apache.org/download-80.cgi">下载链接</a></p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210228205744.png" alt="image-20210228205742449" /></p><ul><li>解压</li></ul><p>选择已经编译好了的版本，放在服务器/usr/src/下</p><p><code>sudo tar -zxvf apache-tomcat-8.5.63.tar.gz</code></p><p>解压成功后，不需要编译，就可以直接使用</p><ul><li>开启服务</li></ul><p>运行脚本 ./startup.sh</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210228210336.png" alt="image-20210228210334725" /></p><p>在服务器打开端口8080，允许外界访问</p><ul><li>阿里云安全组增加规则</li></ul><p>实例1：windows进行访问</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210228212644.png" alt="image-20210228212641524" /></p><p>host文件地址</p><p>C:\Windows\System32\drivers\etc</p><p>39.108.249.43<a href="http://www.123.com">www.123.com</a></p><p>在nginx里面修改配置文件nginx.conf</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210228222929.png" alt="image-20210228222927144" /></p><p>反向代理已经完成</p><h3 id="实例2"><a class="markdownIt-Anchor" href="#实例2"></a> 实例2：</h3><p>1、实现效果</p><p>使用nginx反向代理，根据访问的路径，跳转到不同端口的服务中去，nginx监听端口为9001</p><p>访问http://127.0.0.1:9001/edu/ 直接跳转到127.0.0.1:8081</p><p>访问http://127.0.0.1:9001/vod/ 直接跳转到127.0.0.1:8082</p><p>2、准备工作</p><p>ps -ef | grep tomcat 查看进程</p><p>kill -9 - 查询到的进程号</p>]]></content>
      
      
      <categories>
          
          <category> web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx安装、常用命令以及配置</title>
      <link href="2020/01/01/Nginx_notes/Nginx%E5%AE%89%E8%A3%85%E3%80%81%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>2020/01/01/Nginx_notes/Nginx%E5%AE%89%E8%A3%85%E3%80%81%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>官网下载：</p><p>先安装nginx相关的依赖</p><ul><li><p>pcre</p></li><li><p>openssl</p></li><li><p>zlib</p></li><li><p>nginx</p></li></ul><p>安装三步骤</p><ul><li>解压 -zxvf -jxvf</li><li>配置 执行配置脚本 bash 配置脚本</li><li>make</li><li>make install</li></ul><p>依次安装上面的依赖库包</p><p>最终在/usr/local/nginx/sbin/文件下存在一个nginx脚本可以用来启动nginx</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210228174515.png" alt="image-20210228174513353" /></p><p>成功启动</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210228192508.png" alt="image-20210228192505066" /></p><p>在阿里云服务器上添加允许80端口访问，就可以成功访问到上面的页面了。</p><h2 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h2><p>必须进入 /usr./local/nginx/sbin目录下</p><ul><li><p>查看版本号</p><p>./nginx -v</p></li><li><p>关闭nginx</p><p>./nginx -s stop</p></li><li><p>开启nginx</p><p>./nginx</p></li><li><p>查看进程</p><p>ps -ef |grep nginx</p></li><li><p>重新加载nginx nginx.conf   加载文件</p><p>./nginx -s reload</p></li></ul><h2 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h2><h3 id="配置文件的位置"><a class="markdownIt-Anchor" href="#配置文件的位置"></a> 配置文件的位置</h3><p>usr/local/nginx/conf/nginx.conf</p><h3 id="配置组成"><a class="markdownIt-Anchor" href="#配置组成"></a> 配置组成</h3><p><strong>全局块</strong></p><p>从配置文件开始到events块之间的内容，主要会设置一些影响 nginx服务器整体运行的配置指令</p><p>worker_processes  1;  并发数</p><p><strong>evens块</strong></p><p>events块涉及的指令主要影响Nginx服务器与用户的网络连接</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210228193858.png" alt="image-20210228193855772" /></p><p>最大连接数</p><p><strong>http块</strong></p><p>配置最频繁的部分。</p><ul><li>http全局块</li></ul><p>包含的</p><ul><li>server块</li></ul><p>和虚拟主机有很大的关系。</p>]]></content>
      
      
      <categories>
          
          <category> web服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 笔记</title>
      <link href="2020/01/01/Shell_Notes/shell%E8%AF%AD%E6%B3%95/"/>
      <url>2020/01/01/Shell_Notes/shell%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="shell-语法"><a class="markdownIt-Anchor" href="#shell-语法"></a> shell 语法</h2><blockquote><p>shell脚本就是将完成一个任务的所有的命令按照执行的先后顺序，自上而下写入到一个文本文件中，然后给予执行权限后运行。</p></blockquote><h3 id="如何书写一个shell脚本"><a class="markdownIt-Anchor" href="#如何书写一个shell脚本"></a> 如何书写一个shell脚本</h3><p>脚本的命名：</p><ul><li><p>名字要有意义</p></li><li><p>建议以.sh结尾</p></li><li><p>名字不要太长，最好在30字节以内</p></li></ul><p>例如check_memory.sh</p><p>shell脚本格式：</p><ul><li><p>开头指定运行环境</p><p>例如 #!/bin/bash 或者 #/bin/env bash</p></li><li><p>shell中注释使用#</p></li><li><p>加入说明字段</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author: hRowe</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Create Time: 2021/1/2 0:06</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Script Description:</span> </span><br></pre></td></tr></table></figure><h3 id="shell脚本的运行"><a class="markdownIt-Anchor" href="#shell脚本的运行"></a> shell脚本的运行</h3><ul><li>给执行权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod  700 test.sh</span><br><span class="line">./test.sh</span><br></pre></td></tr></table></figure><ul><li>指定解释器，直接运行</li></ul><p><code>bash ./test.sh</code></p><h3 id="shell脚本中的特殊命令"><a class="markdownIt-Anchor" href="#shell脚本中的特殊命令"></a> shell脚本中的特殊命令</h3><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210215001410.png" alt="特殊命令" /></p><h3 id="管道"><a class="markdownIt-Anchor" href="#管道"></a> 管道</h3><p>I 管道符在shell中使用非常广泛，许多组合命令都需要组合命令来进行输出，管道符就是下一个命令对上一个命令的输出的使用</p><h3 id="重定向"><a class="markdownIt-Anchor" href="#重定向"></a> 重定向</h3><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210215085209.png" alt="image-20210215085206967" /></p><h3 id="shell中的数学运算"><a class="markdownIt-Anchor" href="#shell中的数学运算"></a> shell中的数学运算</h3><p>expr命令：只能做整数运算，注意空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">expr 1 + 1</span><br><span class="line">expr 5 - 2</span><br><span class="line">expr 5 \* 2   <span class="comment">#出现* 前面应该加转义字符</span></span><br><span class="line">expr 5 % 2</span><br></pre></td></tr></table></figure><p>$(()) 双括弧 表示运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(())</span><br></pre></td></tr></table></figure><h3 id="脚本退出"><a class="markdownIt-Anchor" href="#脚本退出"></a> 脚本退出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span> NUM 退出脚本，释放系统资源，NUM代表一个整数，代表返回值。</span><br></pre></td></tr></table></figure><h2 id="shell格式化输出"><a class="markdownIt-Anchor" href="#shell格式化输出"></a> shell格式化输出</h2><ul><li>echo 命令</li><li>颜色输出</li></ul><p>一个程序需要有0个或者多个的输入，一个或者更多的输出。可以没有输入，但是必须要有输出。</p><h3 id="echo-命令介绍"><a class="markdownIt-Anchor" href="#echo-命令介绍"></a> echo 命令介绍</h3><p>功能：将内容输出到默认显示设备</p><p>echo命令的功能是在显示器上显示一段文字，一般起一个提示的作用。</p><p>命令选项</p><p>-n 在最后自动换行</p><p>-e 转义字符</p><p>转义字符：</p><ul><li>\a 发出警告声</li><li>\b 删除前一个字符</li><li>\c 最后不加上换行符号</li><li>\f 换行但光标仍然停留在原来的位置</li><li>\n 换行且光标移到行首</li><li>\r 光标移到行首，但是不换行</li><li>\t 插入tab</li><li>\v和\f相同</li></ul><h3 id="颜色代码"><a class="markdownIt-Anchor" href="#颜色代码"></a> 颜色代码</h3><p>格式：</p><p><code>echo -e &quot;\033[背景色;体颜色 字符串 \033[属性效果&quot;</code></p><p>字颜色：30-37</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[30m 黑色字 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[31m 红色字 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[32m 绿色字 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[33m 黄色字 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[34m 蓝色字 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[35m 紫色字 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[36m 天蓝色字 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[37m 白色字 \033[0m&quot;</span></span><br></pre></td></tr></table></figure><p>背景色：40-47</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[40;37m 黑底白字 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[41;37m 红底白字 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[42;37m 绿底白字 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[43;37m 黄底白字 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[44;37m 蓝底白字 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[45;37m 紫底白字 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[46;37m 天蓝底白字 \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[47;30m 白底黑字 \033[0m&quot;</span></span><br></pre></td></tr></table></figure><p>控制选线说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\033[0m 关闭所有属性</span><br><span class="line">\033[1m 设置高亮度</span><br><span class="line">\033[4m下划线</span><br><span class="line">\033[5m闪烁</span><br><span class="line">\033[7m 反显</span><br><span class="line">\033[8m 消隐</span><br><span class="line"></span><br><span class="line">\033[30m - \33[37m</span><br></pre></td></tr></table></figure><h2 id="shell基本输入"><a class="markdownIt-Anchor" href="#shell基本输入"></a> shell基本输入</h2><ul><li>read命令</li></ul><h3 id="read命令"><a class="markdownIt-Anchor" href="#read命令"></a> read命令</h3><p>默认接受键盘的输入，回车代表输入结束。</p><p>命令选项：</p><ul><li>-p 打印信息</li><li>-t 限定时间</li><li>-s 不回显</li><li>-n 输入字符个数</li></ul><p>代码示例：</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git简记</title>
      <link href="2020/01/01/git_Notes/git%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8(GitHub)/"/>
      <url>2020/01/01/git_Notes/git%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8(GitHub)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="在github上建立仓库"><a class="markdownIt-Anchor" href="#在github上建立仓库"></a> 在GitHub上建立仓库</h2><ol><li><p>注册</p><p><a href="https://github.com/">GitHub官网</a></p></li><li><p>建立仓库</p><ul><li>登录后在左侧找到new新建</li></ul><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101135905.png" alt="" /></p><ul><li><p>按以下步骤创建</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101140551.png" alt="" /></p></li></ul></li></ol><h2 id="在window下安装git"><a class="markdownIt-Anchor" href="#在window下安装git"></a> 在window下安装git</h2><ol><li><p>git下载</p><p><a href="https://git-scm.com/download/">下载地址</a></p></li><li><p>安装</p><p>一路next，默认配置就行。</p></li><li><p>配置git</p><ul><li><p>在桌面鼠标右键点击Git Bash Here</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101141317.png" alt="" /></p></li><li><p>打开git命令行输入命名ssh-keygen –t rsa –C “邮箱地址”</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101141704.png" alt="" /></p></li><li><p>一路回车，不要输入，就会在默认地址生成密钥文件id_rsa.pub，打开后全选复制到剪贴板</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101142511.png" alt="" /></p></li></ul></li><li><p>回到GitHub添加SSH</p><ul><li><p>在头像处下拉setting</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101142930.png" alt="" /></p></li><li><p>添加ssh key</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101143128.png" alt="" /></p></li><li><p>将之前拷贝的密钥拷贝到这里，添加密钥</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101143415.png" alt="" /></p></li></ul></li><li><p>验证配置 输入<code>ssh -T git@github.com</code>，这样就配置成功了。</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101143906.png" alt="" /></p></li></ol><h2 id="快速使用"><a class="markdownIt-Anchor" href="#快速使用"></a> 快速使用</h2><h3 id="配置用户邮箱和密码"><a class="markdownIt-Anchor" href="#配置用户邮箱和密码"></a> 配置用户邮箱和密码</h3><ul><li><p>git config –global <a href="http://user.name">user.name</a> “用户名”</p></li><li><p>git config –global user.email “邮箱”</p></li></ul><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101144503.png" alt="" /></p><h3 id="建立本地仓库"><a class="markdownIt-Anchor" href="#建立本地仓库"></a> 建立本地仓库</h3><ul><li><p>在本地建立文件夹，并添加要上传的文件</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101145233.png" alt="" /></p></li><li><p>在这个文件夹使用三个命令进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:用户名/仓库名.git</span><br><span class="line">git pull git@github.com:用户名/仓库名.git</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101145718.png" alt="" /></p><p>shift+右键进入git命令行，依次执行三个命令，本地生成README文件</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101150547.png" alt="" /></p></li></ul><h3 id="上传文件到远程仓库"><a class="markdownIt-Anchor" href="#上传文件到远程仓库"></a> 上传文件到远程仓库</h3><ul><li><p>git add命令</p><ul><li>git add . 上传全部文件</li><li>git add text.txt 上传指定文件</li></ul></li><li><p>git commit –m ‘会话消息’</p><p>输入以下命令</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add test.txt</span><br><span class="line">git commit -m &#x27;测试文本&#x27;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101151317.png" alt="" /></p></li><li><p>查看远程仓库 test.txt已经成功上传</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210101151607.png" alt="" /></p></li><li><p>清除git提交记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log 查看提交记录</span><br><span class="line">git reset —hard 8628628991470b26e698d98e986a54fa6b5f4352 版本号</span><br><span class="line">git -f push origin master 强制推送上去</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> git笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I.MX6U点灯（c语言）</title>
      <link href="2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/I.MX6U%E7%82%B9%E7%81%AFc%E8%AF%AD%E8%A8%80/"/>
      <url>2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/I.MX6U%E7%82%B9%E7%81%AFc%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="cortex-a7的九种运行模式"><a class="markdownIt-Anchor" href="#cortex-a7的九种运行模式"></a> Cortex-A7的九种运行模式</h2><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">User(USR)</td><td style="text-align:center">用户模式，非特权模式，大部分程序运行的时候就处于此模式。</td></tr><tr><td style="text-align:center">FIQ</td><td style="text-align:center">快速中断模式，进入 FIQ 中断异常</td></tr><tr><td style="text-align:center">IRQ</td><td style="text-align:center">一般中断模式。</td></tr><tr><td style="text-align:center">Supervisor(SVC)</td><td style="text-align:center">超级管理员模式，特权模式，供操作系统使用。</td></tr><tr><td style="text-align:center">Monitor(MON)</td><td style="text-align:center">监视模式？这个模式用于安全扩展模式。</td></tr><tr><td style="text-align:center">Abort(ABT)</td><td style="text-align:center">数据访问终止模式，用于虚拟存储以及存储保护。</td></tr><tr><td style="text-align:center">Hyp(HYP)</td><td style="text-align:center">超级监视模式？用于虚拟化扩展。</td></tr><tr><td style="text-align:center">Undef(UND)</td><td style="text-align:center">未定义指令终止模式。</td></tr><tr><td style="text-align:center">System(SYS)</td><td style="text-align:center">系统模式，用于运行特权级的操作系统任务</td></tr></tbody></table><h2 id="cpsr-寄存器"><a class="markdownIt-Anchor" href="#cpsr-寄存器"></a> CPSR 寄存器</h2><p><img src="https://i.loli.net/2020/12/29/IEy7JCHDdWzKLvj.png" alt="image-20201229143227646" /></p><ul><li>M[4:0]： 处理器模式控制位</li></ul><table><thead><tr><th style="text-align:center">M[4:0]</th><th style="text-align:center">处理器模式</th></tr></thead><tbody><tr><td style="text-align:center">10000</td><td style="text-align:center">User 模式</td></tr><tr><td style="text-align:center">10001</td><td style="text-align:center">FIQ 模式</td></tr><tr><td style="text-align:center">10010</td><td style="text-align:center">IRQ 模式</td></tr><tr><td style="text-align:center">10011</td><td style="text-align:center">Supervisor(SVC)模式</td></tr><tr><td style="text-align:center">10110</td><td style="text-align:center">Monitor(MON)模式</td></tr><tr><td style="text-align:center">10111</td><td style="text-align:center">Abort(ABT)模式</td></tr><tr><td style="text-align:center">11010</td><td style="text-align:center">Hyp(HYP)模式</td></tr><tr><td style="text-align:center">11011</td><td style="text-align:center">Undef(UND)模式</td></tr><tr><td style="text-align:center">11111</td><td style="text-align:center">System(SYS)模式</td></tr></tbody></table><h2 id="堆栈的上下增长方式"><a class="markdownIt-Anchor" href="#堆栈的上下增长方式"></a> 堆栈的上下增长方式</h2><ul><li><p>向上增长</p><p>低地址向高地址增长</p></li><li><p>向下增长</p><p>高地址向低地址增长</p></li></ul><h2 id="初始化c语言环境"><a class="markdownIt-Anchor" href="#初始化c语言环境"></a> 初始化c语言环境</h2><ol><li><p>进入SVC模式</p><p>将bit4-bit0配置为10011</p></li><li><p>设置栈指针</p><p>设置sp指针为0x80200000，ddr3的地址在0x80000000，栈的空间大小为0x200000=2M</p></li><li><p>跳转到main函数</p></li></ol><h2 id="点灯代码"><a class="markdownIt-Anchor" href="#点灯代码"></a> 点灯代码</h2><p>start.s初始化c语言环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    mrs r0,cpsr@将cpsr的值存入r0 </span><br><span class="line">    bic r0,r0,#0x1f@将r0低5位清0</span><br><span class="line">    orr r0,r0,#013@将10011和r0按位或，写入低5位，SVC模式</span><br><span class="line">    msr cpsr,r0@将r0的值写回到cpsr</span><br><span class="line"></span><br><span class="line">    ldr sp,&#x3D;0x80200000@将sp指针地址设置为0x80200000</span><br><span class="line">    b main@跳转到main函数</span><br></pre></td></tr></table></figure><p>main.h定义相关寄存器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MAIN_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MAIN_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CCM寄存器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR0                   *((volatile unsigned int *)0x020c4068)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR1                   *((volatile unsigned int *)0x020c406c)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR2                   *((volatile unsigned int *)0x020c4070)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR3                   *((volatile unsigned int *)0x020c4074)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR4                   *((volatile unsigned int *)0x020c4078)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR5                   *((volatile unsigned int *)0x020c407c)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_CCGR6                   *((volatile unsigned int *)0x020c4080)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IOMUX 相关寄存器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SW_MUX_GPIO1_IO03           *((volatile unsigned int *)0x020e0068)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SW_PAD_GPIO1_IO03           *((volatile unsigned int *)0x020e02f4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GPIO1 相关寄存器地址</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_DR                    *((volatile unsigned int *)0x0209c000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_GDIR                  *((volatile unsigned int *)0x0209c004)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_PSR                   *((volatile unsigned int *)0x0209c008)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_ICR1                  *((volatile unsigned int *)0x0209c00c)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_ICR2                  *((volatile unsigned int *)0x0209c010)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_IMR                   *((volatile unsigned int *)0x0209c014)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_ISR                   *((volatile unsigned int *)0x0209c018)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_EDGE_SEL              *((volatile unsigned int *)0x0209c01c)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br></pre></td></tr></table></figure><p>main.c点灯程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//时钟使能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clk_enable</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CCM_CCGR0 = <span class="number">0xffffffff</span>;</span><br><span class="line">    CCM_CCGR1 = <span class="number">0xffffffff</span>;</span><br><span class="line">    CCM_CCGR2 = <span class="number">0xffffffff</span>;</span><br><span class="line">    CCM_CCGR3 = <span class="number">0xffffffff</span>;</span><br><span class="line">    CCM_CCGR4 = <span class="number">0xffffffff</span>;</span><br><span class="line">    CCM_CCGR5 = <span class="number">0xffffffff</span>;</span><br><span class="line">    CCM_CCGR6 = <span class="number">0xffffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//led初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SW_MUX_GPIO1_IO03 = <span class="number">0x5</span>;</span><br><span class="line">    SW_PAD_GPIO1_IO03 = <span class="number">0x10b0</span>;<span class="comment">//配置io</span></span><br><span class="line">    GPIO1_GDIR = <span class="number">0x00000008</span>;<span class="comment">//bit3置1</span></span><br><span class="line">    GPIO1_DR = <span class="number">0x0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//led打开</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_on</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPIO1_DR &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">3</span>);    <span class="comment">//bit3清零</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//led关闭</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_off</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPIO1_DR |= (<span class="number">1</span>&lt;&lt;<span class="number">3</span>);<span class="comment">//bit3置1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_short</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(n--);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时ms</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        delay_short(<span class="number">0x7ff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clk_enable();</span><br><span class="line">    led_init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       led_off();</span><br><span class="line">       delay(<span class="number">500</span>);</span><br><span class="line">       led_on();</span><br><span class="line">       delay(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Makefile自动编译文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">objs := start.o main.o</span><br><span class="line"></span><br><span class="line"><span class="section">ledc.bin:<span class="variable">$(objs)</span></span></span><br><span class="line">arm-linux-gnueabihf-ld -Ttext 0x87800000 -o ledc.elf <span class="variable">$^</span></span><br><span class="line">arm-linux-gnueabihf-objcopy -O binary -S ledc.elf <span class="variable">$@</span></span><br><span class="line">arm-linux-gnueabihf-objdump -D -m arm ledc.elf &gt; ledc.dis</span><br><span class="line"></span><br><span class="line"><span class="section">%.o:%.s</span></span><br><span class="line">arm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o:%.S</span></span><br><span class="line">arm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o:%.c</span></span><br><span class="line">arm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf *.o ledc.bin ledc.elf ledc.dis</span><br></pre></td></tr></table></figure><ul><li><p>第一行：objs变量 包含生成ledc.bin的依赖文件。</p></li><li><p>第三行：生成文件ledc.bin，依赖start.o和main.o。</p></li><li><p>第四行：使用arm-linux-gnueabihf-ld链接，起始地址为0x87800000，“$^”表示所有依赖文件的集合，要把start.o放在最前面，因为需要汇编代码在最前面进行初始化。等同于：</p><p><code>arm-linux-gnueabihf-ld -Ttext 0x87800000 -o ledc.elf start.o main.o</code></p></li><li><p>第五行：使用arm-linux-gnueabihf-objcopy将ledc.elf文件转为ledc.bin文件，“$@”表示目标集合，等同于：</p><p><code>arm-linux-gnueabihf-objcopy -O binary -S ledc.elf ledc.bin</code></p></li><li><p>第六行：使用arm-linux-gnueabihf-objdump反汇编，生成ledc.dis</p></li><li><p>后面是用arm-linux-gnueabihf-gcc把.s、.c、.S文件生成对应的.o文件，就是把start.s生成start.o，把main.c生成main.o</p></li></ul><h2 id="计算机基础之text段-data段-bss段和stack-heap"><a class="markdownIt-Anchor" href="#计算机基础之text段-data段-bss段和stack-heap"></a> 计算机基础之text段、data段、bss段和stack、 heap</h2><ul><li><p>text段</p><p>就是****放程序代码****的,编译时确定,只读；</p><blockquote><p>程序代码段，在AT91库中是表示程序段的大小，它是由编译器在编译连接时自动计算的，当你在链接定位文件中将该符号放置在代码段后，那么该符号表示的值就是代码段大小，编译连接时，该符号所代表的值会自动代入到源程序中。</p></blockquote></li><li><p>data段</p><p>存放在编译阶段(而非运行时)就能确定的数据,可读可写。也就是通常所说的静态存储区,赋了****初值的全局变量*<em><strong>和</strong></em>*赋初值的静态变量****存放在这个区域,<strong>常量</strong>也存放在这个区域；</p><blockquote><p>静态初始化的数据，所以有初值的全局变量和static变量在data区。段的起始位置也是由连接定位文件所确定，大小在编译连接时自动分配，它和你的程序大小没有关系，但和程序使用到的全局变量，常量数量相关。</p></blockquote></li><li><p>bss段</p><p>定义而****没有赋初值的全局变量和静态变量****,放在这个区域；</p><blockquote><p>通常是指用来存放程序中未初始化的全局变量的一块内存区域，在程序载入时由内核清0。BSS段属于静态内存分配。它的初始值也是由用户自己定义的连接定位文件所确定，用户应该将它定义在可读写的RAM区内，源程序中使用malloc分配的内存就是这一块，它不是根据data大小确定，主要由程序中同时分配内存最大值所确定，不过如果超出了范围，也就是分配失败，可以等空间释放之后再分配。</p></blockquote></li><li><p>栈区（stack）</p><p>由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</p><blockquote><p>保存函数的局部变量和参数。是一种“后进先出”（Last In First Out，LIFO）的数据结构，这意味着最后放到栈上的数据，将会是第一个从栈上移走的数据。对于哪些暂时存贮的信息，和不需要长时间保存的信息来说，LIFO这种数据结构非常理想。在调用函数或过程后，系统通常会清除栈上保存的局部变量、函数调用信息及其它的信息。栈另外一个重要的特征是，它的地址空间“向下减少”，即当栈上保存的数据越多，栈的地址就越低。栈（stack）的顶部在可读写的RAM区的最后。</p></blockquote></li><li><p>堆区（heap）</p><p>一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事。</p><blockquote><p>保存函数内部动态分配内存，是另外一种用来保存程序信息的数据结构，更准确的说是保存程序的动态变量。堆是“先进先出”（First In first Out，FIFO）数据结构。它只允许在堆的一端插入数据，在另一端移走数据。堆的地址空间“向上增加”，即当堆上保存的数据越多，堆的地址就越高。</p></blockquote></li></ul><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20201230210156.png" alt="image-20201230210153975" /></p><p>imx6ul.lds 链接文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SECTIONS&#123;</span><br><span class="line">    . &#x3D; 0X87800000;</span><br><span class="line">    .text :</span><br><span class="line">    &#123;</span><br><span class="line">        start.o</span><br><span class="line">        main.o</span><br><span class="line">        *(.text)</span><br><span class="line">    &#125;</span><br><span class="line">    .rodata ALIGN(4) : &#123;*(.rodata*)&#125;        </span><br><span class="line">    .data ALIGN(4) : &#123;*(.data)&#125;                 &#x2F;*4字节对齐，定义数据段*&#x2F;</span><br><span class="line">    __bss_start &#x3D; .;                                       &#x2F;*bss段的起始地址赋值定位符*&#x2F;</span><br><span class="line">    .bss ALIGN(4) : &#123;*(.bss)*(COMMON)&#125;  &#x2F;*定义bss段*&#x2F;</span><br><span class="line">    __bss_end &#x3D; .;                                      &#x2F;*bss段的结束地址赋值定位符*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ul><li>汇编初始化c语言环境<ul><li>配置模式</li><li>配置sp指针</li><li>配置跳转函数</li></ul></li><li>h文件定义需要操作的寄存器<ul><li>CCM寄存器</li><li>IOMUX 相关寄存器</li><li>GPIO1 相关寄存器</li></ul></li><li>c文件配置寄存器以及逻辑代码<ul><li>初始化时钟</li><li>初始化led灯（GPIO的配置）</li><li>延时函数</li></ul></li><li>Makefile文件<ul><li>o文件的生成</li><li>bin文件的生成<ul><li>链接起始地址 生成.elf</li><li>.elf文件生成.bin文件</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux驱动开发笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> I.MX6U </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式Linux系统烧写</title>
      <link href="2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/MigTool%E7%83%A7%E5%86%99%E5%B7%A5%E5%85%B7%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/MigTool%E7%83%A7%E5%86%99%E5%B7%A5%E5%85%B7%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-mfgtool工具简介"><a class="markdownIt-Anchor" href="#1-mfgtool工具简介"></a> 1 MfgTool工具简介</h2><p>MfgTool 工具是 NXP 提供的专门用于给 <a href="http://I.MX">I.MX</a> 系列 CPU 烧写系统的软件，可以在 NXP 官<br />网下载到。  可以烧写uboot.imx、zlmage、dtb、rootfs。通过USB烧写。</p><p>MfgTool默认存放NXP官方的.vb烧写脚本</p><p>基本原理</p><p>先向DDR下载一个Linux系统，通过这个系统完成最终的烧写。</p><p>E:\BaiduNetdiskDownload\【正点原子】阿尔法Linux开发板（A盘）-基础资料\5、开发工具\3、NXP官方原版MFG_TOOL烧写工具\L4.1.15_2.0.0-ga_mfg-tools.tar\L4.1.15_2.0.0-ga_mfg-tools\mfgtools-with-rootfs.tar\mfgtools-with-rootfs\mfgtools\Profiles\Linux\OS Firmware下有两个文件夹</p><p>files里面保存着最终烧写到开发板中的uboot.imx、zlmage、dtb、rootfs</p><p>firemware里面保存着第一步的uboot.imx、zlmage、dtb</p><p>烧写脚本就是各种.vbs文件</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210304000828.png" alt="image-20210304000824236" /></p><p>双击打开文件</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210304002606.png" alt="image-20210304002602268" /></p><p>nxp系统烧入开发板</p><p>.vbs文件的本质 是打开mfgtool.exe程序，配合不同的参数  mfgtool2-yocto-mx-evk-emmc.vbs</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Set</span> wshShell = <span class="built_in">CreateObject</span>(<span class="string">&quot;WScript.shell&quot;</span>)</span><br><span class="line">wshShell.run <span class="string">&quot;mfgtool2.exe -c &quot;&quot;linux&quot;&quot; -l &quot;&quot;eMMC&quot;&quot; -s &quot;&quot;board=sabresd&quot;&quot; -s &quot;&quot;mmc=1&quot;&quot; -s &quot;&quot;6uluboot=14x14evk&quot;&quot; -s &quot;&quot;6uldtb=14x14-evk&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">Set</span> wshShell = <span class="literal">Nothing</span></span><br></pre></td></tr></table></figure><p>ucl2.xml文件 来判断选择烧写哪个uboot和dtb文件（根据.vbs文件的参数）</p><p>E:\BaiduNetdiskDownload\【正点原子】阿尔法Linux开发板（A盘）-基础资料\5、开发工具\3、NXP官方原版MFG_TOOL烧写工具\mfgtools\Profiles\Linux\OS Firmware\ucl2.xml</p><h2 id="3-烧写自己的系统"><a class="markdownIt-Anchor" href="#3-烧写自己的系统"></a> 3 烧写自己的系统</h2><h3 id="更改文件名"><a class="markdownIt-Anchor" href="#更改文件名"></a> 更改文件名</h3><p>将 zImage、 u-bootimx6ull14x14evk_emmc.imx 和 zImage-imx6ull-14x14-evk-emmc.dtb 这三个文件拷贝到 mfgtoolswith-rootfs/mfgtools/Profiles/Linux/OS Firmware/firmware 目录中，替换掉原来的文件</p><p>所有 4 个文件都拷贝到 mfgtools-with-rootfs/mfgtools/Profiles/Linux/OS Firmware/files目录中，这两个操作完成以后我们就可以进行烧写了。</p><p>四个文件名</p><p>zImage</p><p>u-bootimx6ull14x14evk_emmc.imx</p><p>zImage-imx6ull-14x14-evk-emmc.dtb</p><p>rootfs_nogpu.tar.bz2rootfs</p><h3 id="网络开机自启"><a class="markdownIt-Anchor" href="#网络开机自启"></a> 网络开机自启</h3><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210304015342.png" alt="image-20210304015338570" /></p><p>系统网络不能使用</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210304015407.png" alt="image-20210304015405101" /></p><p>开启后就可以使用了，ifconfig eth0 up</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210304020138.png" alt="image-20210304020136312" /></p><p>需要设置一下开机自启动</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux驱动开发笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I.MX6U </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>U-Boot图形化配置及其原理</title>
      <link href="2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/U-Boot%E5%9B%BE%E5%BD%A2%E5%8C%96%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86/"/>
      <url>2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/U-Boot%E5%9B%BE%E5%BD%A2%E5%8C%96%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>uboot可以通过 mx6ull_alientek_emmc_defconfig 来配置，或者通过文件mx6ull_alientek_emmc.h 来配置 。还可以通过图形化配置，下面从U-Boot图形化配置体验、menuconfig 图形化配置原理、添加自定义菜单三个方面来进行介绍。重点要学会使用，再学习原理，再深入学习菜单。</p><h2 id="u-boot图形化配置体验"><a class="markdownIt-Anchor" href="#u-boot图形化配置体验"></a> U-Boot图形化配置体验</h2><p>Ubuntu 中安装 ncurses 库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install libncurses5-dev</span><br></pre></td></tr></table></figure><p>使用“make xxx_defconfig”对 uboot 进行一次默认配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- distclean</span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- mx6ull_alientek_emmc_defconfig</span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig</span><br></pre></td></tr></table></figure><p>进入图形界面</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210226205456.png" alt="image-20210226205454076" /></p><ul><li>键盘上的“↑”和“↓”键来选择要配置的菜单</li><li>“Enter”键进入子菜单</li><li>在键盘上按下高亮字母对应的键可以快速选中对应的菜单</li><li>按下“Y”键就会将相应的代码编译进 Uboot 中，菜单前面变为“&lt; * &gt;”</li><li>按下“N”键不编译相应的代码，“[ ]”默认表示不编译</li><li>按下“M”键就会将相应的代码编译为模块，菜单前面变为“&lt; M &gt;”</li><li>按两下“Esc”键退出，也就是返回到上一级</li><li>按下“?”键查看此菜单的帮助信息</li><li>按下“/”键打开搜索框</li></ul><p>配置界面下有五个按钮，功能如下：</p><ul><li>&lt;Select&gt;:选中按钮，和“Enter”键的功能相同，负责选中并进入某个菜单。</li><li>&lt;Exit&gt;：退出按钮，和按两下“Esc”键功能相同，退出当前菜单，返回到上一级。</li><li>&lt;Help&gt;：帮助按钮，查看选中菜单的帮助信息。</li><li>&lt;Save&gt;：保存按钮，保存修改后的配置文件。</li><li>&lt;Load&gt;：加载按钮，加载指定的配置文件。</li></ul><p>直接在 mx6ull_alientek_emmc.h 中定义的宏，配置 不会导入到图形配置里面去，只会读取.config文件。</p><p>配置完成后，相应的.config文件会发生更改。</p><p>完成配置之后 不能再执行mx6ull_alientek_emmc.sh  脚本，因为脚本会导入默认配置。</p><p>此时应该使用下面的命令进行编译：</p><p><code>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j2</code></p><p>以dns  命令为例子，进行图形配置</p><ul><li>“Command line interface —&gt;”<ul><li>“Network commands—&gt;”<ul><li>“dns”</li></ul></li></ul></li></ul><p>选中dns，按下键盘&quot;Y&quot;，dns 前面的“[ ]”变成了“[ * ]”  ，查看.config，发现多了“CONFIG_CMD_DNS=y”这一行（323）</p><p>使用dns命令</p><p>先设置一下 dns 服务器的 IP 地址，也就是设置环境变量 dnsip的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setenv dnsip 114.114.114.114</span><br><span class="line">saveenv</span><br><span class="line"></span><br><span class="line">dns www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210227002407.png" alt="image-20210227002405354" /></p><p>这简直十分方便了，不需要自己去配置宏，直接图形配置使能一些命令。</p><h2 id="menuconfig-图形化配置原理"><a class="markdownIt-Anchor" href="#menuconfig-图形化配置原理"></a> menuconfig 图形化配置原理</h2><h3 id="make-menuconfig-过程分析"><a class="markdownIt-Anchor" href="#make-menuconfig-过程分析"></a> make menuconfig 过程分析</h3><p>输入make menuconfig  会匹配到顶层Makefile</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">%config: scripts_basic outputmakefile FORCE</span></span><br><span class="line"><span class="variable">$(Q)</span><span class="variable">$(MAKE)</span> <span class="variable">$(build)</span>=scripts/kconfig <span class="variable">$@</span></span><br></pre></td></tr></table></figure><h3 id="kconfig-语法简介"><a class="markdownIt-Anchor" href="#kconfig-语法简介"></a> Kconfig 语法简介</h3><h2 id="添加自定义菜单"><a class="markdownIt-Anchor" href="#添加自定义菜单"></a> 添加自定义菜单</h2>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux驱动开发笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I.MX6U </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>U-Boot使用和移植</title>
      <link href="2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/U-Boot%E7%A7%BB%E6%A4%8D/"/>
      <url>2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/U-Boot%E7%A7%BB%E6%A4%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[toc]</p><h2 id="u-boot使用"><a class="markdownIt-Anchor" href="#u-boot使用"></a> U-Boot使用</h2><p>适用于已经有了适配的U-Boot</p><h3 id="初次编译"><a class="markdownIt-Anchor" href="#初次编译"></a> 初次编译</h3><ul><li><p>安装ncurses库</p><p><code>sudo apt-get install libncurses5-dev</code></p><p>ncurses是提供字符终端处理库。</p></li><li><p>解压U-Boot</p><p><code>tar -vxjf uboot-imx-2016.03-2.1.0-g8b546e4.tar.bz2</code></p><ul><li>v 详细报告rar处理的文件信息</li><li>x 从压缩文件中释放文件</li><li>j 压缩/解压缩 bzip2</li><li>f 指定压缩文件的名字</li><li>-C 指定解压目录</li></ul><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210225105840.png" alt="image-20210225105837689" /></p></li><li><p>编译脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- distclean</span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- mx6ull_14x14_ddr512_emmc_defconfig</span><br><span class="line">make V=1 ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j2</span><br></pre></td></tr></table></figure><p>执行<code>bash mx6ull_alientek_emmc.sh</code></p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210225113311.png" alt="image-20210225113308956" /></p></li></ul><h3 id="烧写与启动"><a class="markdownIt-Anchor" href="#烧写与启动"></a> 烧写与启动</h3><p>使用imxdownload将uboot烧写到SD卡里面去，用SD卡进行启动uboot。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 imxdownload //给予 imxdownload 可执行权限，一次即可</span><br><span class="line">./imxdownload u-boot.bin /dev/sdd</span><br></pre></td></tr></table></figure><h3 id="u-boot命令使用"><a class="markdownIt-Anchor" href="#u-boot命令使用"></a> U-Boot命令使用</h3><h4 id="网络操作"><a class="markdownIt-Anchor" href="#网络操作"></a> 网络操作</h4><p>tftp命令</p><p>Ubuntu 搭建TFTP服务器</p><p>安装 tftp-hpa 和 tftpd-hpa</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tftp-hpa tftpd-hpa</span><br><span class="line">sudo apt-get install xinetd</span><br></pre></td></tr></table></figure><p>创建共享文件夹tftpboot 并给权限</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/Linux/tftpboot</span><br><span class="line">chmod <span class="number">777</span> ~/Linux/tftpboot</span><br></pre></td></tr></table></figure><p>新建文件/etc/xinetd.d/tftp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server tftp</span><br><span class="line">&#123;</span><br><span class="line">socket_type &#x3D; dgram</span><br><span class="line">protocol &#x3D; udp</span><br><span class="line">wait &#x3D; yes</span><br><span class="line">user &#x3D; root</span><br><span class="line">server &#x3D; &#x2F;usr&#x2F;sbin&#x2F;in.tftpd</span><br><span class="line">server_args &#x3D; -s &#x2F;home&#x2F;zuozhongkai&#x2F;linux&#x2F;tftpboot&#x2F;</span><br><span class="line">disable &#x3D; no</span><br><span class="line">per_source &#x3D; 11</span><br><span class="line">cps &#x3D; 100 2</span><br><span class="line">flags &#x3D; IPv4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 tftp 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service tftpd-hpa start</span><br></pre></td></tr></table></figure><p>修改/etc/default/tftpd-hpa 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;default&#x2F;tftpd-hpa</span><br><span class="line"></span><br><span class="line">TFTP_USERNAME&#x3D;&quot;tftp&quot;</span><br><span class="line">TFTP_DIRECTORY&#x3D;&quot;&#x2F;home&#x2F;kepler&#x2F;Linux&#x2F;tftpboot&quot;&#x2F;&#x2F;提供下载的文件夹</span><br><span class="line">TFTP_ADDRESS&#x3D;&quot;:69&quot;</span><br><span class="line">TFTP_OPTIONS&#x3D;&quot;-l -c -s&quot;</span><br></pre></td></tr></table></figure><p>重启tftp 服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service tftpd-hpa restart</span><br></pre></td></tr></table></figure><p>使用</p><p>tftp  [loadAddress] [[hostIPaddr:]bootfilename]</p><h2 id="u-boot移植"><a class="markdownIt-Anchor" href="#u-boot移植"></a> U-Boot移植</h2><p>使用nxp提供的U-Boot进行配置。</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210225115111.PNG" alt="20210225_IMG_1530" /></p><h3 id="nxp官方开发板uboot编译测试"><a class="markdownIt-Anchor" href="#nxp官方开发板uboot编译测试"></a> NXP官方开发板uboot编译测试</h3><ul><li><p>解压uboot</p><p><code>tar -vxjf uboot-imx-rel_imx_4.1.15_2.1.0_ga.tar.bz2 -C src</code></p></li><li><p>默认配置文件 尺寸 内存</p><p>mx6ull_14x14_evk_emmc_defconfig</p></li><li><p>编译NXP官方开发板对应的uboot</p><p>编写脚本 mx6ull_14x14_evk_emmc.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- distclean</span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- mx6ull_14x14_evk_emmc_defconfig</span><br><span class="line">make V=1 ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j2</span><br></pre></td></tr></table></figure><p>执行脚本</p><p><code>bash mx6ull_14x14_evk_emmc.sh</code></p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210225121341.png" alt="image-20210225121339228" /></p><p>编译后的文件目录</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210225121604.png" alt="image-20210225121602640" /></p></li><li><p>烧写验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 imxdownload //给予 imxdownload 可执行权限</span><br><span class="line">./imxdownload u-boot.bin /dev/sdg //烧写 u-boot.bin 到 SD 卡中</span><br></pre></td></tr></table></figure><p>运行情况</p><p>①、 uboot 启动正常， DRAM 识别正确， SD 卡和 EMMC 驱动正常。<br />②、 uboot 里面的 LCD 驱动默认是给 4.3 寸 480x272 分辨率的，如果使用的其他分辨率的<br />屏幕需要修改驱动。<br />③、网络不能工作，识别不出来网络信息，需要修改驱动。</p><p>需要解决的问题</p><p>①、在 uboot 中添加自己的开发板，也就是正点原子的 I.MX6ULL 开发板。<br />②、解决 LCD 驱动和网络驱动的问题。</p></li></ul><h3 id="添加自己的开发板配置"><a class="markdownIt-Anchor" href="#添加自己的开发板配置"></a> 添加自己的开发板配置</h3><h4 id="增加默认配置文件"><a class="markdownIt-Anchor" href="#增加默认配置文件"></a> 增加默认配置文件</h4><p>mx6ull_alientek_emmc_defconfig</p><h4 id="添加开发板对应的头文件"><a class="markdownIt-Anchor" href="#添加开发板对应的头文件"></a> 添加开发板对应的头文件</h4><p>cp include/configs/mx6ullevk.h include/configs/mx6ull_alientek_emmc.h</p><h4 id="添加板级文件夹"><a class="markdownIt-Anchor" href="#添加板级文件夹"></a> 添加板级文件夹</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> board/freescale/</span><br><span class="line">cp mx6ullevk/ -r mx6ull_alientek_emmc</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> mx6ull_alientek_emmc</span><br><span class="line">mv mx6ullevk.c mx6ull_alientek_emmc.c</span><br></pre></td></tr></table></figure><ul><li>修改Makefile</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (C) Copyright 2015 Freescale Semiconductor, Inc.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: GPL-2.0+</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">obj-y := mx6ull_alientek_emmc.o</span><br><span class="line"></span><br><span class="line">extra-$(CONFIG_USE_PLUGIN) := plugin.bin</span><br><span class="line">$(obj)/plugin.bin: $(obj)/plugin.o</span><br><span class="line">$(OBJCOPY) -O binary --gap-fill 0xff $&lt; <span class="variable">$@</span></span><br></pre></td></tr></table></figure><ul><li>修改imximage.cfg</li></ul><p>PLUGIN board/freescale/mx6ullevk/plugin.bin 0x00907000 改为：<br />PLUGIN board/freescale/mx6ull_alientek_emmc /plugin.bin 0x00907000</p><ul><li>修改Kconfig 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> TARGET_MX6ULL_ALIENTEK_EMMC</span><br><span class="line"></span><br><span class="line">config SYS_BOARD</span><br><span class="line">default <span class="string">&quot;mx6ull_alientek_emmc&quot;</span></span><br><span class="line"></span><br><span class="line">config SYS_VENDOR</span><br><span class="line">default <span class="string">&quot;freescale&quot;</span></span><br><span class="line"></span><br><span class="line">config SYS_SOC</span><br><span class="line">default <span class="string">&quot;mx6&quot;</span></span><br><span class="line"></span><br><span class="line">config SYS_CONFIG_NAME</span><br><span class="line">default <span class="string">&quot;mx6ull_alientek_emmc&quot;</span></span><br><span class="line"></span><br><span class="line">endif</span><br></pre></td></tr></table></figure><ul><li>修改 MAINTAINERS</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MX6ULL_ALIENTEK_EMMC BOARD</span><br><span class="line">M:Peng Fan &lt;peng.fan@nxp.com&gt;</span><br><span class="line">S:Maintained</span><br><span class="line">F:board&#x2F;freescale&#x2F;mx6ull_alientek_emmc&#x2F;</span><br><span class="line">F:include&#x2F;configs&#x2F;mx6ull_alientek_emmc.h</span><br><span class="line">F:configs&#x2F;mx6ull_alientek_emmc_defconfig</span><br></pre></td></tr></table></figure><h4 id="修改u-boot图形界面配置文件"><a class="markdownIt-Anchor" href="#修改u-boot图形界面配置文件"></a> 修改U-Boot图形界面配置文件</h4><p>修改arch/arm/cpu/armv7/mx6/Kconfig</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210225205809.png" alt="image-20210225205805691" /></p><h4 id="使用新添加的板子配置编译uboot"><a class="markdownIt-Anchor" href="#使用新添加的板子配置编译uboot"></a> 使用新添加的板子配置编译uboot</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- distclean</span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- mx6ull_alientek_emmc_defconfig</span><br><span class="line">make V=1 ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j2</span><br></pre></td></tr></table></figure><p>编译之后的信息</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210225211741.png" alt="image-20210225211738694" /></p><p>可以看到LCD驱动和网络驱动是有问题的，需要修改。</p><h4 id="lcd-驱动修改"><a class="markdownIt-Anchor" href="#lcd-驱动修改"></a> LCD 驱动修改</h4><p>重点关注：</p><p>①、 LCD 所使用的 GPIO，查看 uboot 中 LCD 的 IO 配置是否正确。<br />②、 LCD 背光引脚 GPIO 的配置。<br />③、 LCD 配置参数是否正确。</p><p>I.MX6U-ALPHA 开发板 LCD 原理图和 NXP 官方 I.MX6ULL 开发板一致 ，IO不用修改了。</p><ul><li>修改配置参数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">display_info_t</span> <span class="title">const</span> <span class="title">displays</span>[] =</span> &#123;&#123;</span><br><span class="line">.bus = MX6UL_LCDIF1_BASE_ADDR,</span><br><span class="line">.addr = <span class="number">0</span>,</span><br><span class="line">.pixfmt = <span class="number">24</span>,</span><br><span class="line">.detect = <span class="literal">NULL</span>,</span><br><span class="line">.enable= do_enable_parallel_lcd,</span><br><span class="line">.mode= &#123;</span><br><span class="line">.name= <span class="string">&quot;TFT7084&quot;</span>,</span><br><span class="line">.xres           = <span class="number">800</span>,</span><br><span class="line">.yres           = <span class="number">480</span>,</span><br><span class="line">.pixclock       = <span class="number">30030</span>,<span class="comment">/* (1/33.3)*(10^6) */</span></span><br><span class="line">.left_margin    = <span class="number">46</span>,<span class="comment">/* HBPD */</span></span><br><span class="line">.right_margin   = <span class="number">210</span>,<span class="comment">/* HFPD */</span></span><br><span class="line">.upper_margin   = <span class="number">23</span>,<span class="comment">/* VBPD */</span></span><br><span class="line">.lower_margin   = <span class="number">22</span>,<span class="comment">/* VFBD */</span></span><br><span class="line">.hsync_len      = <span class="number">1</span>,<span class="comment">/* HSPW */</span></span><br><span class="line">.vsync_len      = <span class="number">1</span>,<span class="comment">/* VSPW */</span></span><br><span class="line">.sync           = <span class="number">0</span>,</span><br><span class="line">.vmode          = FB_VMODE_NONINTERLACED</span><br><span class="line">&#125; &#125; &#125;;</span><br></pre></td></tr></table></figure><ul><li><p>更改mx6ull_alientek_emmc.h 中的 panel=TFT 7084</p></li><li><p>重新编译后 烧写到sd卡 进入uboot的信息</p></li></ul><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210225224216.png" alt="image-20210225224214051" /></p><ul><li><p>更改环境变量 uboot下输入命令（如屏幕仍然出现黑屏 修改环境变量）</p><p>setenv panel TFT7084<br />saveenv</p></li></ul><h4 id="网络驱动修改"><a class="markdownIt-Anchor" href="#网络驱动修改"></a> 网络驱动修改</h4><p>1、网络简介</p><p>I.MX6UL/ULL    内部 MAC+外部 PHY 芯片    （速度更快 内部MAC带有DMA）</p><p>三星2440、4412等   DM9000 网络芯片（外部 MAC+外部PHY  ）</p><p>I.MX6U-ALPHA 有两个网络接口ENET1 和 ENET2  都使用LAN8720A 作为 PHY 芯片</p><p>I.MX6ULL EVK 开发板使用 KSZ8081 PHY 芯片</p><p>更换PHY芯片之后，需要调整网络驱动</p><p>ENET1 网络驱动重点关注：</p><p>①、 ENET1 复位引脚初始化。SNVS_TAMPER7<br />②、 LAN8720A 的器件 ID。<br />③、 LAN8720 驱动</p><p>ENET2 网络驱动 重点关注</p><p>①、 ENET2 的复位引脚ENET2_RST 接到了I.MX6ULL 的 SNVS_TAMPER8 上。<br />②、 ENET2 所使用的 PHY 芯片器件地址为 0X1。<br />③、 LAN8720 驱动， ENET1 和 ENET2 都使用的 LAN8720，所以驱动肯定是一样的。</p><p>2、修改网络PHY地址</p><p>mx6ull_alientek_emmc.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_CMD_NET</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_CMD_PING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_CMD_DHCP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_CMD_MII</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_FEC_MXC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_MII</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_FEC_ENET_DEV1<span class="comment">/* 定义网口2 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (CONFIG_FEC_ENET_DEV == 0)<span class="comment">/* 网口1 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMX_FEC_BASEENET_BASE_ADDR</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_FEC_MXC_PHYADDR          0x0<span class="comment">/* 网口1地址 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_FEC_XCV_TYPE             RMII</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> (CONFIG_FEC_ENET_DEV == 1)<span class="comment">/* 网口2 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMX_FEC_BASEENET2_BASE_ADDR</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_FEC_MXC_PHYADDR0x1<span class="comment">/* 网口2地址 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_FEC_XCV_TYPERMII</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_ETHPRIME<span class="meta-string">&quot;FEC&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_PHYLIB</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_PHY_SMSC   <span class="comment">/* 使能LAN8720A 的驱动 SMSC 公司 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>做了三处修改</p><p>①、修改 ENET1 网络 PHY 的地址。<br />②、修改 ENET2 网络 PHY 的地址。<br />③、使能 SMSC 公司的 PHY 驱动。</p><p>3、删除 uboot 中 74LV595 的驱动代码</p><p>mx6ull_alientek_emmc.c</p><p>删除 74LV595 引脚  定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOX_SDI IMX_GPIO_NR(5, 10)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOX_STCP IMX_GPIO_NR(5, 7)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOX_SHCP IMX_GPIO_NR(5, 11)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOX_OE IMX_GPIO_NR(5, 8)</span></span><br></pre></td></tr></table></figure><p>添加网络复位引脚</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENET1_RESET IMX_GPIO_NR(5, 7)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENET2_RESET IMX_GPIO_NR(5, 8)</span></span><br></pre></td></tr></table></figure><p>删除引脚配置结构体</p><p><strong>static iomux_v3_cfg_t const iox_pads[]</strong></p><p>删除74LV595 初始化以及电平控制函数</p><p>**static void iox74lv_init(void)  **</p><p><strong>void iox74lv_set(int index)</strong></p><p>删除板子初始化函数</p><p>**int board_init(void)  **</p><p>4、添加I.MX6U-ALPHA 开发板网络复位引脚驱动</p><p><strong>mx6ull_alientek_emmc.c</strong></p><p>默认网络 IO 结构体数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 网口1 IO配置 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">iomux_v3_cfg_t</span> <span class="keyword">const</span> fec1_pads[] = &#123;</span><br><span class="line">MX6_PAD_GPIO1_IO06__ENET1_MDIO | MUX_PAD_CTRL(MDIO_PAD_CTRL),</span><br><span class="line">MX6_PAD_GPIO1_IO07__ENET1_MDC | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line">MX6_PAD_ENET1_TX_DATA0__ENET1_TDATA00 | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line">MX6_PAD_ENET1_TX_DATA1__ENET1_TDATA01 | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line">MX6_PAD_ENET1_TX_EN__ENET1_TX_EN | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line">MX6_PAD_ENET1_TX_CLK__ENET1_REF_CLK1 | MUX_PAD_CTRL(ENET_CLK_PAD_CTRL),</span><br><span class="line">MX6_PAD_ENET1_RX_DATA0__ENET1_RDATA00 | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line">MX6_PAD_ENET1_RX_DATA1__ENET1_RDATA01 | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line">MX6_PAD_ENET1_RX_ER__ENET1_RX_ER | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line">MX6_PAD_ENET1_RX_EN__ENET1_RX_EN | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//添加的IO </span></span><br><span class="line">MX6_PAD_SNVS_TAMPER7__GPIO5_IO07 | MUX_PAD_CTRL(NO_PAD_CTRL),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 网口2 IO配置 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">iomux_v3_cfg_t</span> <span class="keyword">const</span> fec2_pads[] = &#123;</span><br><span class="line">MX6_PAD_GPIO1_IO06__ENET2_MDIO | MUX_PAD_CTRL(MDIO_PAD_CTRL),</span><br><span class="line">MX6_PAD_GPIO1_IO07__ENET2_MDC | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line"></span><br><span class="line">MX6_PAD_ENET2_TX_DATA0__ENET2_TDATA00 | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line">MX6_PAD_ENET2_TX_DATA1__ENET2_TDATA01 | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line">MX6_PAD_ENET2_TX_CLK__ENET2_REF_CLK2 | MUX_PAD_CTRL(ENET_CLK_PAD_CTRL),</span><br><span class="line">MX6_PAD_ENET2_TX_EN__ENET2_TX_EN | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line"></span><br><span class="line">MX6_PAD_ENET2_RX_DATA0__ENET2_RDATA00 | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line">MX6_PAD_ENET2_RX_DATA1__ENET2_RDATA01 | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line">MX6_PAD_ENET2_RX_EN__ENET2_RX_EN | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line">MX6_PAD_ENET2_RX_ER__ENET2_RX_ER | MUX_PAD_CTRL(ENET_PAD_CTRL),</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//添加的IO </span></span><br><span class="line">MX6_PAD_SNVS_TAMPER8__GPIO5_IO08 | MUX_PAD_CTRL(NO_PAD_CTRL),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>setup_iomux_fec 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setup_iomux_fec</span><span class="params">(<span class="keyword">int</span> fec_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (fec_id == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">imx_iomux_v3_setup_multiple_pads(fec1_pads,</span><br><span class="line"> ARRAY_SIZE(fec1_pads));</span><br><span class="line"></span><br><span class="line">gpio_direction_output(ENET1_RESET, <span class="number">1</span>);</span><br><span class="line">gpio_set_value(ENET1_RESET, <span class="number">0</span>);</span><br><span class="line">mdelay(<span class="number">20</span>);</span><br><span class="line">gpio_set_value(ENET1_RESET, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">imx_iomux_v3_setup_multiple_pads(fec2_pads,</span><br><span class="line"> ARRAY_SIZE(fec2_pads));</span><br><span class="line">gpio_direction_output(ENET2_RESET, <span class="number">1</span>);</span><br><span class="line">gpio_set_value(ENET2_RESET, <span class="number">0</span>);</span><br><span class="line">mdelay(<span class="number">20</span>);</span><br><span class="line">gpio_set_value(ENET2_RESET, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、修改 drivers/net/phy/phy.c 文件中的函数 genphy_update_link</p><p>添加代码进函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_PHY_SMSC</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> lan8720_flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> bmcr_reg = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (lan8720_flag == <span class="number">0</span>) &#123;</span><br><span class="line">bmcr_reg = phy_read(phydev, MDIO_DEVAD_NONE, MII_BMCR);</span><br><span class="line">phy_write(phydev, MDIO_DEVAD_NONE, MII_BMCR, BMCR_RESET);</span><br><span class="line"><span class="keyword">while</span>(phy_read(phydev, MDIO_DEVAD_NONE, MII_BMCR) &amp; <span class="number">0X8000</span>)</span><br><span class="line">&#123;</span><br><span class="line">udelay(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">phy_write(phydev, MDIO_DEVAD_NONE, MII_BMCR, bmcr_reg);</span><br><span class="line">lan8720_flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>环境变量配置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setenv ipaddr <span class="number">192.168</span><span class="number">.0</span><span class="number">.122</span> <span class="comment">//开发板 IP 地址</span></span><br><span class="line">setenv ethaddr <span class="number">00</span>:<span class="number">04</span>:<span class="number">9f</span>:<span class="number">04</span>:d2:<span class="number">35</span> <span class="comment">//开发板网卡 MAC 地址</span></span><br><span class="line">setenv gatewayip <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> <span class="comment">//开发板默认网关</span></span><br><span class="line">setenv netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> <span class="comment">//开发板子网掩码</span></span><br><span class="line">setenv serverip <span class="number">192.168</span><span class="number">.0</span><span class="number">.108</span> <span class="comment">//服务器地址，也就是 Ubuntu 地址</span></span><br><span class="line">saveenv <span class="comment">//保存环境变量</span></span><br></pre></td></tr></table></figure><p>执行ping命令，能够成功ping到</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210226160214.png" alt="image-20210226160211357" /></p><p>但是在Linux上ping192.168.0.55，却ping不成功    ？？？？</p><p>更改CONFIG_FEC_ENET_DEV  这个宏 可以切换网口</p><h4 id="其他修改"><a class="markdownIt-Anchor" href="#其他修改"></a> 其他修改</h4><p>mx6ull_alientek_emmc.c</p><p>更改板子信息 int checkboard(void)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkboard</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_mx6ull_9x9_evk())</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Board: MX6ULL 9x9 EVK\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Board: MX6ULL KEPLER EMMC\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下载后验证</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210226162045.png" alt="image-20210226162043187" /></p><h3 id="bootcmd-和-bootargs-环境变量"><a class="markdownIt-Anchor" href="#bootcmd-和-bootargs-环境变量"></a> bootcmd 和 bootargs 环境变量</h3><p>mx6ull_alientek_emmc.h 中 的 宏CONFIG_EXTRA_ENV_SETTINGS 保存着这些环境变量的默认值</p><p>宏 CONFIG_EXTRA_ENV_SETTINGS 是个条件编译语句，使用 NAND 和 EMMC 的时候<br />宏 CONFIG_EXTRA_ENV_SETTINGS 的值是不同的。</p><h4 id="环境变量-bootcmd"><a class="markdownIt-Anchor" href="#环境变量-bootcmd"></a> 环境变量 bootcmd</h4><p>命令列表，为了启动内核</p><h4 id="环境变量-bootargs"><a class="markdownIt-Anchor" href="#环境变量-bootargs"></a> 环境变量 bootargs</h4><p>uboot提供参数给内核</p><h3 id="uboot启动linux"><a class="markdownIt-Anchor" href="#uboot启动linux"></a> uboot启动Linux</h3><h4 id="emmc启动"><a class="markdownIt-Anchor" href="#emmc启动"></a> EMMC启动</h4><p>查看EMMC里面是否有系统，Linux镜像zlmage和.dtb文件</p><ul><li><p>mmc dev 1// 切换到EMMC</p></li><li><p>fatls mmc 1:1// 查看emmc内容</p></li><li><p>fatload mmc 1:1 80800000 zImage//将zlmage加载到80800000</p></li><li><p>fatload mmc 1:1 83000000 imx6ull-14x14-emmc-7-800x480-c.dtb <a href="//xn--pet.xn--dtb83000000-z00rs94a1pb261nyk2h">//将.dtb文件加载到83000000</a></p></li><li><p>bootz 80800000 - 83000000//启动内核注意空格</p></li></ul><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210226181354.png" alt="image-20210226181352145" /></p><p>如果内核启动成功，证明uboot支持EMMC启动</p><h4 id="网络启动"><a class="markdownIt-Anchor" href="#网络启动"></a> 网络启动</h4><ul><li>tftp 80800000 zImage</li><li>tftp 83000000 imx6ull-14x14-emmc-4.3-800x480-c.dtb</li><li>bootz 80800000 - 83000000</li></ul><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210226193745.png" alt="image-20210226193742071" /></p><p>内核通过网络启动成功</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux驱动开发笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I.MX6U </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符设备驱动</title>
      <link href="2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6/"/>
      <url>2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="字符设备驱动简介"><a class="markdownIt-Anchor" href="#字符设备驱动简介"></a> 字符设备驱动简介</h2><p>Linux 应用程序对驱动程序的调用流程</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303092546.png" alt="image-20210303092544406" /></p><p>open 函数调用流程</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303092727.png" alt="image-20210303092725275" /></p><p>Linux 内核文件 include/linux/fs.h  有个 <strong>file_operations</strong>   结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">owner</span>;</span></span><br><span class="line">    <span class="keyword">loff_t</span> (*llseek) (struct file *, <span class="keyword">loff_t</span>, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*read) (struct file *, <span class="keyword">char</span> __user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*write) (struct file *, <span class="keyword">const</span> <span class="keyword">char</span> __user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*read_iter) (struct kiocb *, struct iov_iter *);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*write_iter) (struct kiocb *, struct iov_iter *);</span><br><span class="line">    <span class="keyword">int</span> (*iterate) (struct file *, struct dir_context *);</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*poll)</span> <span class="params">(struct file *, struct poll_table_struct *)</span></span>;</span><br><span class="line">    <span class="keyword">long</span> (*unlocked_ioctl) (struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line">    <span class="keyword">long</span> (*compat_ioctl) (struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line">    <span class="keyword">int</span> (*mmap) (struct file *, struct vm_area_struct *);</span><br><span class="line">    <span class="keyword">int</span> (*mremap)(struct file *, struct vm_area_struct *);</span><br><span class="line">    <span class="keyword">int</span> (*open) (struct inode *, struct file *);</span><br><span class="line">    <span class="keyword">int</span> (*flush) (struct file *, <span class="keyword">fl_owner_t</span> id);</span><br><span class="line">    <span class="keyword">int</span> (*release) (struct inode *, struct file *);</span><br><span class="line">    <span class="keyword">int</span> (*fsync) (struct file *, <span class="keyword">loff_t</span>, <span class="keyword">loff_t</span>, <span class="keyword">int</span> datasync);</span><br><span class="line">    <span class="keyword">int</span> (*aio_fsync) (struct kiocb *, <span class="keyword">int</span> datasync);</span><br><span class="line">    <span class="keyword">int</span> (*fasync) (<span class="keyword">int</span>, struct file *, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> (*lock) (struct file *, <span class="keyword">int</span>, struct file_lock *);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*sendpage) (struct file *, struct page *, <span class="keyword">int</span>, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *, <span class="keyword">int</span>);</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">long</span> <span class="params">(*get_unmapped_area)</span><span class="params">(struct file *, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> (*check_flags)(<span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> (*flock) (struct file *, <span class="keyword">int</span>, struct file_lock *);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*splice_write)(struct pipe_inode_info *, struct file *, <span class="keyword">loff_t</span> *, <span class="keyword">size_t</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">ssize_t</span> (*splice_read)(struct file *, <span class="keyword">loff_t</span> *, struct pipe_inode_info *, <span class="keyword">size_t</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> (*setlease)(struct file *, <span class="keyword">long</span>, struct file_lock **, <span class="keyword">void</span> **);</span><br><span class="line">    <span class="keyword">long</span> (*fallocate)(struct file *file, <span class="keyword">int</span> mode, <span class="keyword">loff_t</span> offset,</span><br><span class="line">                        <span class="keyword">loff_t</span> len);</span><br><span class="line">    <span class="keyword">void</span> (*show_fdinfo)(struct seq_file *m, struct file *f);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONFIG_MMU</span></span><br><span class="line">    <span class="keyword">unsigned</span> (*mmap_capabilities)(struct file *);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>字符设备驱动开发就是需要实现上面的函数。像 open、 release、 write、 read 等都是需要实现。</p><h2 id="字符设备驱动开发步骤"><a class="markdownIt-Anchor" href="#字符设备驱动开发步骤"></a> 字符设备驱动开发步骤</h2><p>只是在 Linux 驱动开发中我们需要按照其规定的框架来编写驱动，所以说学 Linux 驱动开发重点是学习其驱动框架。</p><ul><li>编译到内核</li><li>编译成模块</li></ul><p>SD卡启动 nfs挂载文件系统 tftp启动系统</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210304123912.png" alt="image-20210304123909687" /></p><p>模块加载文件夹 将驱动放入/lib/modules/4.1.15</p><p>使用modproe 第一次加载一个模块 需要depmod</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210304125104.png" alt="image-20210304125100682" /></p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210304131258.png" alt="image-20210304131255893" /></p><p>驱动加载成功、卸载成功</p><h3 id="驱动模块的加载和卸载"><a class="markdownIt-Anchor" href="#驱动模块的加载和卸载"></a> 驱动模块的加载和卸载</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module_init(xxx_init); <span class="comment">//注册模块加载函数</span></span><br><span class="line">module_exit(xxx_exit); <span class="comment">//注册模块卸载函数</span></span><br></pre></td></tr></table></figure><p>“insmod”命令加载驱动的时候， xxx_init 这个函数就会被调用</p><p>“rmmod”命令卸载具体驱动的时候，xxx_exit 函数就会被调用</p><p>字符设备驱动模块，加载和卸载函数模板</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 驱动入口函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">xxx_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 入口函数具体内容 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动出口函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">xxx_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 出口函数具体内容 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将上面两个函数指定为驱动的入口和出口函数 */</span></span><br><span class="line">module_init(xxx_init);</span><br><span class="line">module_exit(xxx_exit);</span><br></pre></td></tr></table></figure><p>驱动编译的扩展名 .ko</p><p>两种命令可以加载驱动模块： insmod和 modprobe</p><p>insmod 命令不能解决模块的依赖关系 ,modprobe 会分析模块的依赖关系 。</p><p>两种命令可以卸载驱动模块： rmmod和 modprobe  -r drv.ko</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rmmod drv.ko</span><br><span class="line">modprobe -r drv.ko</span><br></pre></td></tr></table></figure><h3 id="字符设备注册和注销"><a class="markdownIt-Anchor" href="#字符设备注册和注销"></a> 字符设备注册和注销</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">register_chrdev</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> major, <span class="keyword">const</span> <span class="keyword">char</span> *name,<span class="keyword">const</span> struct file_operations *fops)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">unregister_chrdev</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> major, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br></pre></td></tr></table></figure><p>register_chrdev 函数用于注册字符设备，此函数一共有三个参数，这三个参数的含义如下：</p><p>​major： 主设备号， Linux 下每个设备都有一个设备号，设备号分为主设备号和次设备号两<br />​部分，关于设备号后面会详细讲解。<br />​name：设备名字，指向一串字符串。<br />​fops： 结构体 file_operations 类型指针，指向设备的操作函数集合变量。</p><p>unregister_chrdev 函数用户注销字符设备，此函数有两个参数，这两个参数含义如下：<br />major： 要注销的设备对应的主设备号。<br />name： 要注销的设备对应的设备名。</p><p>示例代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">test_fops</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动入口函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">xxx_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> retvalue = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 注册字符设备驱动 */</span></span><br><span class="line">retvalue = register_chrdev(<span class="number">200</span>, <span class="string">&quot;chrtest&quot;</span>, &amp;test_fops);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(retvalue &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">/* 字符设备注册失败,自行处理 */</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 驱动出口函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">xxx_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    unregister_chrdev(<span class="number">200</span>, <span class="string">&quot;chrtest&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将上面两个函数指定为驱动的入口和出口函数 */</span></span><br><span class="line">module_init(xxx_init);</span><br><span class="line">module_exit(xxx_exit);</span><br></pre></td></tr></table></figure><p>命令<code>cat /proc/devices</code>可以查看当前已经被使用掉的设备号</p><p>向系统注册字符设备 使用register_chrdev  注销字符设备 unregister_chrdev</p><h3 id="实现设备的具体操作函数"><a class="markdownIt-Anchor" href="#实现设备的具体操作函数"></a> 实现设备的具体操作函数</h3><p>1、能够对 chrtest 进行打开和关闭操作</p><p>实现 file_operations 中的 open 和 release 这两个函数</p><p>2、对 chrtest 进行读写操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">static struct file_operations test_fops;</span><br><span class="line"></span><br><span class="line">&#x2F;* 打开设备 *&#x2F;</span><br><span class="line">static int chrtest_open(struct inode *inode, struct file *filp)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;* 用户实现具体功能 *&#x2F;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 从设备读取 *&#x2F;</span><br><span class="line">static ssize_t chrtest_read(struct file *filp, char __user *buf,</span><br><span class="line">size_t cnt, loff_t *offt)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;* 用户实现具体功能 *&#x2F;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 向设备写数据 *&#x2F;</span><br><span class="line">16 static ssize_t chrtest_write(struct file *filp,</span><br><span class="line">const char __user *buf,</span><br><span class="line">size_t cnt, loff_t *offt)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;* 用户实现具体功能 *&#x2F;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 关闭&#x2F;释放设备 *&#x2F;</span><br><span class="line">static int chrtest_release(struct inode *inode, struct file *filp)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;* 用户实现具体功能 *&#x2F;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static struct file_operations test_fops &#x3D; &#123;</span><br><span class="line">.owner &#x3D; THIS_MODULE,</span><br><span class="line">.open &#x3D; chrtest_open,</span><br><span class="line">.read &#x3D; chrtest_read,</span><br><span class="line">.write &#x3D; chrtest_write,</span><br><span class="line">.release &#x3D; chrtest_release,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;* 驱动入口函数 *&#x2F;</span><br><span class="line">static int __init xxx_init(void)</span><br><span class="line">&#123;</span><br><span class="line">    int retvalue &#x3D; 0;</span><br><span class="line">    &#x2F;* 注册字符设备驱动 *&#x2F;</span><br><span class="line">retvalue &#x3D; register_chrdev(200, &quot;chrtest&quot;, &amp;test_fops);</span><br><span class="line"></span><br><span class="line">    if(retvalue &lt; 0)&#123;</span><br><span class="line">&#x2F;* 字符设备注册失败,自行处理 *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 驱动出口函数 *&#x2F;</span><br><span class="line">static void __exit xxx_exit(void)</span><br><span class="line">&#123;</span><br><span class="line">    unregister_chrdev(200, &quot;chrtest&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 将上面两个函数指定为驱动的入口和出口函数 *&#x2F;</span><br><span class="line">module_init(xxx_init);</span><br><span class="line">module_exit(xxx_exit);</span><br></pre></td></tr></table></figure><h3 id="添加license和作者信息"><a class="markdownIt-Anchor" href="#添加license和作者信息"></a> 添加LICENSE和作者信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MODULE_LICENSE() <span class="comment">//添加模块 LICENSE 信息</span></span><br><span class="line">MODULE_AUTHOR() <span class="comment">//添加模块作者信息</span></span><br></pre></td></tr></table></figure><h2 id="linux设备号"><a class="markdownIt-Anchor" href="#linux设备号"></a> Linux设备号</h2><p>32位 主设备号12位 次设备号20位</p><p>设备号的操作或者宏</p><p>从dev_t获取主设备号和次设备号，MAJOR(dev_t)</p><h2 id="应用程序编写"><a class="markdownIt-Anchor" href="#应用程序编写"></a> 应用程序编写</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio,h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *filename;</span><br><span class="line">    filename = argv[<span class="number">1</span>];</span><br><span class="line">    fd = open(filename,o_ROWR);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Can&#x27;t open file %s\r\n&quot;</span>,filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ret = read(fd,readbuf,<span class="number">50</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;read file file&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ret = write(fd,writebuf,<span class="number">50</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ret = close(fd);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;close file falied \r\n&quot;</span>,filename);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><p>1、加载驱动</p><p>2、进入/dev查看设备文件，chrdevbase。/dev/chrdevbase。但是实际没有，因为我们没有创建设备节点文件。</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210304214332.png" alt="image-20210304214329308" /></p><p>查询设备节点</p><p>mknod /dev/chrdevbase c 200 0</p><p>3、测试</p><p>运行APP文件</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210304221446.png" alt="image-20210304221443965" /></p><h2 id="chrdevbase字符设备驱动开发实验"><a class="markdownIt-Anchor" href="#chrdevbase字符设备驱动开发实验"></a> chrdevbase字符设备驱动开发实验</h2><p>应用程序可以对驱动读写操作，读就是从驱动里面读取字符串，写的话就是应用向驱动写字符串。</p><p>1、chrdevbase_read驱动函数的编写</p><p>copy_to_user(buf,readbuf,count);</p><p>memcpy(readbuf,kerneldata,sizeof(kerneldata));</p><p>2、chrdevbase_write驱动函数的编写</p><p>copy_form_user(writebuf,buf,count);</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux驱动开发笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I.MX6U </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根文件系统构建</title>
      <link href="2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9E%84%E5%BB%BA/"/>
      <url>2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-根文件系统简介"><a class="markdownIt-Anchor" href="#1-根文件系统简介"></a> 1 根文件系统简介</h2><p>根文件系统首先是内核启动时所 mount(挂载)的第一个文件系统，内核代码映像文件保存在<br />根文件系统中，而系统引导启动程序会在根文件系统挂载之后从中把一些基本的初始化脚本和<br />服务等加载到内存中去运行。</p><p>嵌入式 Linux 并没有将内核代码镜像保存在根文件系统，保存在了NAND Flash 的指定存储地址或者EMMC 专用分区 。</p><p>这个笔记提供Linux 运行的最小根文件系统，里面包含一些常用的Linux命令。后续可以根据实际工作需求进行添加。</p><p>Ubuntu根文件系统</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210302231948.png" alt="image-20210302231943970" /></p><p>讲解常用的子目录：</p><p>1、/bin 目录</p><p>存放一些可执行文件。所有的账户都可以使用。</p><p>2、/dev 目录</p><p>此目录下的文件都是和设备有关的，此目录下的文件都是设备文件。  硬件设备也是以文件的形式存在。</p><p>例如操作串口的文件：/dev/ttymxc0</p><p>3、/etc 目录</p><p>此目录下存放着各种配置文件，大家可以进入 Ubuntu 的 etc 目录看一下，里面的配置文件非常多！</p><p>4、/lib 目录</p><p>此目录下存放着 Linux 所必须的库文件。这些库文件是共享库，命令和用户编写的应用程序要使用这些库文件。</p><p>5、/mnt 目录</p><p>临时挂载目录，一般是空目录，可以在此目录下创建空的子目录，比如/mnt/sd、 /mnt/usb，这样就可以将 SD 卡或者 U 盘挂载到/mnt/sd 或者/mnt/usb 目录中。</p><p>6、 /proc 目录</p><p>此目录一般是空的，当 Linux 系统启动以后会将此目录作为 proc 文件系统的挂载点， proc是个虚拟文件系统，没有实际的存储设备。 proc 里面的文件都是临时存在的，一般用来存储系统运行信息文件。</p><p>7、 /usr 目录</p><p>Unix Software Resource 的缩写，也就是 Unix 操作系统软件资源目录。  既然是软件资源目录，因此/usr 目录下也存放着很多软件，一般系统安装完成以后此目录占用的空间最多。</p><p>8、 /var 目录</p><p>此目录存放一些可以改变的数据</p><p>9、 /sbin 目录</p><p>此目录页用户存放一些可执行文件，但是此目录下的文件或者说命令只有管理员才能使用，主要用户系统管理。</p><p>10、 /sys 目录</p><p>系统启动以后此目录作为 sysfs 文件系统的挂载点， sysfs 是一个类似于 proc 文件系统的特殊文件系统， sysfs 也是基于 ram 的文件系统，也就是说它也没有实际的存储设备。此目录是系统设备管理的重要目录，此目录通过一定的组织结构向用户提供详细的内核数据结构信息。</p><p>11、 /opt</p><p>可选的文件、软件存放区，由用户选择将哪些文件或软件放到此目录中。</p><h2 id="2-busybox-构建根文件系统"><a class="markdownIt-Anchor" href="#2-busybox-构建根文件系统"></a> 2 BusyBox 构建根文件系统</h2><h3 id="21-busybox-简介"><a class="markdownIt-Anchor" href="#21-busybox-简介"></a> 2.1 BusyBox 简介</h3><p>BusyBox 是一个集成了大量的 Linux 命令和工具的软件，像 ls、 mv、 ifconfig 等命令 BusyBox 都会提供。 BusyBox 就是一个大的工具箱，这个工具箱里面集成了 Linux 的许多工具和命令。一般下载 BusyBox 的<strong>源码</strong>，<br />然后配置 BusyBox，选择自己想要的功能，最后编译即可。</p><p><a href="https://busybox.net/">官网地址</a></p><p>使用1.29.0 版本的 BusyBox</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210302233205.png" alt="image-20210302233201795" /></p><h3 id="22-编译-busybox-构建根文件系统"><a class="markdownIt-Anchor" href="#22-编译-busybox-构建根文件系统"></a> 2.2 编译 BusyBox 构建根文件系统</h3><p>Linux驱动开发都是通过，nfs挂载根文件系统，最终才会烧写到EMMC中。</p><p>需要在nfs文件夹下添加文件夹</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210302234120.png" alt="image-20210302234117124" /></p><p>1、修改Makefile 添加编译器</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210302234638.png" alt="image-20210302234635045" /></p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210302234714.png" alt="image-20210302234710650" /></p><p>2、busybox 中文字符支持</p><p>修改busybox-1.29.0/libbb/printable_string.c  中的 函数 printable_string</p><p>第 31 和 32 行，当字符大于 0X7F 以后就跳出去了。<br />第 45 和 46 行，如果支持 UNICODE 码的话，当字符大于 0X7F 就直接输出‘?’</p><p>修改两处的代码为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">33 &#x2F;* if (c &gt;&#x3D; 0x7f)</span><br><span class="line">34 break; *&#x2F;</span><br><span class="line"></span><br><span class="line">48 &#x2F;* if (c &lt; &#39; &#39; || c &gt;&#x3D; 0x7f) *&#x2F;</span><br><span class="line">49 if( c &lt; &#39; &#39;)</span><br></pre></td></tr></table></figure><p>修改busybox-1.29.0/libbb/unicode.c</p><p>第 1022 行，当字符大于 0X7F 以后， *d++就为‘?’。<br />第 1030 和 1031 行，当字符大于 0X7F 以后， *d 也为‘?’</p><p>修改以上两处</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"><span class="number">1022</span> <span class="comment">/* 修改下面一行代码 */</span></span><br><span class="line"><span class="number">1023</span> <span class="comment">/* *d++ = (c &gt;= &#x27; &#x27; &amp;&amp; c &lt; 0x7f) ? c : &#x27;?&#x27;; */</span></span><br><span class="line"><span class="number">1024</span> *d++ = (c &gt;= <span class="string">&#x27; &#x27;</span>) ? c : <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">……</span><br><span class="line"><span class="number">1032</span> <span class="comment">/* 修改下面一行代码 */</span></span><br><span class="line"><span class="number">1033</span> <span class="comment">/* if (c &lt; &#x27; &#x27; || c &gt;= 0x7f) */</span></span><br><span class="line"><span class="number">1034</span> <span class="keyword">if</span>(c &lt; <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303000642.png" alt="image-20210303000640368" /></p><p>最后需要配置使能unicode 码</p><p>3、配置 busybox</p><p>三种配置</p><p>①、 defconfig，缺省配置，也就是默认配置选项。<br />②、 allyesconfig，全选配置，也就是选中 busybox 的所有功能。</p><p>③、 allnoconfig，最小配置。</p><p>一般使用默认配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make defconfig</span><br><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><p>配置路径</p><p>Location:<br />-&gt; Settings<br />-&gt; Build static binary (no shared libs)</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303001151.png" alt="image-20210303001149254" /></p><p>不要配置 “Build static binary (no shared libs)”   不编译这个。</p><p>配置</p><p>Location:<br />-&gt; Settings<br />-&gt; vi-style line editing commands</p><p>编译此项</p><p>配置</p><p>Location:<br />-&gt; Linux Module Utilities<br />-&gt; Simplified modutils</p><p>取消配置此项</p><p>配置</p><p>Location:<br />-&gt; Linux System Utilities<br />-&gt; mdev (16 kb) //确保下面的全部选中，默认都是选中的</p><p>使能配置 使能unicode 编码以支持中文</p><p>Location:<br />-&gt; Settings</p><p>​-&gt; Support Unicode// 选中</p><p>​-&gt; Check $LC_ALL, $LC_CTYPE and $LANG environment variables // 选中</p><p>编译busybox</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install CONFIG_PREFIX=/home/kepler/Linux/nfs/rootfs</span><br></pre></td></tr></table></figure><p>rootfs 目录下有 bin、 sbin 和 usr 这三个目录，以及 linuxrc 这个文件。</p><h3 id="23-向rootfs的lib目录添加库文件"><a class="markdownIt-Anchor" href="#23-向rootfs的lib目录添加库文件"></a> 2.3 向rootfs的&quot;/lib&quot;目录添加库文件</h3><p>1、向 rootfs 的“/lib”目录添加库文件</p><p>拷贝/usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/arm-linuxgnueabihf/libc/lib   的文件到 rootfs/lib</p><p><code>cp *so* *.a /home/kepler/Linux/nfs/rootfs/lib/ -d</code></p><p>再拷贝</p><p>/usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/arm-linux-gnueabihf/lib   的文件</p><p><code>cp *so* *.a /home/kepler/Linux/nfs/rootfs/lib/ -d</code></p><p>2、向 rootfs 的“usr/lib”目录添加库文件</p><p>拷贝/usr/local/arm/gcc-linaro-4.9.4-2017.01-x86_64_arm-linux-gnueabihf/arm-linux-gnueabihf/libc/<br />usr/lib</p><p><code>cp *so* *.a /home/kepler/Linux/nfs/rootfs/usr/lib/ -d</code></p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303012514.png" alt="image-20210303012512486" /></p><p>查看两个目录的大小</p><h3 id="24-创建其他文件夹"><a class="markdownIt-Anchor" href="#24-创建其他文件夹"></a> 2.4 创建其他文件夹</h3><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303012649.png" alt="image-20210303012647700" /></p><h2 id="3-根文件系统的测试"><a class="markdownIt-Anchor" href="#3-根文件系统的测试"></a> 3 根文件系统的测试</h2><p>使用NFS挂载</p><p>重新设置 bootargs 环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenv bootargs <span class="string">&#x27;console=ttymxc0,115200 root=/dev/nfs nfsroot=192.168.0.102:/home/kepler/Linux/nfs/rootfs,proto=tcp rw ip=192.168.0.55:192.168.0.102:192.168.0.1:255.255.255.0::eth0:off&#x27;</span> //设置 bootargs</span><br><span class="line">saveenv //保存环境变量</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303221026.png" alt="image-20210303221022606" /></p><p>测试成功，但是显示没有rcS文件</p><h2 id="4-完善根文件系统"><a class="markdownIt-Anchor" href="#4-完善根文件系统"></a> 4 完善根文件系统</h2><ul><li>创建/etc/init.d/rcS 文件</li></ul><p>rcS中，规定内核启动后启动哪些服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin:<span class="variable">$PATH</span></span><br><span class="line">LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/lib:/usr/lib</span><br><span class="line"><span class="built_in">export</span> PATH LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line">mount -a<span class="comment"># 自动挂载</span></span><br><span class="line">mkdir /dev/pts</span><br><span class="line">mount -t devpts devpts /dev/pts</span><br><span class="line"><span class="built_in">echo</span> /sbin/mdev &gt; /proc/sys/kernel/hotplug</span><br><span class="line">mdev -s</span><br></pre></td></tr></table></figure><p>在开发板的根文件系统中创建上面的文件，reboot重启开发板</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303223811.png" alt="image-20210303223808325" /></p><p>显示没有etc/fstab 文件</p><ul><li>创建/etc/fstab 文件   自动挂载文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#&lt;file system&gt; &lt;mount point&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;</span><br><span class="line">proc    &#x2F;proc         proc   defaults   0  0</span><br><span class="line">tmpfs    &#x2F;tmp  tmpfs  defaults   0     0</span><br><span class="line">sysfs    &#x2F;sys      sysfs defaults   0  0</span><br></pre></td></tr></table></figure><p>重启一下开发板</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303224950.png" alt="image-20210303224947451" /></p><p>无错误提示了</p><ul><li>创建/etc/inittab 文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#etc&#x2F;inittab</span><br><span class="line">::sysinit:&#x2F;etc&#x2F;init.d&#x2F;rcS</span><br><span class="line">console::askfirst:-&#x2F;bin&#x2F;sh</span><br><span class="line">::restart:&#x2F;sbin&#x2F;init</span><br><span class="line">::ctrlaltdel:&#x2F;sbin&#x2F;reboot</span><br><span class="line">::shutdown:&#x2F;bin&#x2F;umount -a -r</span><br><span class="line">::shutdown:&#x2F;sbin&#x2F;swapoff -a</span><br></pre></td></tr></table></figure><ol start="2"><li>系统启动以后运行/etc/init.d/rcS 这个脚本文件。</li><li>将 console 作为控制台终端，也就是 ttymxc0。</li><li>重启的话运行/sbin/init。</li><li>按下 ctrl+alt+del 组合键的话就运行/sbin/reboot，看来 ctrl+alt+del 组合键用于重<br />启系统。</li><li>关机的时候执行/bin/umount，也就是卸载各个文件系统。</li><li>关机的时候执行/sbin/swapoff，也就是关闭交换分区。</li></ol><p>重启开发板</p><h2 id="5-根文件系统其他测试"><a class="markdownIt-Anchor" href="#5-根文件系统其他测试"></a> 5 根文件系统其他测试</h2><h3 id="51-软件运行"><a class="markdownIt-Anchor" href="#51-软件运行"></a> 5.1 软件运行</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello word&quot;</span>);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303231109.png" alt="image-20210303231106328" /></p><p>用交叉编译器编译之后，只能在开发板执行，Ubuntu下不能执行</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303233257.png" alt="image-20210303233255277" /></p><p>开发板成功执行</p><p>ps看进程</p><p>./hello &amp; 后台执行</p><p>kill -9 PID 杀死进程</p><h3 id="52-中文字符测试"><a class="markdownIt-Anchor" href="#52-中文字符测试"></a> 5.2 中文字符测试</h3><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303233903.png" alt="image-20210303233901450" /></p><h3 id="53-开机启动测试"><a class="markdownIt-Anchor" href="#53-开机启动测试"></a> 5.3 开机启动测试</h3><p>将hello加入 /etc/init.d/rcS 文件</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303234351.png" alt="image-20210303234348549" /></p><h3 id="54-外网连接测试"><a class="markdownIt-Anchor" href="#54-外网连接测试"></a> 5.4 外网连接测试</h3><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303234529.png" alt="image-20210303234526883" /></p><p>显示错误，需要解析这个域名</p><p>新建文件/etc/resolv.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 192.168.0.1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210303234850.png" alt="image-20210303234847815" /></p><p>可以访问到外网</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux驱动开发笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I.MX6U </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c高级编程笔记</title>
      <link href="2020/01/01/C_Notes/Note_1/"/>
      <url>2020/01/01/C_Notes/Note_1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="day1"><a class="markdownIt-Anchor" href="#day1"></a> Day1</h1><p>几个头文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;标准输入输出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;对字符串处理 strcat strstr strcmp strcpy</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;malloc free</span></span></span><br></pre></td></tr></table></figure><p>数据类型：</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210218173410.png" alt="数据类型" /></p><h2 id="typedef使用"><a class="markdownIt-Anchor" href="#typedef使用"></a> typedef使用</h2><ol><li><p>起别名 简化关键字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// struct Person</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     char name[64];</span></span><br><span class="line"><span class="comment">//     int age;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// typedef struct Person my_person;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;my_person;</span><br></pre></td></tr></table></figure></li><li><p>区分数据类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">char</span>* PCHAR;</span><br><span class="line">    PCHAR p1,p2;    <span class="comment">/* char *p1,*p2 */</span></span><br><span class="line">    <span class="keyword">char</span>* p3,p4;    <span class="comment">/* p3类型为char* p4类型为char */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提高代码的移植性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> MYINT;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*  */</span></span><br><span class="line">    MYINT a = <span class="number">10</span>;</span><br><span class="line">    MYINT b = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="void使用"><a class="markdownIt-Anchor" href="#void使用"></a> void使用</h2><ol><li>不可以用void 创建变量  ，无法给类型变量分配内存</li><li>用途 限定函数返回值 函数参数</li><li>void* 万能指针 可以不通过强制类型转换就转换成其他类型的指针</li></ol><h2 id="sizeof用法"><a class="markdownIt-Anchor" href="#sizeof用法"></a> sizeof用法</h2><ol><li>本质：不是一个函数，是一个操作符</li><li>返回值类型 unsigne int 无符号类型</li><li>用途：可以统计数组的长度</li></ol><h2 id="变量的修改方式"><a class="markdownIt-Anchor" href="#变量的修改方式"></a> 变量的修改方式</h2><p>本质 一段连续内存空间的别名</p><p>程序通过变脸来申请和命名内存空间</p><p>通过变量名来访问内存空间</p><p>不是向变量名读写数据，而是向变量所代表的内存空间中读写数据</p><ol><li>直接修改</li><li>间接修改</li><li>对自定义数据类型做练习 地址偏移</li></ol><h2 id="内存分区"><a class="markdownIt-Anchor" href="#内存分区"></a> 内存分区</h2><p>运行之前</p><p>1）预处理：宏定义展开、头文件展开、条件编译、不会检查语法</p><p>2）编译：检查语法，将预处理后文件编译生成汇编文件</p><p>3）汇编：将汇编文件生成目标文件（二进制文件）</p><p>4）链接：将目标文件，链接为可执行程序</p><p>在Linux系统下，使用size命令可以查看可执行二进制文件各个区域的使用情况。</p><p><code>size test</code></p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210218225623.png" alt="image-20210218225619813" /></p><p>可执行程序内部分好3段信息，分为代码区（test）、数据区（data）和未初始化数据区（bss）3个部分（有人将data和bss合起来叫做静态区或者全局区）</p><h3 id="代码区test段"><a class="markdownIt-Anchor" href="#代码区test段"></a> 代码区（test段）</h3><p>代码共享（可供频繁执行） 只读（防止意外修改）</p><h3 id="全局初始化数据区静态数据区data段"><a class="markdownIt-Anchor" href="#全局初始化数据区静态数据区data段"></a> 全局初始化数据区/静态数据区（data段）</h3><p>已经初始化的全局变量、静态变量和常量数据（如字符串常量）</p><h3 id="未初始化数据区bss段"><a class="markdownIt-Anchor" href="#未初始化数据区bss段"></a> 未初始化数据区（bss段）</h3><p>未初始化的全局变量和静态变量。未初始化数据区的数据在开始执行之前被内核初始化为0，或者空（NULL）</p><hr /><p>代码在被编译后，分为两个段：程序指令（代码区）和程序数据（数据区）。test段属于程序指令，data段和bss段属于程序数据。</p><hr /><p>运行之后</p><p>增加了栈区和堆区</p><h3 id="栈区stack"><a class="markdownIt-Anchor" href="#栈区stack"></a> 栈区（stack）</h3><p>先进后出的内存结构，由编译器自动分配，存放函数的参数值、返回值、局部变量。在程序运行中实时加载和释放，因此，局部变量的生存周期为申请到释放到栈区。</p><h3 id="堆区heap"><a class="markdownIt-Anchor" href="#堆区heap"></a> 堆区（heap）</h3><p>堆是一个大容器，容量大于栈的空间，没有先进后出的顺序。用于动态分配内存。堆区位于BSS区和栈区。一般由程序员分配和释放，如果程序员不释放，在程序结束时释放</p><ol><li><p>运行前</p><ol><li>代码区共享 只读</li><li>数据区    存放数据：全局变量、静态变量、常量<ol><li>已初始化数据区data</li><li>未初始化数据区    bss</li></ol></li></ol></li><li><p>运行后</p><ol><li><p>栈区</p><p>符合后进后出的数据结构，编译器自动分配释放，有限容量</p></li><li><p>堆区</p><p>容量大于栈区，不是无限的。手动开辟malloc，手动释放free</p></li></ol></li></ol><h2 id="栈区"><a class="markdownIt-Anchor" href="#栈区"></a> 栈区</h2><ol><li>符合先进后出的数据结构</li><li>注意事项：不要返回局部变量的地址，局部变量在函数执行结束之后就被释放了，释放的内存就无法操作的了。</li></ol><h2 id="堆区"><a class="markdownIt-Anchor" href="#堆区"></a> 堆区</h2><ol><li><p>手动开辟，手动释放</p></li><li><p>给指针进行开辟内存的时候，传入函数中不要用等级的指针，需要传入指针的地址，函数中接受这个地址后再开辟内存。</p></li></ol><h2 id="static和extern的区别"><a class="markdownIt-Anchor" href="#static和extern的区别"></a> static和extern的区别</h2><ol><li><p>特点：程序运行前分配内存，程序运行结束 声明周期结束 在本文件中将中都可以使用静态变量</p></li><li><p>extern可以提高变量的作用域</p></li></ol><h2 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 常量</h2><ol><li><p>const 修饰的变量</p><ol><li><p>全局变量</p><p>直接修改失败，间接修改语法通过，运行失败，受到常量区保护</p></li><li><p>局部变量</p><p>直接修改失败，间接修改成功 放在栈上</p></li></ol></li><li><p>字符串常量</p><ol><li>vs将多个相同的字符串常量看成一个</li><li>不可以修饰字符串常量</li><li>ANSI并没有给出字符串是否可以修改的标准，不同编译器有不同的结果</li></ol></li></ol><h1 id="day2"><a class="markdownIt-Anchor" href="#day2"></a> Day2</h1><h2 id="宏函数和普通函数调用类型"><a class="markdownIt-Anchor" href="#宏函数和普通函数调用类型"></a> 宏函数和普通函数调用类型</h2><ul><li>宏函数<ul><li>#define MYADD(x,y)((x)+(y))</li><li>将频繁短小的函数 写成宏函数</li><li>优点 以空间换时间</li><li>普通函数有出栈、入栈</li></ul></li><li>函数调用流程<ul><li>局部变量、函数形参、函数返回地址 入栈和出栈</li></ul></li><li>调用惯例<ul><li>主调函数和被调函数必须要有一致约定，才能正确调用。</li><li>调用惯例 包括内容：出栈方 参数传递顺序 函数名称修饰</li><li>c/c++ 默认惯例 cdecl 从右到左，主调函数管理出栈</li></ul></li></ul><h2 id="空指针和野指针"><a class="markdownIt-Anchor" href="#空指针和野指针"></a> 空指针和野指针</h2><ul><li>空指针<ul><li>不能向NULL或者非法内存拷贝数据</li></ul></li><li>野指针<ul><li>指针变量未初始化</li><li>指针释放后未置空</li><li>指针操作超越变量作用域</li></ul></li><li>空指针可以被重复释放、也指针不能被重复释放</li></ul><h2 id="指针的步长"><a class="markdownIt-Anchor" href="#指针的步长"></a> 指针的步长</h2><ul><li><p>+1之后跳跃的字节数</p></li><li><p>解引用 解出的字节数</p></li><li><p>自定义结构体做步长练习</p><ul><li>通过offsetof（结构体，属性）找到对应的偏移量</li><li>offsetof引入头文件 #include  &lt;stddef.h&gt;</li></ul></li></ul><h2 id="指针的意义_间接赋值"><a class="markdownIt-Anchor" href="#指针的意义_间接赋值"></a> 指针的意义_间接赋值</h2><p>三大条件</p><ul><li>两个变量</li><li>建立关系</li><li>通过 *操作指针指向的内存</li></ul><h2 id="指针做函数参数的输入输出特性"><a class="markdownIt-Anchor" href="#指针做函数参数的输入输出特性"></a> 指针做函数参数的输入输出特性</h2><ul><li><p>输入特性</p><ul><li>在主调函数中分配内存，被调函数中使用</li></ul></li><li><p>输出特性</p><ul><li>在被调函数中分配内存，主调函数使用</li></ul></li></ul><h2 id="字符串强化训练"><a class="markdownIt-Anchor" href="#字符串强化训练"></a> 字符串强化训练</h2><ul><li><p>字符串结束标志 \0</p></li><li><p>sizeof和strlen</p></li><li><p>拷贝字符串 三种方式</p><ul><li>利用[]  注意添加\0</li><li>利用指针</li><li>while(*dest++ = *src++)    ？？</li></ul></li><li><p>翻转字符串</p><ul><li><p>利用[]</p></li><li><p>利用指针</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串翻转</span></span><br><span class="line"><span class="comment">// 1. 利用[]进行字符串翻转</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverseString_01</span><span class="params">(<span class="keyword">char</span> *str1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> len = <span class="built_in">strlen</span>(str1);</span><br><span class="line">    <span class="keyword">size_t</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">size_t</span> end = len <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (start &lt; end )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> temp = str[start];</span><br><span class="line">        str[start] = str[end];</span><br><span class="line">        str[end] = temp;</span><br><span class="line">        start++;</span><br><span class="line">        end--;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 利用指针 进行管理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverseString_02</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">char</span> *start = str;</span><br><span class="line">    <span class="keyword">char</span> *end = start + len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start &lt; end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> temp = *start;</span><br><span class="line">        *start = *end;</span><br><span class="line">        *end = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="sprintf使用"><a class="markdownIt-Anchor" href="#sprintf使用"></a> sprintf使用</h2><ul><li>格式化字符串 拼接字符串 数字转字符串</li><li>sprintf（目标字符串，格式化内容，占位参数）</li><li>返回值 有效字符串长度</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 格式化字符串</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;你好,%s,欢迎加入我们!&quot;</span>, <span class="string">&quot;John&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>,buf);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;我今年%d岁了!&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>, buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 拼接字符串</span></span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"><span class="keyword">char</span> str1[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> str2[] = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">sprintf</span>(buf,<span class="string">&quot;%s %s&quot;</span>,str1,str2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s len:%d\n&quot;</span>, buf,len);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 数字转字符串</span></span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;%d&quot;</span>, num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>, buf);</span><br><span class="line"><span class="comment">//设置宽度 右对齐</span></span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;%8d&quot;</span>, num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>, buf);</span><br><span class="line"><span class="comment">//设置宽度 左对齐</span></span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;%-8d&quot;</span>, num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>, buf);</span><br><span class="line"><span class="comment">//转成16进制字符串 小写</span></span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;0x%x&quot;</span>, num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>, buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">//转成8进制字符串</span></span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">&quot;0%o&quot;</span>, num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>, buf);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="day3"><a class="markdownIt-Anchor" href="#day3"></a> Day3</h1><h2 id="calloc和realloc"><a class="markdownIt-Anchor" href="#calloc和realloc"></a> calloc和realloc</h2><ul><li>calloc和malloc都是在堆区分配内存</li><li>与malloc不同的是，calloc将空间初始化为0</li><li>calloc（个数，大小）</li><li>realloc 重新分配内存<ul><li>如果重新分配内存比原来大，不会初始化新空间为0</li><li>先看后续空间，如果足够，那么直接扩展</li><li>如果后续空闲空间不足，那么申请足够大的空间，将原有数据拷贝到新空间，释放掉原来的空间，将新空间的首地址返回。</li></ul></li></ul><h2 id="sscanf-使用"><a class="markdownIt-Anchor" href="#sscanf-使用"></a> sscanf 使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sscanf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line">功能：</span><br><span class="line">    从str指定的字符串读取数据，并根据参数format字符串来转换并格式化数据。</span><br><span class="line">参数：</span><br><span class="line">str：指定的字符串首地址</span><br><span class="line">format：字符串格式，用法和<span class="built_in">scanf</span>()一样</span><br><span class="line">返回值：</span><br><span class="line">成功：成功则返回参数数目，失败则返回<span class="number">-1</span></span><br><span class="line">失败： - <span class="number">1</span></span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 跳过数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//跳过前面的数字</span></span><br><span class="line"><span class="comment">//匹配第一个字符是否是数字，如果是，则跳过</span></span><br><span class="line"><span class="comment">//如果不是则停止匹配</span></span><br><span class="line"><span class="built_in">sscanf</span>(<span class="string">&quot;123456aaaa&quot;</span>, <span class="string">&quot;%*d%s&quot;</span>, buf); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>,buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 读取指定宽度数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//跳过前面的数字</span></span><br><span class="line"><span class="built_in">sscanf</span>(<span class="string">&quot;123456aaaa&quot;</span>, <span class="string">&quot;%7s&quot;</span>, buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 匹配a-z中任意字符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//跳过前面的数字</span></span><br><span class="line"><span class="comment">//先匹配第一个字符，判断字符是否是a-z中的字符，如果是匹配</span></span><br><span class="line"><span class="comment">//如果不是停止匹配</span></span><br><span class="line"><span class="built_in">sscanf</span>(<span class="string">&quot;abcdefg123456&quot;</span>, <span class="string">&quot;%[a-z]&quot;</span>, buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 匹配aBc中的任何一个</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//跳过前面的数字</span></span><br><span class="line"><span class="comment">//先匹配第一个字符是否是aBc中的一个，如果是，则匹配，如果不是则停止匹配</span></span><br><span class="line"><span class="built_in">sscanf</span>(<span class="string">&quot;abcdefg123456&quot;</span>, <span class="string">&quot;%[aBc]&quot;</span>, buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 匹配非a的任意字符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//跳过前面的数字</span></span><br><span class="line"><span class="comment">//先匹配第一个字符是否是aBc中的一个，如果是，则匹配，如果不是则停止匹配</span></span><br><span class="line"><span class="built_in">sscanf</span>(<span class="string">&quot;bcdefag123456&quot;</span>, <span class="string">&quot;%[^a]&quot;</span>, buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6. 匹配非a-z中的任意字符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//跳过前面的数字</span></span><br><span class="line"><span class="comment">//先匹配第一个字符是否是aBc中的一个，如果是，则匹配，如果不是则停止匹配</span></span><br><span class="line"><span class="built_in">sscanf</span>(<span class="string">&quot;123456ABCDbcdefag&quot;</span>, <span class="string">&quot;%[^a-z]&quot;</span>, buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>格式</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>%*s或 *d</td><td>跳过数据</td></tr><tr><td>%[width]s</td><td>读指定宽度的数据</td></tr><tr><td>%[a-z]</td><td>匹配a到z中任意字符(尽可能多的匹配)</td></tr><tr><td>%[aBc]</td><td>匹配a、B、c中一员，贪婪性</td></tr><tr><td>%[^a]</td><td>匹配非a的任意字符，贪婪性</td></tr><tr><td>%[^a-z ]</td><td>表示读取除a-z以外的所有字符</td></tr></tbody></table><h2 id="查找子串"><a class="markdownIt-Anchor" href="#查找子串"></a> 查找子串</h2><h2 id="指针的易错点"><a class="markdownIt-Anchor" href="#指针的易错点"></a> 指针的易错点</h2><ul><li><p>越界</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">3</span>] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;buf:%s\n&quot;</span>,buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指针叠加会不断改变指针的指向</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">50</span>);</span><br><span class="line"><span class="keyword">char</span> buf[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span>(buf);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">*p = buf[i];</span><br><span class="line">p++; <span class="comment">//修改原指针指向</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回局部变脸地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">get_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[] = <span class="string">&quot;abcdedsgads&quot;</span>; <span class="comment">//栈区，</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[get_str]str = %s\n&quot;</span>, str);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同一块内存释放多次（不可以释放野指针）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">50</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(p, <span class="string">&quot;abcdef&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//free()函数的功能只是告诉系统 p 指向的内存可以回收了</span></span><br><span class="line"><span class="comment">// 就是说，p 指向的内存使用权交还给系统</span></span><br><span class="line"><span class="comment">//但是，p的值还是原来的值(野指针)，p还是指向原来的内存</span></span><br><span class="line"><span class="built_in">free</span>(p); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="const使用"><a class="markdownIt-Anchor" href="#const使用"></a> const使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//const修饰变量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1. const基本概念</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//i = 100; //错误，只读变量初始化之后不能修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 定义const变量最好初始化</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> j;</span><br><span class="line"><span class="comment">//j = 100; //错误，不能再次赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. c语言的const是一个只读变量，并不是一个常量，可通过指针间接修改</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> k = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//k = 100; //错误，不可直接修改，我们可通过指针间接修改</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;k:%d\n&quot;</span>, k);</span><br><span class="line"><span class="keyword">int</span>* p = &amp;k;</span><br><span class="line">*p = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;k:%d\n&quot;</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const 修饰指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//const放在*号左侧 修饰p_a指针指向的内存空间不能修改,但可修改指针的指向</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* p_a = &amp;a;</span><br><span class="line"><span class="comment">//*p_a = 100; //不可修改指针指向的内存空间</span></span><br><span class="line">p_a = &amp;b; <span class="comment">//可修改指针的指向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const放在*号的右侧， 修饰指针的指向不能修改，但是可修改指针指向的内存空间</span></span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> p_b = &amp;a;</span><br><span class="line"><span class="comment">//p_b = &amp;b; //不可修改指针的指向</span></span><br><span class="line">*p_b = <span class="number">100</span>; <span class="comment">//可修改指针指向的内存空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针的指向和指针指向的内存空间都不能修改</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* <span class="keyword">const</span> p_c = &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//const指针用法</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每次都对对象进行拷贝，效率低，应该用指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPersonByValue</span><span class="params">(struct Person person)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Name:%s\n&quot;</span>, person.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Name:%d\n&quot;</span>, person.id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Name:%d\n&quot;</span>, person.age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Name:%d\n&quot;</span>, person.score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//但是用指针会有副作用，可能会不小心修改原数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPersonByPointer</span><span class="params">(<span class="keyword">const</span> struct Person *person)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Name:%s\n&quot;</span>, person-&gt;name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Name:%d\n&quot;</span>, person-&gt;id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Name:%d\n&quot;</span>, person-&gt;age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Name:%d\n&quot;</span>, person-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">p</span> =</span> &#123; <span class="string">&quot;Obama&quot;</span>, <span class="number">1101</span>, <span class="number">23</span>, <span class="number">87</span> &#125;;</span><br><span class="line"><span class="comment">//printPersonByValue(p);</span></span><br><span class="line">printPersonByPointer(&amp;p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用指针传参，可以增加效率，但是为了避免对数据的更改，可以用const进行修饰。</p><ul><li>修饰变量<ul><li>初始化</li><li>只读变量，不是常量，可以通过指针间接修改</li></ul></li><li>修饰指针<ul><li>*左侧，修饰指针指向的内存空间不能修改，但是可以修改指针的指向</li><li>*右侧，修饰指针的指向不能修改，可以修改指针指向的内存空间</li><li>*左右两侧都有，内存空间和指向都不能修改</li></ul></li></ul><h2 id="二级指针"><a class="markdownIt-Anchor" href="#二级指针"></a> 二级指针</h2><ul><li><p>概念</p><p>指针的指针</p></li><li><p>做参数的输出特性是指由被调函数分配内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allocate_space</span><span class="params">(<span class="keyword">int</span> **arr,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="comment">//堆上分配n个int类型元素内存</span></span><br><span class="line"><span class="keyword">int</span> *temp = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)* n);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == temp)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给内存初始化值</span></span><br><span class="line"><span class="keyword">int</span> *pTemp = temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i ++)&#123;</span><br><span class="line"><span class="comment">//temp[i] = i + 100;</span></span><br><span class="line">*pTemp = i + <span class="number">100</span>;</span><br><span class="line">pTemp++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指针间接赋值</span></span><br><span class="line">*arr = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_array</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i ++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二级指针输出特性(由被调函数分配内存)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *arr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//给arr指针间接赋值</span></span><br><span class="line">allocate_space(&amp;arr,n);</span><br><span class="line"><span class="comment">//输出arr指向数组的内存</span></span><br><span class="line">print_array(arr, n);</span><br><span class="line"><span class="comment">//释放arr所指向内存空间的值</span></span><br><span class="line"><span class="keyword">if</span> (arr != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">free</span>(arr);</span><br><span class="line">arr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>做形参的输入特性 由主调函数分配内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_array</span><span class="params">(<span class="keyword">int</span> **arr,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i ++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(arr[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二级指针输入特性(由主调函数分配内存)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> a3 = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> a4 = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">int</span> a5 = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>** arr = (<span class="keyword">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> *) * n);</span><br><span class="line">arr[<span class="number">0</span>] = &amp;a1;</span><br><span class="line">arr[<span class="number">1</span>] = &amp;a2;</span><br><span class="line">arr[<span class="number">2</span>] = &amp;a3;</span><br><span class="line">arr[<span class="number">3</span>] = &amp;a4;</span><br><span class="line">arr[<span class="number">4</span>] = &amp;a5;</span><br><span class="line"></span><br><span class="line">print_array(arr,n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(arr);</span><br><span class="line">arr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>内存模型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//栈区指针数组</span></span><br><span class="line"><span class="keyword">char</span> *p1[] = &#123; <span class="string">&quot;aaaaa&quot;</span>, <span class="string">&quot;bbbbb&quot;</span>, <span class="string">&quot;ccccc&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆区指针数组</span></span><br><span class="line"><span class="keyword">char</span> **p3 = (<span class="keyword">char</span> **)<span class="built_in">malloc</span>(<span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span> *)); <span class="comment">//char *array[3];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">p3[i] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>)); <span class="comment">//char buf[10]</span></span><br><span class="line"><span class="built_in">sprintf</span>(p3[i], <span class="string">&quot;%d%d%d&quot;</span>, i, i, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>二级指针配合文件读写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @description 获取有效行数</span></span><br><span class="line"><span class="comment"> * @param       </span></span><br><span class="line"><span class="comment"> * @return      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getline</span><span class="params">(FILE * pFile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pFile==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> lines = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (fget(buf,<span class="number">1024</span>,pFile)!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        lines++;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fseek(pFile,<span class="number">0</span>,SEEK_SET);    <span class="comment">/* 移动光标 */</span></span><br><span class="line">    <span class="keyword">return</span> lines;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @description 读取文件数据</span></span><br><span class="line"><span class="comment"> * @param       </span></span><br><span class="line"><span class="comment"> * @return      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">readFileData</span><span class="params">(FILE *pFile,<span class="keyword">int</span> lines,<span class="keyword">char</span> ** pArray)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pFile == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(lines&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pArray == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(fgets(buf, <span class="keyword">sizeof</span>(buf),pFile)!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> currentLen = <span class="built_in">strlen</span>(buf) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> * currentStrP = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*currentLen);</span><br><span class="line">        <span class="built_in">strcpy</span>(currentStrP,buf);</span><br><span class="line">        pArray[index++] = currentStrP;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="number">1024</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @description 显示文件数据</span></span><br><span class="line"><span class="comment"> * @param       </span></span><br><span class="line"><span class="comment"> * @return      </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">showFileData</span><span class="params">(<span class="keyword">char</span> **pArray,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d行的数据为 %s&quot;</span>,i+<span class="number">1</span>,pArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * pFile = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pFile == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;文件打开失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = getline(pFile);</span><br><span class="line">    <span class="keyword">char</span> ** pArray = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span> *)*len);</span><br><span class="line"></span><br><span class="line">    readFileData(pFile, len, pArray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示数据</span></span><br><span class="line">    showFileData(pArray,len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放堆区内容</span></span><br><span class="line">    <span class="built_in">free</span>(pArray);</span><br><span class="line">    pArray = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    fclose(pFile);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="位运算"><a class="markdownIt-Anchor" href="#位运算"></a> 位运算</h2><ul><li><p>概念</p><ul><li><p>按位取反</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~(<span class="number">10011010</span>)</span><br><span class="line"><span class="number">01100101</span></span><br></pre></td></tr></table></figure></li><li><p>按位与</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  (<span class="number">10010011</span>) </span><br><span class="line">&amp; (<span class="number">00111101</span>) </span><br><span class="line">= (<span class="number">00010001</span>)</span><br></pre></td></tr></table></figure></li><li><p>按位或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">10010011</span>)</span><br><span class="line"> | (<span class="number">00111101</span>)</span><br><span class="line"> = (<span class="number">10111111</span>)</span><br></pre></td></tr></table></figure></li><li><p>按位异或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">10010011</span>)</span><br><span class="line">  ^ (<span class="number">00111101</span>)</span><br><span class="line">  = (<span class="number">10101110</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>用法</p><ul><li><p>打开位</p><ul><li>flag | 00000010 打开第2位</li></ul></li><li><p>关闭位</p><ul><li>flag &amp; ~flag 关闭所有位</li></ul></li><li><p>转置位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">10010011</span>)</span><br><span class="line">^(<span class="number">11111111</span>)</span><br><span class="line">=(<span class="number">01101100</span>)</span><br></pre></td></tr></table></figure></li><li><p>交换两个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a ^ b = temp;</span></span><br><span class="line"><span class="comment">//a ^ temp = b;</span></span><br><span class="line"><span class="comment">//b ^ temp = a</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="移位运算"><a class="markdownIt-Anchor" href="#移位运算"></a> 移位运算</h2><ul><li><p>左移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">10001010</span>) &lt;&lt; <span class="number">2</span></span><br><span class="line">(<span class="number">00101000</span>)</span><br></pre></td></tr></table></figure></li><li><p>右移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有符号值</span></span><br><span class="line">(<span class="number">10001010</span>) &gt;&gt; <span class="number">2</span></span><br><span class="line">(<span class="number">00100010</span>)     <span class="comment">//在某些系统上的结果值</span></span><br><span class="line"></span><br><span class="line">(<span class="number">10001010</span>) &gt;&gt; <span class="number">2</span></span><br><span class="line">(<span class="number">11100010</span>)     <span class="comment">//在另一些系统上的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无符号值</span></span><br><span class="line">(<span class="number">10001010</span>) &gt;&gt; <span class="number">2</span></span><br><span class="line">(<span class="number">00100010</span>)    <span class="comment">//所有系统上的结果值</span></span><br></pre></td></tr></table></figure></li><li><p>用法：移位运算符</p><table><thead><tr><th>number  &lt;&lt; n</th><th>number乘以2的n次幂</th></tr></thead><tbody><tr><td>number  &gt;&gt; n</td><td>如果number非负，则用number除以2的n次幂</td></tr></tbody></table></li></ul><h1 id="day4"><a class="markdownIt-Anchor" href="#day4"></a> Day4</h1><h2 id="一维数组名"><a class="markdownIt-Anchor" href="#一维数组名"></a> 一维数组名</h2><ul><li>两种情况，不指向数组第一个元素的指针<ul><li>特殊情况1 sizeof 统计数组长度</li><li>特殊情况2 对数组名取地址，数组指针，步长整个数组长度</li></ul></li><li>数组名是指针常量，指针的指向不可以修改，而指针指向的值可以改</li><li>传参数时候 int arr[] 的可读性比较高</li><li>数组的索引可以为负数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int arr[]  可读性更高</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[] , <span class="keyword">int</span> len)</span> <span class="comment">//int arr[]等价于  int * arr</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一维数组名是不是指针？</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//有两种特殊情况，一维数组名不是 指向第一个元素的指针</span></span><br><span class="line"><span class="comment">//1、sizeof</span></span><br><span class="line"><span class="comment">//2、对数组名取地址   得到数组指针 步长是整个数组长度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, &amp;arr);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, &amp;arr + 1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//int * p =  arr;</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">printArray(arr, len);</span><br><span class="line"></span><br><span class="line"><span class="comment">//arr数组名  它是一个指针常量 指针的指向不可以修改的，而指针指向的值可以改 int * const a ; </span></span><br><span class="line"><span class="comment">//arr[0] = 1000;</span></span><br><span class="line"><span class="comment">//arr = NULL;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组索引 可不可以为负数   答案：可以</span></span><br><span class="line"><span class="keyword">int</span> * p = arr;</span><br><span class="line">p = p + <span class="number">3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p[<span class="number">-1</span>]);     <span class="comment">//给人看的</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *(p - <span class="number">1</span>)); <span class="comment">//给机器看的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组指针的定义方式"><a class="markdownIt-Anchor" href="#数组指针的定义方式"></a> 数组指针的定义方式</h2><ul><li>先定义出数字类型，再通过类型定义数组指针变量</li><li>先定义数组类型指针，再通过类型定义数组指针变量</li><li>直接定义数组指针变量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组指针的定义方式</span></span><br><span class="line"><span class="comment">//1、先定义数组类型，再通过类型定义数组指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">typedef int(ARRARY_TYPE)[5];//ARRARY_TYPE 代表存放5个int类型元素的数组 的数组类型</span><br><span class="line"></span><br><span class="line"><span class="comment">/*ARRARY_TYPE arr2;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 5;i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">arr2[i] = 100 + i;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 5; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;%d\n&quot;, arr2[i]);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">ARRARY_TYPE * arrP = &amp;arr;</span><br><span class="line"><span class="comment">// *arrP == arr == 数组名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (*arrP)[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先定义数组指针类型，再通过类型定义数组指针</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">typedef int(*ARRARY_TYPE)[5];</span><br><span class="line"></span><br><span class="line">ARRARY_TYPE arrP = &amp;arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (*arrP)[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//直接定义数组指针变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>(* p )[<span class="number">5</span>] = &amp;arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (*p)[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组名"><a class="markdownIt-Anchor" href="#二维数组名"></a> 二维数组名</h2><ul><li>除了两种情况外 是指向第一个一维数组的指针<ul><li>sizeof 统计二维数组的大小</li><li>对数组名称取地址</li></ul></li><li>二维数组做函数参数</li><li>数组指针和指针数组<ul><li>数组指针：指向数组的指针</li><li>指针数组：由指针组成的数组</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//可读性高</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*int arr2[3][3] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;</span></span><br><span class="line"><span class="comment">int arr3[][3] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9 &#125;;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//除了两种特殊情况外 ，二维数组名称是 指向第一个一维数组  数组指针</span></span><br><span class="line"><span class="comment">//特殊情况1  sizeof</span></span><br><span class="line"><span class="comment">//特殊情况2  对数组名取地址 &amp;arr  获取的是二维数组的 数组指针 int(*p)[3][3] = &amp;arr;</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, sizeof(arr));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>(*pArray)[<span class="number">3</span>] = arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问二维数组中的 6 这个元素</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arr[<span class="number">1</span>][<span class="number">2</span>]);  <span class="comment">//给人看</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *(*(pArray + <span class="number">1</span>) + <span class="number">2</span>)); <span class="comment">//给机器看</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void printArray(int (*array)[3], int row, int col)</span></span><br><span class="line"><span class="comment">//void printArray(int array[][3], int row ,int col)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">3</span>][<span class="number">3</span>], <span class="keyword">int</span> row ,<span class="keyword">int</span> col)</span> <span class="comment">//array[3][3] 等价于 一维数组指针   int (*array)[3]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col;j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, array[i][j]);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(*(<span class="built_in">array</span> + i) + j));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组做函数参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;,</span><br><span class="line">&#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;,</span><br><span class="line">&#123; <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">printArray(arr, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h2><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210220160858.gif" alt="Selectsort" /></p><p>排序思路：</p><p>从头到尾扫描序列，找出最小的一个元素，和第一个元素交换，接着继续进行这种选择和交换，直到排序结束。</p><ul><li>选择排序<ul><li>从小到大</li><li>开始认定最小值下标为i，从i + 1的位置开始找真实最小值的下标，如果计算的真实下标与i不相等，互换元素。</li></ul></li><li>利用选择排序实现指针数组，从大到小排序</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySort</span><span class="params">(<span class="keyword">int</span> arr[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> min = i; <span class="comment">//记录最小值的下标为i</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[min]&gt; arr[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//更新真实最小值下标</span></span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断真实最小值下标 是否与开始认定的i相等，如果不等，交换元素</span></span><br><span class="line"><span class="keyword">if</span> (i != min)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[min];</span><br><span class="line">arr[min] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>  i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//从小到大 排序 利用选择排序</span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">mySort(arr, len);</span><br><span class="line"></span><br><span class="line">printArray(arr, len);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void selectSort(char ** pArr, int len)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">char</span> * pArr[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> max = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//if (pArr[max] &lt; pArr[j])</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strcmp</span>(pArr[max],pArr[j]) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">max = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( i != max)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> * tmp = pArr[i];</span><br><span class="line">pArr[i] = pArr[max];</span><br><span class="line">pArr[max] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray2</span><span class="params">(<span class="keyword">char</span> ** pArr, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, pArr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//对指针数组进行排序，排序的算法利用 选择排序   从大到小</span></span><br><span class="line"><span class="keyword">char</span> * pArray[] = &#123; <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;fff&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;eee&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">sizeof</span>(pArray) / <span class="keyword">sizeof</span>(<span class="keyword">char</span>*);</span><br><span class="line">selectSort(pArray, len);</span><br><span class="line"></span><br><span class="line">printArray2(pArray, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux内核编译和移植</title>
      <link href="2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/Linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E5%92%8C%E7%A7%BB%E6%A4%8D/"/>
      <url>2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/Linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E5%92%8C%E7%A7%BB%E6%A4%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="linux-内核编译"><a class="markdownIt-Anchor" href="#linux-内核编译"></a> Linux 内核编译</h2><h3 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h3><p>有正点原子现成的Linux内核，先学会编译烧录到开发板中进行体验一下。</p><p>Ubuntu上安装lzop库（无损压缩库）</p><p>sudo apt-get install lzop</p><p>解压linux-imx-4.1.15-2.1.0-g8a006db.tar.bz2 这个压缩包</p><p>tar -vxjf linux-imx-4.1.15-2.1.0-g8a006db.tar.bz2  -C src</p><p>编译脚本 mx6ull_alientek_emmc.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">make ARCH&#x3D;arm CROSS_COMPILE&#x3D;arm-linux-gnueabihf- distclean</span><br><span class="line">make ARCH&#x3D;arm CROSS_COMPILE&#x3D;arm-linux-gnueabihf- imx_v7_defconfig</span><br><span class="line">make ARCH&#x3D;arm CROSS_COMPILE&#x3D;arm-linux-gnueabihf- menuconfig</span><br><span class="line">make ARCH&#x3D;arm CROSS_COMPILE&#x3D;arm-linux-gnueabihf- all -j16</span><br></pre></td></tr></table></figure><p>执行脚本 bash mx6ull_alientek_emmc.sh</p><p>弹出图形配置界面</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210227223301.png" alt="image-20210227223258209" /></p><p>两次esc自动退出，开始编译。</p><p>编译完成后</p><p>会在 arch/arm/boot 这个目录下生成一个叫做 zImage 的文件  镜像文件</p><p>会在 arch/arm/boo/dts 下生成很多.dtb 文件  设备树文件</p><p>编译完成后的源码目录</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210228000143.png" alt="image-20210228000141639" /></p><p>重要的文件夹</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210227235754.png" alt="image-20210227235752227" /></p><p>重要的文件</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210227235857.png" alt="image-20210227235854281" /></p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210227235933.png" alt="image-20210227235931816" /></p><ul><li><p>arch 目录</p><p>架构相关的目录</p></li><li><p>block目录</p><p>块设备目录</p></li><li><p>crypto 目录</p><p>加密文件</p></li><li><p>Documentation 目录</p><p>存放着 Linux 相关的文档，如果要想了解 Linux 某个功能模块或驱动架构的功能，就可以在 Documentation 目录中查找有没有对应的文档</p></li><li><p>drivers 目录</p><p>驱动目录文件，此目录根据驱动类型的不同，分门别类进行整理</p></li><li><p>firmware 目录</p><p>用于存放固件</p></li><li><p>fs 目录</p><p>此目录存放文件系统，比如 fs/ext2、 fs/ext4、 fs/f2fs 等，分别是 ext2、 ext4 和 f2fs 等文件系<br />统</p></li><li><p>include 目录</p><p>头文件目录</p></li><li><p>init 目录</p><p>存放Linux内核启动的初始化代码</p></li><li><p>ipc目录</p><p>IPC 为进程间通信， ipc 目录是进程间通信的具体实现代码</p></li><li><p>kernel 目录</p><p>Linux 内核代码</p></li><li><p>lib 目录</p><p>lib 目录都是一些公用的库</p></li><li><p>mm 目录</p><p>此目录存放内存管理相关代码</p></li><li><p>net 目录</p><p>此目录存放网络相关代码</p></li><li><p>samples 目录</p><p>此目录存放一些示例代码文件</p></li><li><p>scripts 目录</p><p>脚本目录， Linux 编译的时候会用到很多脚本文件，这些脚本文件就保存在此目录中</p></li><li><p>security 目录</p><p>安全相关的文件</p></li><li><p>sound 目录</p><p>音频相关驱动文件，音频驱动文件并没有存放到 drivers 目录中，而是单独的目<br />录。</p></li><li><p>tools 目录</p><p>此目录存放一些编译的时候使用到的工具。</p></li><li><p>usr 目录</p><p>此目录存放与 initramfs 有关的代码。</p></li><li><p>virt 目录</p><p>此目录存放虚拟机相关文件。</p></li><li><p>.config 文件</p><p>跟 uboot 一样， .config 保存着 Linux 最终的配置信息，编译 Linux 的时候会读取此文件中<br />的配置信息。最终根据配置信息来选择编译 Linux 哪些模块，哪些功能。</p></li><li><p>Kbuild 文件</p><p>有些 Makefile 会读取此文件。</p></li><li><p>Kconfig 文件</p><p>图形化配置界面的配置文件。</p></li><li><p>Makefile 文件</p><p>Linux 顶层 Makefile 文件，建议好好阅读一下此文件。</p></li><li><p>README 文件</p><p>详细讲解了如何编译 Linux 源码，以及 Linux 源码的目录信息。</p></li></ul><h3 id="顶层makefile详解-有时间再看"><a class="markdownIt-Anchor" href="#顶层makefile详解-有时间再看"></a> 顶层Makefile详解 (有时间再看)</h3><p><strong>make xxx_defconfig 过程</strong></p><p><strong>Makefile.build 脚本分析</strong></p><p><strong>make 过程</strong></p><p><strong>built-in.o 文件编译生成过程</strong></p><p><strong>make zImage 过程</strong></p><p><strong>vmlinux、 Image， zImage、 uImage 的区别 ：</strong></p><p>①vmlinux 是编译出来的最原始的内核文件，是未压缩的，比如正点原子提供的 Linux 源<br />码编译出来的 vmlinux 差不多有 16MB。</p><p>②Image 是 Linux 内核镜像文件，但是 Image 仅包含可执行的二进制数据。 Image 就是使用 objcopy 取消掉 vmlinux 中的一些其他信息，比如符号表什么的。但是 Image 是没有压缩过的， Image 保存在 arch/arm/boot 目录下，其大小大概在 12MB 左右。</p><p>③zImage 是经过 gzip 压缩后的 Image，经过压缩以后其大小大概在 6MB 左右。</p><p>④uImage 是老版本 uboot 专用的镜像文件， uImag 是在 zImage 前面加了一个长度为 64字节的“头”，这个头信息描述了该镜像文件的类型、加载位置、生成时间、大小等信息。但是新的 uboot 已经支持了 zImage 启动！所以已经很少用到 uImage 了，除非你用的很古老的 uboot。</p><p>基本和 uboot 的顶层 Makefile 一样，重点在于vmlinux 的生成。最后将 vmlinux 压缩成我们最常用的 zImage 或 uImage 等文件。</p><h2 id="linux内核启动流程"><a class="markdownIt-Anchor" href="#linux内核启动流程"></a> Linux内核启动流程</h2><h3 id="vmlinuxlds-链接脚本"><a class="markdownIt-Anchor" href="#vmlinuxlds-链接脚本"></a> vmlinux.lds  链接脚本</h3><p>位置arch/arm/kernel/vmlinux.lds</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">492</span> OUTPUT_ARCH(arm)</span><br><span class="line"><span class="number">493</span> ENTRY(stext)</span><br><span class="line"><span class="number">494</span> jiffies = jiffies_64;</span><br><span class="line"><span class="number">495</span> SECTIONS</span><br><span class="line"><span class="number">496</span> &#123;</span><br><span class="line"><span class="number">497</span> <span class="comment">/*</span></span><br><span class="line"><span class="comment">498 * <span class="doctag">XXX:</span> The linker does not define how output sections are</span></span><br><span class="line"><span class="comment">499 * assigned to input sections when there are multiple statements</span></span><br><span class="line"><span class="comment">500 * matching the same input section name. There is no documented</span></span><br><span class="line"><span class="comment">501 * order of matching.</span></span><br><span class="line"><span class="comment">502 *</span></span><br><span class="line"><span class="comment">503 * unwind exit sections must be discarded before the rest of the</span></span><br><span class="line"><span class="comment">504 * unwind sections get included.</span></span><br><span class="line"><span class="comment">505 */</span></span><br><span class="line"><span class="number">506</span> /DISCARD/ : &#123;</span><br><span class="line"><span class="number">507</span> *(.ARM.exidx.<span class="built_in">exit</span>.text)</span><br><span class="line"><span class="number">508</span> *(.ARM.extab.<span class="built_in">exit</span>.text)</span><br><span class="line"><span class="number">509</span></span><br><span class="line">......</span><br><span class="line"><span class="number">645</span> &#125;</span><br></pre></td></tr></table></figure><p>Linux内核入口为stext，stext定义在文件arch/arm/kernel/head.S中，要分析Linux内核启动流程，要从arch/arm/kernel/head.S 的 stext 处开始分析。</p><h3 id="linux内核启动流程-以后再详细看"><a class="markdownIt-Anchor" href="#linux内核启动流程-以后再详细看"></a> Linux内核启动流程 ？？？（以后再详细看）</h3><p>在内核启动之前要求如下：</p><p>①、关闭 MMU。<br />②、关闭 D-cache。<br />③、 I-Cache 无所谓。<br />④、 r0=0。<br />⑤、 r1=machine nr(也就是机器 ID)。<br />⑥、 r2=atags 或者设备树(dtb)首地址</p><p>Linux 内核入口 stext</p><ul><li><p>调用函数 safe_svcmode_maskall 确保 CPU 处于 SVC 模式，并且关闭了所有的中断。 safe_svcmode_maskall 定义在文件 arch/arm/include/asm/assembler.h 中</p></li><li><p>读处理器 ID， ID 值保存在 r9 寄存器中。</p></li><li><p>调用函数__lookup_processor_type 检查当前系统是否支持此 CPU，如果支持的就获 取 procinfo 信 息 。 procinfo 是 proc_info_list 类 型 的 结 构 体 。arch/arm/include/asm/procinfo.h中进行定义</p></li><li><p>调用函数__vet_atags 验证 atags 或设备树(dtb)的合法性。函数__vet_atags 定义在文件 arch/arm/kernel/head-common.S 中 。</p></li><li><p>调用函数__create_page_tables 创建页表。</p></li><li><p>将函数__mmap_switched 的地址保存到 r13 寄存器中。</p></li></ul><p>__mmap_switched 函数</p><ul><li>__mmap_switched 定义在文件 arch/arm/kernel/head-common.S， __mmap_switched 最终会调用 start_kernel 函数</li></ul><p>start_kernel 函数</p><ul><li><p>通过调用众多的子函数来完成 Linux 启动之前的一些初始化工作 。// 详细见正点原子的官方文档</p></li><li><p>start_kernel 函数最后调用了 rest_init</p></li></ul><p>rest_init 函数</p><ul><li><p>调用函数 rcu_scheduler_starting，启动 RCU 锁调度器</p></li><li><p>调用函数 kernel_thread 创建 kernel_init 进程，也就是大名鼎鼎的 init 内核进程。<br />init 进程的 PID 为 1。 init 进程一开始是内核进程(也就是运行在内核态)，后面 init 进程会在根<br />文件系统中查找名为“init”这个程序，这个“init”程序处于用户态，通过运行这个“init”程<br />序， init 进程就会实现从内核态到用户态的转变。</p></li><li><p>调用函数 kernel_thread 创建 kthreadd 内核进程，此内核进程的 PID 为 2。 kthreadd<br />进程负责所有内核进程的调度和管理</p></li><li><p>最后调用函数 cpu_startup_entry 来进入 idle 进程， cpu_startup_entry 会调用<br />cpu_idle_loop， cpu_idle_loop 是个 while 循环，也就是 idle 进程代码。</p></li><li><p>idle进程叫做空闲进程，如果学过 FreeRTOS 或者 UCOS 的话应该听说过空闲任务。 idle 空闲进程<br />就和空闲任务一样，当 CPU 没有事情做的时候就在 idle 空闲进程里面“瞎逛游”，反正就是给<br />CPU 找点事做。当其他进程要工作的时候就会抢占 idle 进程，从而夺取 CPU 使用权。其实大<br />家应该可以看到 idle 进程并没有使用 kernel_thread 或者 fork 函数来创建，因为它是有主进程演<br />变而来的。</p></li><li><p>在 Linux 终端中输入“ps -A”就可以打印出当前系统中的所有进程</p></li></ul><p>init 进程</p><ul><li><p>kernel_init 函数就是 init 进程具体做的工作，定义在文件 init/main.c 中</p><ul><li>do_basic_setup 函数用于完成 Linux 下设备驱动初始化工作！  do_basic_setup 会调用 driver_init 函数完成 Linux 下驱动模型子系统的初始化</li><li>打开设备“/dev/console”，在 Linux 中一切皆为文件！因此“/dev/console”也<br />是一个文件，此文件为控制台设备。每个文件都有一个文件描述符，此处打开的“/dev/console”<br />文件描述符为 0，作为标准输入(0)。</li><li>sys_dup 函数将标准输入(0)的文件描述符复制了 2 次，一个作为标准<br />输出(1)，一个作为标准错误(2)。这样标准输入、输出、错误都是/dev/console 了。 console 通过<br />uboot 的 bootargs 环境变量设置，“console=ttymxc0,115200”表示将/dev/ttymxc0 设置为 console，<br />也就是 I.MX6U 的串口 1。当然，也可以设置其他的设备为 console，比如虚拟控制台 tty1，设<br />置 tty1 为 console 就可以在 LCD 屏幕上看到系统的提示信息。</li><li>调用函数 prepare_namespace 来挂载根文件系统。跟文件系统也是由命令行参<br />数指定的，也就是 uboot 的 bootargs 环境变量。比如“root=/dev/mmcblk1p2 rootwait rw”就表示<br />根文件系统在/dev/mmcblk1p2 中，也就是 EMMC 的分区 2 中。</li></ul></li><li><p>kernel_init_freeable 函数用于完成 init 进程的一些其他初始化工作</p></li><li><p>ramdisk_execute_command 是一个全局的 char 指针变量，此变量值为“/init”，<br />也就是根目录下的 init 程序。 ramdisk_execute_command 也可以通过 uboot 传递，在 bootargs 中<br />使用“rdinit=xxx”即可， xxx 为具体的 init 程序名字。</p></li><li><p>如果存在“/init”程序的话就通过函数 run_init_process 来运行此程序。</p></li><li><p>如果 ramdisk_execute_command 为空的话就看 execute_command 是否为空，反<br />正不管如何一定要在根文件系统中找到一个可运行的 init 程序。 execute_command 的值是通过<br />uboot 传递，在 bootargs 中使用“init=xxxx”就可以了，比如“init=/linuxrc”表示根文件系统中<br />的 linuxrc 就是要执行的用户空间 init 程序。</p></li><li><p>如果 ramdisk_execute_command 和 execute_command 都为空，那么就依次<br />查找“/sbin/init”、“/etc/init”、“/bin/init”和“/bin/sh”，这四个相当于备用 init 程序，如果这四<br />个也不存在，那么 Linux 启动失败！</p></li></ul><h2 id="linux-内核移植"><a class="markdownIt-Anchor" href="#linux-内核移植"></a> Linux 内核移植</h2><p>内核移植使用nxp官方提供的Linux，再根据正点原子板子进行修改。</p><p>解压<code>tar -jxvf linux-imx-rel_imx_4.1.15_2.1.0_ga.tar.bz2</code></p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210301155554.png" alt="image-20210301155551876" /></p><h3 id="创建vscode工程"><a class="markdownIt-Anchor" href="#创建vscode工程"></a> 创建VScode工程</h3><p>另存为工作区</p><p>创建settings.json文件</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210301160545.png" alt="image-20210301160542942" /></p><p>添加代码 (屏蔽了不需要的架构文件夹以及文件)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;search.exclude&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;**/node_modules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;**/bower_components&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;**/*.o&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;**/*.su&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;**/*.cmd&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;Documentation&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 屏蔽不用的架构相关的文件 */</span></span><br><span class="line">        <span class="attr">&quot;arch/alpha&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arc&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm64&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/avr32&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/[b-z]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/plat*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/mach-[a-h]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/mach-[n-z]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/mach-i[n-z]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/mach-m[e-v]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/mach-k*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/mach-l*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 屏蔽排除不用的配置文件 */</span></span><br><span class="line">        <span class="attr">&quot;arch/arm/configs/[a-h]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/configs/[j-z]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/configs/imo*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/configs/in*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/configs/io*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/configs/ix*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 屏蔽掉不用的 DTB 文件 */</span></span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/[a-h]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/[k-z]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/in*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx1*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx7*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx2*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx3*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx5*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx6d*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx6q*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx6s*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx6ul-*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx6ull-9x9*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx6ull-14x14-ddr*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;files.exclude&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;**/.git&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;**/.svn&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;**/.hg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;**/CVS&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;**/.DS_Store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;**/*.o&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;**/*.su&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;**/*.cmd&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;Documentation&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="comment">/* 屏蔽不用的架构相关的文件 */</span></span><br><span class="line">        <span class="attr">&quot;arch/alpha&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arc&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm64&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/avr32&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/[b-z]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/plat*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/mach-[a-h]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/mach-[n-z]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/mach-i[n-z]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/mach-m[e-v]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/mach-k*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/mach-l*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="comment">/* 屏蔽排除不用的配置文件 */</span><span class="attr">&quot;arch/arm/configs/[a-h]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/configs/[j-z]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/configs/imo*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/configs/in*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/configs/io*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/configs/ix*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="comment">/* 屏蔽掉不用的 DTB 文件 */</span></span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/[a-h]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/[k-z]*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/in*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx1*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx7*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx2*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx3*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx5*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx6d*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx6q*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx6s*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx6ul-*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx6ull-9x9*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;arch/arm/boot/dts/imx6ull-14x14-ddr*&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nxp官方开发板内核移植"><a class="markdownIt-Anchor" href="#nxp官方开发板内核移植"></a> NXP官方开发板内核移植</h3><h4 id="配置并且编译linux内核"><a class="markdownIt-Anchor" href="#配置并且编译linux内核"></a> 配置并且编译Linux内核</h4><p>执行命令进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- clean<span class="comment"># 清理</span></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- imx_v7_mfg_defconfig <span class="comment"># 配置</span></span><br></pre></td></tr></table></figure><p>编译<code>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j2</code></p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210301165259.png" alt="image-20210301165256815" /></p><p>编译完成后，会得到两个文件</p><p>①、 Linux 内核镜像文件： zImage。<br />②、 NXP 官方 I.MX6ULL EVK 开发板对应的设备树文件： imx6ull-14x14-evk.dtb。</p><p>这两个文件，就是我们烧写到开发板的文件。</p><h4 id="linux内核启动测试"><a class="markdownIt-Anchor" href="#linux内核启动测试"></a> Linux内核启动测试</h4><ul><li><p>确保uboot 中的环境变量 bootargs</p><p><code>console=ttymxc0,115200 root=/dev/mmcblk1p2 rootwait rw</code></p></li><li><p>将zImage 和 imx6ull-14x14-evk.dtb 复制到 Ubuntu 中的 tftp 目录  (网络下载)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp arch/arm/boot/zImage /home/kepler/Linux/tftpboot/ -f</span><br><span class="line">cp arch/arm/boot/dts/imx6ull-14x14-evk.dtb /home/kepler/Linux/tftpboot/ -f</span><br></pre></td></tr></table></figure></li><li><p>启动开发板进行测试，进入uboot命令下，输入以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tftp 80800000 zImage</span><br><span class="line">tftp 83000000 imx6ull-14x14-evk.dtb</span><br><span class="line">bootz 80800000 - 83000000</span><br></pre></td></tr></table></figure></li><li><p>uboot直接启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setenv bootargs <span class="string">&#x27;console=ttymxc0,115200 root=/dev/mmcblk1p2 rootwait rw&#x27;</span></span><br><span class="line">setenv bootcmd <span class="string">&#x27;tftp 80800000 zImage; tftp 83000000 imx6ull-alientek-emmc.dtb; bootz 80800000 - 83000000&#x27;</span></span><br><span class="line">saveenv</span><br></pre></td></tr></table></figure><p>输入 boot，或者 run bootcmd    启动内核</p></li></ul><p>内核启动正常，</p><h4 id="根文件系统的缺失"><a class="markdownIt-Anchor" href="#根文件系统的缺失"></a> 根文件系统的缺失</h4><p>Linux 内核启动以后是需要根文件系统的，根文件系统存在哪里是由 uboot 的 bootargs 环境<br />变 量 指 定 ， bootargs 会 传 递 给 Linux 内 核 作 为 命 令 行 参 数 。</p><p>上小节设定root=/dev/mmcblk1p2，根文件系统在/dev/mmcblk1p2中，就是在EMMC分区2中。</p><p>不设置根文件系统位置会出现内核崩溃</p><p><code>Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0)</code></p><p>同时如果设置了根文件系统目录，但是目录下为空，依旧会提示内核崩溃。</p><h3 id="在linux中添加自己的开发板"><a class="markdownIt-Anchor" href="#在linux中添加自己的开发板"></a> 在Linux中添加自己的开发板</h3><ul><li><p>添加开发板默认配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> arch/arm/configs</span><br><span class="line">cp imx_v7_mfg_defconfig imx_alientek_emmc_defconfig</span><br></pre></td></tr></table></figure></li><li><p>添加开发板对应的设备树文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> arch/arm/boot/dts</span><br><span class="line">cp imx6ull-14x14-evk.dts imx6ull-alientek-emmc.dts</span><br></pre></td></tr></table></figure><p>更改Makefile文件的dtb-$(CONFIG_SOC_IMX6ULL)  配置项 添加imx6ull-alientek-emmc.dtb</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210301163414.png" alt="image-20210301163412025" /></p></li><li><p>编写编译脚本</p></li></ul><p>imx6ull_alientek_emmc.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- distclean</span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihfimx_alientek_emmc_defconfig</span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig</span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- all -j2</span><br></pre></td></tr></table></figure><h3 id="cpu主频和网络驱动修改"><a class="markdownIt-Anchor" href="#cpu主频和网络驱动修改"></a> CPU主频和网络驱动修改</h3><h4 id="cpu主频的修改"><a class="markdownIt-Anchor" href="#cpu主频的修改"></a> CPU主频的修改</h4><p>设置 I.MX6U-ALPHA 开发板工作在 792MHz</p><p>查看cpu信息 <code>cat /proc/cpuinfo</code></p><p>BogoMIIS  用来衡量Linux性能，处理器性能越强，主频越高，BogoMIIS值就越大。可以用于粗略判断性能。</p><p>查看当前CPU的工作频率</p><p>/sys/bus/cpu/devices/cpu0/cpufreq   中，有许多文件用来记录CPU频率信息</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210301190700.png" alt="image-20210301190658617" /></p><ul><li>cpuinfo_cur_freq：  cpu 工作频率</li><li>cpuinfo_max_freq：处理器所能运行的最高工作频率  (单位: KHz）</li><li>cpuinfo_min_freq：处理器所能运行的最低工作频率  (单位: KHz）</li><li>cpuinfo_transition_latency：  处理器切换频率所需要的时间  (单位:ns)</li><li>scaling_available_frequencies：  处理器支持的主频率列表(单位: KHz）</li><li>scaling_available_governors：  当前内核中支持的所有 governor(调频)类型</li><li>scaling_cur_freq：  保存着 cpufreq 模块缓存的当前 CPU 频率 ，不会对 CPU 硬件寄存器进<br />行检查</li><li>scaling_driver：  该文件保存当前 CPU 所使用的调频驱动。</li><li>scaling_governor： governor(调频)策略</li></ul><p>有五种调频策略</p><ul><li><p>Performance  策略最高性能，直接用最高频率，不考虑耗电。</p></li><li><p>Ondemand   策略      定时检查负载  根据负载来调节频率。</p></li><li><p>Powersave 策略         省电模式 以最低频率运行</p></li><li><p>Userspace 策略          可以在用户空间手动调节频率</p></li><li><p>Interactive 策略          一开始直接用最高频率，然后根据 CPU 负载慢慢降低。</p></li></ul><p>scaling_max_freq：governor(调频)可以调节的最高频率</p><p>cpuinfo_min_freq： governor(调频)可以调节的最低频率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cpuinfo_cur_freq = 198000</span><br><span class="line">cpuinfo_max_freq = 792000</span><br><span class="line">cpuinfo_min_freq = 198000</span><br><span class="line">scaling_cur_freq = 198000</span><br><span class="line">scaling_max_freq = 792000</span><br><span class="line">cat scaling_min_freq = 198000</span><br><span class="line">scaling_available_frequencies = 198000 396000 528000 792000</span><br><span class="line">cat scaling_governor = ondemand</span><br></pre></td></tr></table></figure><p>cpu调频策略 “make menuconfig”</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210301194625.png" alt="image-20210301194622950" /></p><p>进入如下路径：</p><ul><li>Power management and ACPI options<ul><li>CPU Frequency scaling<ul><li>Default CPUFreq governor</li></ul></li></ul></li></ul><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210301195041.png" alt="image-20210301195038849" /></p><p>建议大家使用 ondemand 模式，一来可以省电，二来可以减少发热。</p><p>对应在imx_alientek_emmc_defconfig   配置文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND&#x3D;y &#x2F;&#x2F;默认配置 41行</span><br><span class="line">CONFIG_CPU_FREQ_GOV_POWERSAVE&#x3D;y</span><br><span class="line">CONFIG_CPU_FREQ_GOV_USERSPACE&#x3D;y</span><br><span class="line">CONFIG_CPU_FREQ_GOV_INTERACTIVE&#x3D;y</span><br></pre></td></tr></table></figure><p>设置792MHz需要将默认配置屏蔽掉，并且添加 <code>CONFIG_CPU_FREQ_GOV_ONDEMAND=y</code></p><p>超频至 700MHz</p><p>修改设备树文件arch/arm/boot/dts/imx6ull.dtsi</p><p>63行加入 “696000 1225000”</p><p>72行加入 “696000 1175000”</p><p>编译设备树</p><p>make dtbs</p><h4 id="使能8线emmc驱动"><a class="markdownIt-Anchor" href="#使能8线emmc驱动"></a> 使能8线EMMC驱动</h4><p>修改设备树imx6ull-alientek-emmc.dts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&amp;usdhc2 &#123;</span><br><span class="line">pinctrl-names &#x3D; &quot;default&quot;, &quot;state_100mhz&quot;, &quot;state_200mhz&quot;;</span><br><span class="line">pinctrl-0 &#x3D; &lt;&amp;pinctrl_usdhc2_8bit&gt;;</span><br><span class="line">pinctrl-1 &#x3D; &lt;&amp;pinctrl_usdhc2_8bit_100mhz&gt;;</span><br><span class="line">pinctrl-2 &#x3D; &lt;&amp;pinctrl_usdhc2_8bit_200mhz&gt;;</span><br><span class="line">bus-width &#x3D; &lt;8&gt;;</span><br><span class="line">non-removable;</span><br><span class="line">status &#x3D; &quot;okay&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- dtbs  重新编译一下设备树</p><p>编译完成后，重启Linux系统就可以了。</p><h4 id="修改网络驱动"><a class="markdownIt-Anchor" href="#修改网络驱动"></a> 修改网络驱动</h4><ul><li>修改 LAN8720 的复位以及网络时钟引脚驱动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pinctrl_spi4: spi4grp &#123;</span><br><span class="line">fsl,pins &#x3D; &lt;</span><br><span class="line">MX6ULL_PAD_BOOT_MODE0__GPIO5_IO10 0x70a1</span><br><span class="line">MX6ULL_PAD_BOOT_MODE1__GPIO5_IO11 0x70a1</span><br><span class="line">MX6ULL_PAD_SNVS_TAMPER7__GPIO5_IO07 0x70a1</span><br><span class="line">MX6ULL_PAD_SNVS_TAMPER8__GPIO5_IO08 0x80000000</span><br><span class="line">&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>删除SNVS_TAMPER7 和 SNVS_TAMPER8   两个引脚</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spi4 &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在spi4配置中删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pinctrl-assert-gpios &#x3D; &lt;&amp;gpio5 8 GPIO_ACTIVE_LOW&gt;; &#x2F;&#x2F;SPI4的一个功能引脚</span><br><span class="line">cs-gpios &#x3D; &lt;&amp;gpio5 7 0&gt;;   &#x2F;&#x2F;SPI4的片选引脚</span><br></pre></td></tr></table></figure><p>添加iomuxc_snvs  节点内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&amp;iomuxc_snvs &#123;</span><br><span class="line">……</span><br><span class="line">&#x2F;*enet1 reset zuozhongkai*&#x2F;</span><br><span class="line">pinctrl_enet1_reset: enet1resetgrp &#123;</span><br><span class="line">fsl,pins &#x3D; &lt;</span><br><span class="line">&#x2F;* used for enet1 reset *&#x2F;</span><br><span class="line">MX6ULL_PAD_SNVS_TAMPER7__GPIO5_IO07 0x10B0</span><br><span class="line">&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">     &#x2F;*enet2 reset zuozhongkai*&#x2F;</span><br><span class="line">     pinctrl_enet2_reset: enet2resetgrp &#123;</span><br><span class="line">         fsl,pins &#x3D; &lt;</span><br><span class="line">             &#x2F;* used for enet2 reset *&#x2F;</span><br><span class="line">             MX6ULL_PAD_SNVS_TAMPER8__GPIO5_IO08 0x10B0</span><br><span class="line">         &gt;;</span><br><span class="line">     &#125;;</span><br><span class="line">……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改时钟引脚配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">pinctrl_enet1: enet1grp &#123;</span><br><span class="line">    fsl,pins &#x3D; &lt;</span><br><span class="line">        MX6UL_PAD_ENET1_RX_EN__ENET1_RX_EN 0x1b0b0</span><br><span class="line">        MX6UL_PAD_ENET1_RX_ER__ENET1_RX_ER 0x1b0b0</span><br><span class="line">        MX6UL_PAD_ENET1_RX_DATA0__ENET1_RDATA00 0x1b0b0</span><br><span class="line">        MX6UL_PAD_ENET1_RX_DATA1__ENET1_RDATA01 0x1b0b0</span><br><span class="line">        MX6UL_PAD_ENET1_TX_EN__ENET1_TX_EN 0x1b0b0</span><br><span class="line">        MX6UL_PAD_ENET1_TX_DATA0__ENET1_TDATA00 0x1b0b0</span><br><span class="line">        MX6UL_PAD_ENET1_TX_DATA1__ENET1_TDATA01 0x1b0b0</span><br><span class="line">        </span><br><span class="line">        MX6UL_PAD_ENET1_TX_CLK__ENET1_REF_CLK1 0x4001b009 &#x2F;&#x2F;更改的电气属性</span><br><span class="line">    &gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">pinctrl_enet2: enet2grp &#123;</span><br><span class="line">    fsl,pins &#x3D; &lt;</span><br><span class="line">        MX6UL_PAD_GPIO1_IO07__ENET2_MDC 0x1b0b0</span><br><span class="line">        MX6UL_PAD_GPIO1_IO06__ENET2_MDIO 0x1b0b0</span><br><span class="line">        MX6UL_PAD_ENET2_RX_EN__ENET2_RX_EN 0x1b0b0</span><br><span class="line">        MX6UL_PAD_ENET2_RX_ER__ENET2_RX_ER 0x1b0b0</span><br><span class="line">        MX6UL_PAD_ENET2_RX_DATA0__ENET2_RDATA00 0x1b0b0</span><br><span class="line">        MX6UL_PAD_ENET2_RX_DATA1__ENET2_RDATA01 0x1b0b0</span><br><span class="line">        MX6UL_PAD_ENET2_TX_EN__ENET2_TX_EN 0x1b0b0</span><br><span class="line">        MX6UL_PAD_ENET2_TX_DATA0__ENET2_TDATA00 0x1b0b0</span><br><span class="line">        MX6UL_PAD_ENET2_TX_DATA1__ENET2_TDATA01 0x1b0b0</span><br><span class="line">        </span><br><span class="line">        MX6UL_PAD_ENET2_TX_CLK__ENET2_REF_CLK2 0x4001b009&#x2F;&#x2F;更改的电气属性值</span><br><span class="line">    &gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>修改 fec1 和 fec2 节点的 pinctrl-0 属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&amp;fec1 &#123;</span><br><span class="line">    pinctrl-names &#x3D; &quot;default&quot;;</span><br><span class="line">    pinctrl-0 &#x3D; &lt;&amp;pinctrl_enet1&#x2F;&#x2F;修改后的fec1 节点“pinctrl-0”属性值</span><br><span class="line">     &amp;pinctrl_enet1_reset&gt;;</span><br><span class="line">    phy-mode &#x3D; &quot;rmii&quot;;</span><br><span class="line">    ....</span><br><span class="line">    status &#x3D; &quot;okay&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line">&amp;fec2 &#123;</span><br><span class="line">    pinctrl-names &#x3D; &quot;default&quot;;</span><br><span class="line">    pinctrl-0 &#x3D; &lt;&amp;pinctrl_enet2&#x2F;&#x2F;修改后的 fec2 节点“pinctrl-0”属性值</span><br><span class="line">     &amp;pinctrl_enet2_reset&gt;;</span><br><span class="line">    phy-mode &#x3D; &quot;rmii&quot;;</span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>修改 LAN8720A 的 PHY 地址   (修改后的配置)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&amp;fec1 &#123;</span><br><span class="line">    pinctrl-names &#x3D; &quot;default&quot;;</span><br><span class="line">    pinctrl-0 &#x3D; &lt;&amp;pinctrl_enet1&gt;;</span><br><span class="line">    phy-mode &#x3D; &quot;rmii&quot;;</span><br><span class="line">    phy-handle &#x3D; &lt;&amp;ethphy0&gt;;</span><br><span class="line">    phy-reset-gpios &#x3D; &lt;&amp;gpio5 7 GPIO_ACTIVE_LOW&gt;;</span><br><span class="line">    phy-reset-duration &#x3D; &lt;200&gt;;</span><br><span class="line">    status &#x3D; &quot;okay&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&amp;fec2 &#123;</span><br><span class="line">    pinctrl-names &#x3D; &quot;default&quot;;</span><br><span class="line">    pinctrl-0 &#x3D; &lt;&amp;pinctrl_enet2&gt;;</span><br><span class="line">    phy-mode &#x3D; &quot;rmii&quot;;</span><br><span class="line">    phy-handle &#x3D; &lt;&amp;ethphy1&gt;;</span><br><span class="line">    phy-reset-gpios &#x3D; &lt;&amp;gpio5 8 GPIO_ACTIVE_LOW&gt;;</span><br><span class="line">    phy-reset-duration &#x3D; &lt;200&gt;;</span><br><span class="line">    status &#x3D; &quot;okay&quot;;</span><br><span class="line">    </span><br><span class="line">    mdio &#123;</span><br><span class="line">        #address-cells &#x3D; &lt;1&gt;;</span><br><span class="line">        #size-cells &#x3D; &lt;0&gt;;</span><br><span class="line">        </span><br><span class="line">        ethphy0: ethernet-phy@0 &#123;</span><br><span class="line">            compatible &#x3D; &quot;ethernet-phy-ieee802.3-c22&quot;;</span><br><span class="line">            smsc,disable-energy-detect;</span><br><span class="line">            reg &#x3D; &lt;0&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        ethphy1: ethernet-phy@1 &#123;</span><br><span class="line">            compatible &#x3D; &quot;ethernet-phy-ieee802.3-c22&quot;;</span><br><span class="line">            smsc,disable-energy-detect;</span><br><span class="line">            reg &#x3D; &lt;1&gt;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改 fec_main.c 文件</p><p>在drivers/net/ethernet/freescale/fec_main.c里面，找到函数  fec_probe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">static int</span><br><span class="line">fec_probe(struct platform_device *pdev)</span><br><span class="line">&#123;</span><br><span class="line">    struct fec_enet_private *fep;</span><br><span class="line">    struct fec_platform_data *pdata;</span><br><span class="line">    struct net_device *ndev;</span><br><span class="line">    int i, irq, ret &#x3D; 0;</span><br><span class="line">    struct resource *r;</span><br><span class="line">    const struct of_device_id *of_id;</span><br><span class="line">    static int dev_id;</span><br><span class="line">    struct device_node *np &#x3D; pdev-&gt;dev.of_node, *phy_node;</span><br><span class="line">    int num_tx_qs;</span><br><span class="line">    int num_rx_qs;</span><br><span class="line">    &#x2F;* 设置 MX6UL_PAD_ENET1_TX_CLK 和 MX6UL_PAD_ENET2_TX_CLK</span><br><span class="line">    * 这两个 IO 的复用寄存器的 SION 位为 1。</span><br><span class="line">    *&#x2F;</span><br><span class="line">    void __iomem *IMX6U_ENET1_TX_CLK;</span><br><span class="line">    void __iomem *IMX6U_ENET2_TX_CLK;</span><br><span class="line">    IMX6U_ENET1_TX_CLK &#x3D; ioremap(0X020E00DC, 4);</span><br><span class="line">    writel(0X14, IMX6U_ENET1_TX_CLK);</span><br><span class="line">    IMX6U_ENET2_TX_CLK &#x3D; ioremap(0X020E00FC, 4);</span><br><span class="line">    writel(0X14, IMX6U_ENET2_TX_CLK);</span><br><span class="line">    .....</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置 Linux 内核，使能 LAN8720 驱动</p><p><code>make menuconfig</code> 打开图形化配置</p><p>-&gt; Device Drivers<br />-&gt; Network device support<br />-&gt; PHY Device support and infrastructure<br />-&gt; Drivers for SMSC PHYs</p><p>修改 smsc.c 文件   修改复位函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">static int smsc_phy_reset(struct phy_device *phydev)</span><br><span class="line">&#123;</span><br><span class="line">    int err, phy_reset;</span><br><span class="line">    int msec &#x3D; 1;</span><br><span class="line">    struct device_node *np;</span><br><span class="line">    int timeout &#x3D; 50000;</span><br><span class="line">    if(phydev-&gt;addr &#x3D;&#x3D; 0) &#x2F;* FEC1 *&#x2F; &#123;</span><br><span class="line">        np &#x3D; of_find_node_by_path(&quot;&#x2F;soc&#x2F;aips-bus@02100000&#x2F;ethernet@02188000&quot;);</span><br><span class="line">        if(np &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">            return -EINVAL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(phydev-&gt;addr &#x3D;&#x3D; 1) &#x2F;* FEC2 *&#x2F; &#123;</span><br><span class="line">        np &#x3D; of_find_node_by_path(&quot;&#x2F;soc&#x2F;aips-bus@02000000&#x2F;ethernet@020b4000&quot;);</span><br><span class="line">        if(np &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">            return -EINVAL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err &#x3D; of_property_read_u32(np, &quot;phy-reset-duration&quot;, &amp;msec);</span><br><span class="line">    &#x2F;* A sane reset duration should not be longer than 1s *&#x2F;</span><br><span class="line">    if (!err &amp;&amp; msec &gt; 1000)</span><br><span class="line">        msec &#x3D; 1;</span><br><span class="line">    phy_reset &#x3D; of_get_named_gpio(np, &quot;phy-reset-gpios&quot;, 0);</span><br><span class="line">    if (!gpio_is_valid(phy_reset))</span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    gpio_direction_output(phy_reset, 0);</span><br><span class="line">    gpio_set_value(phy_reset, 0);</span><br><span class="line">    msleep(msec);</span><br><span class="line">    gpio_set_value(phy_reset, 1);</span><br><span class="line"></span><br><span class="line">    int rc &#x3D; phy_read(phydev, MII_LAN83C185_SPECIAL_MODES);</span><br><span class="line">    if (rc &lt; 0)</span><br><span class="line">        return rc;</span><br><span class="line"></span><br><span class="line">    &#x2F;* If the SMSC PHY is in power down mode, then set it</span><br><span class="line">    * in all capable mode before using it.</span><br><span class="line">    *&#x2F;</span><br><span class="line">    if ((rc &amp; MII_LAN83C185_MODE_MASK) &#x3D;&#x3D;</span><br><span class="line">    MII_LAN83C185_MODE_POWERDOWN) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;* set &quot;all capable&quot; mode and reset the phy *&#x2F;</span><br><span class="line">        rc |&#x3D; MII_LAN83C185_MODE_ALL;</span><br><span class="line">        phy_write(phydev, MII_LAN83C185_SPECIAL_MODES, rc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    phy_write(phydev, MII_BMCR, BMCR_RESET);</span><br><span class="line">    &#x2F;* wait end of reset (max 500 ms) *&#x2F;</span><br><span class="line"></span><br><span class="line">    do &#123;</span><br><span class="line">        udelay(10);</span><br><span class="line">        if (timeout-- &#x3D;&#x3D; 0)</span><br><span class="line">        return -1;</span><br><span class="line">        rc &#x3D; phy_read(phydev, MII_BMCR);</span><br><span class="line">    &#125; while (rc &amp; BMCR_RESET);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="网络驱动测试"><a class="markdownIt-Anchor" href="#网络驱动测试"></a> 网络驱动测试</h4>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux驱动开发笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I.MX6U </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I.MX6U通用驱动开发格式</title>
      <link href="2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/%E9%80%9A%E7%94%A8%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E6%A0%BC%E5%BC%8F/"/>
      <url>2020/01/01/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux_Notes/%E9%80%9A%E7%94%A8%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在嵌入式裸机开发种，需要准确操作每个寄存器。直接定义每个寄存器，往往不好使用。用结构体将所有相关的寄存器进行结构化管理。使用基地址加偏移的方式，在不连续的地方用占位留空，这种方式十分方便。下面用这种方式定义I.MX6U的一部分寄存器。</p><h2 id="代码部分"><a class="markdownIt-Anchor" href="#代码部分"></a> 代码部分</h2><p>imx6ul.h 定义寄存器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_BASE                (0X020c4000)    <span class="comment">//基地址</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_ANALOG_BASE(0X020C8000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOMUX_SW_MUX_BASE(0X020E0044)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOMUX_SW_PAD_BASE(0X020E0204)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1_BASE              (0x0209C000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO2_BASE              (0x020A0000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO3_BASE              (0x020A4000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO4_BASE              (0x020A8000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO5_BASE              (0x020AC000)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*CCM寄存器组*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CCR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CCDR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CCSR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CACRR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CBCDR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CBCMR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSCMR1;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSCMR2;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSCDR1;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CS1CDR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CS2CDR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CDCDR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CHSCCDR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSCDR2;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSCDR3;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> RESERVED_1[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CDHIPR;  </span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> RESERVED_2[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CLPCR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CISR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CIMR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CCOSR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CGPR;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CCGR0;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CCGR1;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CCGR2;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CCGR3;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CCGR4;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CCGR5;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CCGR6;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> RESERVED_3[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CMEOR;</span><br><span class="line">&#125;CCM_Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *PLL寄存器组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_ARM;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_ARM_SET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_ARM_CLR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_ARM_TOG;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_USB1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_USB1_SET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_USB1_CLR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_USB1_TOG;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_USB2;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_USB2_SET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_USB2_CLR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_USB2_TOG;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_SYS;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_SYS_SET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_SYS_CLR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_SYS_TOG;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_SYS_SS;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> RESERVED_1[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_SYS_NUM;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> RESERVED_2[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_SYS_DENOM; </span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> RESERVED_3[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_AUDIO;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_AUDIO_SET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_AUDIO_CLR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_AUDIO_TOG;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_AUDIO_DENOM;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> RESERVED_4[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_VIDEO;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_VIDEO_SET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_VIDEO_CLR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_VIDEO_TOG;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_VIDEO_NUM;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> RESERVED_5[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_VIDEO_DENOM;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> RESERVED_6[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_ENET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_ENET_SET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_ENET_CLR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PLL_ENET_TOG;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PFD_480;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PFD_480_SET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PFD_480_CLR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PFD_480_TOG;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PFD_528;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PFD_528_SET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PFD_528_CLR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PFD_528_TOG;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> RESERVED_7[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MISC0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MISC0_SET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MISC0_CLR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MISC0_TOG;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MISC1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MISC1_SET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MISC1_CLR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MISC1_TOG;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MISC2;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MISC2_SET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MISC2_CLR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MISC2_TOG;</span><br><span class="line">&#125; CCM_ANALOG_Type; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * IOMUX寄存器组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> JTAG_MOD;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> JTAG_TMS;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> JTAG_TDO;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> JTAG_TDI;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> JTAG_TCK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> JTAG_TRST_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO00;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO01;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO02;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO03;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO04;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO05;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO06;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO07;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO08;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO09;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART1_TX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART1_RX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART1_CTS_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART1_RTS_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART2_TX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART2_RX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART2_CTS_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART2_RTS_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART3_TX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART3_RX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART3_CTS_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART3_RTS_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART4_TX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART4_RX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART5_TX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART5_RX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_RX_DATA0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_RX_DATA1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_RX_EN;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_TX_DATA0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_TX_DATA1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_TX_EN;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_TX_CLK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_RX_ER;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_RX_DATA0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_RX_DATA1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_RX_EN;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_TX_DATA0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_TX_DATA1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_TX_EN;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_TX_CLK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_RX_ER;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_CLK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_ENABLE;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_HSYNC;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_VSYNC;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_RESET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA00;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA01;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA02;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA03;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA04;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA05;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA06;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA07;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA08;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA09;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA10;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA11;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA12;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA13;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA14;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA15;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA16;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA17;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA18;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA19;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA20;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA21;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA22;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA23;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_RE_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_WE_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA00;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA01;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA02;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA03;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA04;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA05;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA06;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA07;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_ALE;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_WP_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_READY_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_CE0_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_CE1_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_CLE;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DQS;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SD1_CMD;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SD1_CLK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SD1_DATA0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SD1_DATA1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SD1_DATA2;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SD1_DATA3;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_MCLK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_PIXCLK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_VSYNC;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_HSYNC;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA00;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA01;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA02;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA03;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA04;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA05;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA06;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA07;</span><br><span class="line">&#125;IOMUX_SW_MUX_Type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR00;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR01;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR02;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR03;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR04;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR05;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR06;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR07;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR08;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR09;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR10;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR11;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR12;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR13;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR14;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ADDR15;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_DQM0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_DQM1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_RAS_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_CAS_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_CS0_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_CS1_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_SDWE_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ODT0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_ODT1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_SDBA0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_SDBA1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_SDBA2;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_SDCKE0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_SDCKE1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_SDCLK0_P;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_SDQS0_P;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_SDQS1_P;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DRAM_RESET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> TEST_MODE;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> POR_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ONOFF;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SNVS_PMIC_ON_REQ;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CCM_PMIC_STBY_REQ;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> BOOT_MODE0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> BOOT_MODE1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SNVS_TAMPER0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SNVS_TAMPER1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SNVS_TAMPER2;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SNVS_TAMPER3;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SNVS_TAMPER4;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SNVS_TAMPER5;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SNVS_TAMPER6;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SNVS_TAMPER7;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SNVS_TAMPER8;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SNVS_TAMPER9;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> JTAG_MOD;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> JTAG_TMS;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> JTAG_TDO;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> JTAG_TDI;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> JTAG_TCK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> JTAG_TRST_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO00;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO01;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO02;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO03;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO04;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO05;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO06;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO07;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO08;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GPIO1_IO09;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART1_TX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART1_RX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART1_CTS_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART1_RTS_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART2_TX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART2_RX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART2_CTS_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART2_RTS_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART3_TX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART3_RX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART3_CTS_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART3_RTS_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART4_TX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART4_RX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART5_TX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> UART5_RX_DATA;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_RX_DATA0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_RX_DATA1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_RX_EN;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_TX_DATA0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_TX_DATA1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_TX_EN;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_TX_CLK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET1_RX_ER;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_RX_DATA0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_RX_DATA1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_RX_EN;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_TX_DATA0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_TX_DATA1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_TX_EN;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_TX_CLK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ENET2_RX_ER;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_CLK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_ENABLE;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_HSYNC;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_VSYNC;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_RESET;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA00;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA01;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA02;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA03;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA04;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA05;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA06;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA07;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA08;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA09;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA10;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA11;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA12;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA13;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA14;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA15;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA16;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA17;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA18;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA19;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA20;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA21;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA22;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LCD_DATA23;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_RE_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_WE_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA00;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA01;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA02;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA03;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA04;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA05;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA06;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DATA07;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_ALE;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_WP_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_READY_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_CE0_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_CE1_B;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_CLE;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> NAND_DQS;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SD1_CMD;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SD1_CLK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SD1_DATA0;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SD1_DATA1;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SD1_DATA2;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SD1_DATA3;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_MCLK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_PIXCLK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_VSYNC;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_HSYNC;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA00;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA01;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA02;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA03;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA04;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA05;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA06;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> CSI_DATA07;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GRP_ADDDS;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GRP_DDRMODE_CTL;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GRP_B0DS;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GRP_DDRPK;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GRP_CTLDS;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GRP_B1DS;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GRP_DDRHYS;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GRP_DDRPKE;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GRP_DDRMODE;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GRP_DDR_TYPE;</span><br><span class="line">&#125;IOMUX_SW_PAD_Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * GPIO寄存器结构体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> DR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> GDIR; </span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> PSR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ICR1; </span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ICR2;  </span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> IMR; </span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ISR;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> EDGE_SEL;  </span><br><span class="line">&#125;GPIO_Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 外设指针 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM                 ((CCM_Type *)CCM_BASE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CCM_ANALOG((CCM_ANALOG_Type *)CCM_ANALOG_BASE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOMUX_SW_MUX((IOMUX_SW_MUX_Type *)IOMUX_SW_MUX_BASE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOMUX_SW_PAD((IOMUX_SW_PAD_Type *)IOMUX_SW_PAD_BASE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO1((GPIO_Type *)GPIO1_BASE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO2((GPIO_Type *)GPIO2_BASE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO3((GPIO_Type *)GPIO3_BASE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO4((GPIO_Type *)GPIO4_BASE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO5((GPIO_Type *)GPIO5_BASE)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c led灯结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;imx6ul.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clk_enable</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CCM-&gt;CCGR0 = <span class="number">0XFFFFFFFF</span>UL;</span><br><span class="line">    CCM-&gt;CCGR1 = <span class="number">0XFFFFFFFF</span>UL;</span><br><span class="line">    CCM-&gt;CCGR2 = <span class="number">0XFFFFFFFF</span>UL;</span><br><span class="line">    CCM-&gt;CCGR3 = <span class="number">0XFFFFFFFF</span>UL;</span><br><span class="line">    CCM-&gt;CCGR4 = <span class="number">0XFFFFFFFF</span>UL;</span><br><span class="line">    CCM-&gt;CCGR5 = <span class="number">0XFFFFFFFF</span>UL;</span><br><span class="line">    CCM-&gt;CCGR6 = <span class="number">0XFFFFFFFF</span>UL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOMUX_SW_MUX-&gt;GPIO1_IO03 = <span class="number">0X5</span>;</span><br><span class="line">    IOMUX_SW_PAD-&gt;GPIO1_IO03 = <span class="number">0x10B0</span>;</span><br><span class="line">    GPIO1-&gt;GDIR = <span class="number">0X00000008</span>;   <span class="comment">//GPIO1_IO03设置为输出</span></span><br><span class="line">    GPIO1-&gt;DR &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_on</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPIO1-&gt;DR &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_off</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPIO1-&gt;DR |= (<span class="number">1</span>&lt;&lt;<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_short</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        delay_short(<span class="number">0x7ff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clk_enable();</span><br><span class="line">    led_init();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        led_off();</span><br><span class="line">        delay(<span class="number">500</span>);</span><br><span class="line">        led_on();</span><br><span class="line">        delay(<span class="number">500</span>);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>start.s 汇编代码 初始化c语言环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">.global _start</span><br><span class="line">.global _bss_start</span><br><span class="line">.global _bss_end</span><br><span class="line">_bss_start:</span><br><span class="line">    .word __bss_start</span><br><span class="line">_bss_end:</span><br><span class="line">    .word __bss_end</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    mrs r0,cpsr</span><br><span class="line">    bic r0,r0,#0x1f</span><br><span class="line">    orr r0,r0,#0x13</span><br><span class="line">    msr cpsr, r0</span><br><span class="line">    </span><br><span class="line">    &#x2F;*清除bss段*&#x2F;</span><br><span class="line">    ldr r0,_bss_start</span><br><span class="line">    ldr r1,_bss_end</span><br><span class="line">    mov r2,#0</span><br><span class="line">bss_loop:</span><br><span class="line">    stmia r0!,&#123;r2&#125;</span><br><span class="line">    cmp r0,r1           @比较R0和R1</span><br><span class="line">    ble bss_loop    @R0地址小于R1，继续清除bss段</span><br><span class="line"></span><br><span class="line">    &#x2F;*设置sp指针*&#x2F;</span><br><span class="line">    ldr sp,&#x3D;0x80200000</span><br><span class="line">    b main</span><br></pre></td></tr></table></figure><p>Makefile文件 自动编译</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">objs := start.o main.o</span><br><span class="line"></span><br><span class="line"><span class="section">ledc.bin:<span class="variable">$(objs)</span></span></span><br><span class="line">arm-linux-gnueabihf-ld -Timxdownload.lds -o ledc.elf <span class="variable">$^</span></span><br><span class="line">arm-linux-gnueabihf-objcopy -O binary -S ledc.elf <span class="variable">$@</span></span><br><span class="line">arm-linux-gnueabihf-objdump -D -m arm ledc.elf &gt; ledc.dis</span><br><span class="line"></span><br><span class="line"><span class="section">%.o:%.s</span></span><br><span class="line">arm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o:%.S</span></span><br><span class="line">arm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o:%.c</span></span><br><span class="line">arm-linux-gnueabihf-gcc -Wall -nostdlib -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf *.o ledc.bin ledc.elf ledc.dis</span><br></pre></td></tr></table></figure><p>imx6ul.lds 链接文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SECTIONS&#123;</span><br><span class="line">    . &#x3D; 0X87800000;</span><br><span class="line">    .text :</span><br><span class="line">    &#123;</span><br><span class="line">        start.o</span><br><span class="line">        main.o</span><br><span class="line">        *(.text)</span><br><span class="line">    &#125;</span><br><span class="line">    .rodata ALIGN(4) : &#123;*(.rodata*)&#125;        </span><br><span class="line">    .data ALIGN(4) : &#123;*(.data)&#125;                 &#x2F;*4字节对齐，定义数据段*&#x2F;</span><br><span class="line">    __bss_start &#x3D; .;                           &#x2F;*bss段的起始地址赋值定位符*&#x2F;</span><br><span class="line">    .bss ALIGN(4) : &#123;*(.bss)*(COMMON)&#125;  &#x2F;*定义bss段*&#x2F;</span><br><span class="line">    __bss_end &#x3D; .;                              &#x2F;*bss段的结束地址赋值定位符*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>使用这种结构进行编写的好处就是能够更加清晰地找出需要的寄存器，工程管理起来更加方便。</p><p>主要有三个要点</p><ul><li>基址地址</li><li>寄存器结构体</li><li>外设指针</li></ul><p>根据手册依次完成上面三个部分的编写。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux驱动开发笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> I.MX6U </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt使用MySql</title>
      <link href="2020/01/01/Qt_Notes/Qt%E4%BD%BF%E7%94%A8MySql/"/>
      <url>2020/01/01/Qt_Notes/Qt%E4%BD%BF%E7%94%A8MySql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="mysql免安装版本的安装"><a class="markdownIt-Anchor" href="#mysql免安装版本的安装"></a> MySql免安装版本的安装</h3><h4 id="mysql安装文件下载"><a class="markdownIt-Anchor" href="#mysql安装文件下载"></a> MySql安装文件下载</h4><p>MySql安装文件的下载有两种方式</p><h5 id="官网下载"><a class="markdownIt-Anchor" href="#官网下载"></a> 官网下载</h5><p><a href="https://dev.mysql.com/downloads/mysql/">MySql官网</a></p><h5 id="国内镜像"><a class="markdownIt-Anchor" href="#国内镜像"></a> 国内镜像</h5><p>由于外国软件的官网一般访问速度令人捉鸡，国内都会有相应的软件镜像。在这些开源镜像站下载，速度会快很多。</p><p>企业站点</p><ol><li><p>网易：<a href="https://www.svlik.com/go.php?https://mirrors.163.com/">https://mirrors.163.com/</a></p></li><li><p>搜狐：<a href="https://www.svlik.com/go.php?http://mirrors.sohu.com/">http://mirrors.sohu.com/</a>（Ubuntu旧发行版同步被冻结，不同步Ubuntu新发行版，Ubuntu源同步正常）</p></li><li><p>阿里云：<a href="https://www.svlik.com/go.php?https://opsx.alibaba.com/mirror">https://opsx.alibaba.com/mirror</a>（部分镜像同步延迟超过1天）</p></li></ol><p>教育站点</p><ol><li>中国科技大学：<a href="https://www.svlik.com/go.php?https://mirrors.ustc.edu.cn/">https://mirrors.ustc.edu.cn/</a></li><li>清华大学：<a href="https://www.svlik.com/go.php?https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn/</a></li></ol><h4 id="mysql安装"><a class="markdownIt-Anchor" href="#mysql安装"></a> MySql安装</h4><h5 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h5><p>配置用户环境变量，将D:/MySql/bin文件夹包含到path环境变量下。</p><h5 id="添加myini文件"><a class="markdownIt-Anchor" href="#添加myini文件"></a> 添加my.ini文件</h5><p>添加代码</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">basedir</span>=D:/MySql</span><br><span class="line"><span class="attr">datadir</span>=D:/MySql/data</span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure><h5 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h5><p>在bin文件夹下管理员模式启动cmd然后输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld –<span class="literal">-initialize</span></span><br></pre></td></tr></table></figure><p>根目录会生成一个data文件夹</p><h5 id="安装mysql服务"><a class="markdownIt-Anchor" href="#安装mysql服务"></a> 安装MySql服务</h5><p>继续输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld install</span><br></pre></td></tr></table></figure><p>会提示服务安装成功。</p><h5 id="启动服务"><a class="markdownIt-Anchor" href="#启动服务"></a> 启动服务</h5><p>继续输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net <span class="built_in">start</span> mysql</span><br></pre></td></tr></table></figure><h5 id="登录mysql"><a class="markdownIt-Anchor" href="#登录mysql"></a> 登录MySql</h5><p>继续输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="literal">-u</span> root <span class="literal">-p</span></span><br></pre></td></tr></table></figure><p>免密码直接进入</p><h5 id="修改密码"><a class="markdownIt-Anchor" href="#修改密码"></a> 修改密码</h5><p>登录mysql下执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> <span class="keyword">for</span> root@localhost = <span class="keyword">password</span>(<span class="string">&#x27;新密码&#x27;</span>); </span><br></pre></td></tr></table></figure><h5 id="退出登录"><a class="markdownIt-Anchor" href="#退出登录"></a> 退出登录</h5><p>mysql下执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h5 id="停止服务"><a class="markdownIt-Anchor" href="#停止服务"></a> 停止服务</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure><h5 id="卸载mysql"><a class="markdownIt-Anchor" href="#卸载mysql"></a> 卸载MySql</h5><p>sc delete mysql</p><h5 id="远程连接"><a class="markdownIt-Anchor" href="#远程连接"></a> 远程连接</h5><hr /><p>Qt 数据库 SQL</p><p><img src="https://i.loli.net/2020/12/28/6AmUfvyGCpTzhHw.png" alt="img" /></p><ul><li>用户接口层：用来把数据显示到窗口部件</li><li>SQL接口层：提供对数据库的访问</li><li>驱动层：为具体数据库和SQL接口之间提供了底层的桥梁（不用深入）</li></ul><h3 id="mysql驱动的编译"><a class="markdownIt-Anchor" href="#mysql驱动的编译"></a> MySql驱动的编译</h3><p>Qt连接MySql数据库要经过两层驱动，一个是MySql本身的驱动libmysql.dll，另外一个是Qt本身的驱动qsqlmysql.dll。在Qt5版本中，Qt本身没有自带MySql的驱动，需要自己进行编译。在Qt的源码中有MySql的qt工程，对其进行编译后会生成qsqlmysql.dll。</p><p>打开源码中MySql.pro工程文件，在下面这个文件夹</p><p>…\Qt\Qt5.12.3\5.12.3\Src\qtbase\src\plugins\sqldrivers\mysql中。</p><h4 id="更改mysqlpro文件的内容"><a class="markdownIt-Anchor" href="#更改mysqlpro文件的内容"></a> 更改MySql.pro文件的内容</h4><p>添加链接库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#QMAKE_USE += mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主要看libmysql的位置在哪</span></span><br><span class="line"><span class="attr">win32</span>:<span class="string">LIBS += -LD:/MySql/lib -llibmysql </span></span><br><span class="line"><span class="attr">INCLUDEPATH</span> <span class="string">+= D:/MySql/include</span></span><br><span class="line"><span class="attr">DEPENDPATH</span> <span class="string">+= D:/MySql/include</span></span><br></pre></td></tr></table></figure><p>…\Qt\Qt5.12.3\5.12.3\Src\qtbase\src\plugins\sqldrivers\qsqldriverbase.pri</p><h4 id="更改qsqldriverbasepri文件"><a class="markdownIt-Anchor" href="#更改qsqldriverbasepri文件"></a> 更改qsqldriverbase.pri文件</h4><p>添加配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">include(..\Qt\Qt5.12.3\5.12.3\Src\qtbase\src\plugins\sqldrivers\configure.pri)</span></span><br></pre></td></tr></table></figure><h4 id="进行编译"><a class="markdownIt-Anchor" href="#进行编译"></a> 进行编译</h4><ol><li>qmake</li><li>构建</li><li>运行</li></ol><p>在Qt的同级目录下生成了驱动文件夹。</p><h4 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h4><p>一般libmysql.dll和qsqlmysql.dll需要成对出现，才能让相应版本的MySql和QtCreater构建连接，然后进行正确驱动。qt通常为64位的，但是MySql的版本有时候为32位，这样在链接动态库的时候，往往会报错。我们需要选用正确位数的ibmysql.dll。</p><p>mysql位数的查询</p><ol><li><p>mysql -V（cmd控制台）</p><p><img src="https://i.loli.net/2020/12/28/rYEZ3XRBcn1Kgb9.png" alt="image-20201221223409087" /></p></li><li><p>show variables like ‘%version_%’; （使用mysql -u root -p进入mysql之后）</p><p><img src="https://i.loli.net/2020/12/28/iWluvePsmoEQV2T.png" alt="image-20201221223548665" /></p></li><li><p>which mysql |xargs file (linux/unix系统）</p></li><li><p>echo STATUS|mysql -uroot -ppassword |grep Ver</p></li></ol><p>可以看到我的mysql版本就是32位，这就是我为什么弄到凌晨五点才搞好驱动的原因。那么我们需要搞到同版本的64位驱动，去哪找呢？</p><p><img src="https://i.loli.net/2020/12/28/UwmgubWk9NFtCyn.png" alt="image-20201221223953030" /></p><p>官网上选择5.7.29位x86 64 bit的zip文件，解压之后找到lib目录下的libmysql.dll放到合适的位置，更改链接路径，就可以用64位的编译器进行编译。</p><h3 id="qt和mysql建立连接"><a class="markdownIt-Anchor" href="#qt和mysql建立连接"></a> Qt和MySql建立连接</h3><h4 id="添加驱动"><a class="markdownIt-Anchor" href="#添加驱动"></a> 添加驱动</h4><ol><li>MySql安装目录下的lib有libmysql.dll拷贝到qt编译器bin目录下。</li><li>编译生成的libqsqlmysql.dll和qsqlmysqld.dll添加到编译器./plugins/sqldrivers下面去。</li></ol><h4 id="在pro文件下添加代码"><a class="markdownIt-Anchor" href="#在pro文件下添加代码"></a> 在.pro文件下添加代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT +=sql</span><br></pre></td></tr></table></figure><h4 id="添加头文件"><a class="markdownIt-Anchor" href="#添加头文件"></a> 添加头文件</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSqlDatabase&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="连接代码"><a class="markdownIt-Anchor" href="#连接代码"></a> 连接代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">QSqlDatabase db = QSqlDatabase::addDatabase(<span class="string">&quot;QMYSQL&quot;</span>);  <span class="comment">//连接的MYSQL的数据库驱动</span></span><br><span class="line">db.setHostName(<span class="string">&quot;localhost&quot;</span>);         <span class="comment">//主机名</span></span><br><span class="line">db.setPort(<span class="number">3306</span>);                    <span class="comment">//端口</span></span><br><span class="line">db.setDatabaseName(<span class="string">&quot;test&quot;</span>);          <span class="comment">//数据库名</span></span><br><span class="line">db.setUserName(<span class="string">&quot;root&quot;</span>);              <span class="comment">//用户名</span></span><br><span class="line">db.setPassword(<span class="string">&quot;123456&quot;</span>); <span class="comment">//数据库的密码</span></span><br><span class="line">qDebug(<span class="string">&quot;database open status: %d\n&quot;</span>, db.open()); <span class="comment">//返回db的状态</span></span><br><span class="line">dp.close()</span><br></pre></td></tr></table></figure><p>这样就完成了Qt和数据库的连接</p><h3 id="qt中执行mysql语句"><a class="markdownIt-Anchor" href="#qt中执行mysql语句"></a> Qt中执行MySql语句</h3><p>在Qt中执行mysql语句可以使用<strong>QSqlQuery</strong>类，有两种使用方法。</p><h4 id="直接执行语句"><a class="markdownIt-Anchor" href="#直接执行语句"></a> 直接执行语句</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QSqlQuery query = QSqlQuery( <span class="keyword">this</span>-&gt;db );</span><br><span class="line">query.exec(<span class="string">&quot;sql语句&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="占位符语句执行"><a class="markdownIt-Anchor" href="#占位符语句执行"></a> 占位符语句执行</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QSqlQuery query = QSqlQuery( <span class="keyword">this</span>-&gt;db );</span><br><span class="line">QString sqlstr = <span class="string">&quot;select * from table_name where id=?&quot;</span><span class="string">&quot;;</span></span><br><span class="line"><span class="string">query.prepare(sqlstr);</span></span><br><span class="line"><span class="string">query.bindValue(0,1);</span></span><br></pre></td></tr></table></figure><p>这两种方式就可以完全操作mysql了，但是如果要在qt数据表控件里面使用mysql就需要使用其他类了。</p>]]></content>
      
      
      <categories>
          
          <category> QT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> Qt </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MODBUS通讯协议</title>
      <link href="2020/01/01/MODBUS%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
      <url>2020/01/01/MODBUS%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="modbus通讯协议"><a class="markdownIt-Anchor" href="#modbus通讯协议"></a> MODBUS通讯协议</h1><p>Modbus一个工业上常用的通讯协议、一种通讯约定。Modbus协议包括RTU、ASCII、TCP。</p><h2 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h2><h3 id="数据模型"><a class="markdownIt-Anchor" href="#数据模型"></a> 数据模型</h3><table><thead><tr><th></th><th>对象类型</th><th>访问类型</th><th>内容</th></tr></thead><tbody><tr><td>离散量输入</td><td>1个位</td><td>只读</td><td></td></tr><tr><td>线圈</td><td>1个位</td><td>读/写</td><td></td></tr><tr><td>输入寄存器</td><td>2个字节</td><td>只读</td><td></td></tr><tr><td>保持寄存器</td><td>2个字节</td><td>读/写</td><td></td></tr></tbody></table><p>以上数据模型出自PLC，单片机使用modebus协议时需要进行模拟。</p><h3 id="通用报文模型"><a class="markdownIt-Anchor" href="#通用报文模型"></a> 通用报文模型</h3><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/20210526094501.png" alt="image-20210525114921103" /></p><ul><li>ADU：应用数据单元</li><li>PDU：协议数据单元</li></ul><h3 id="功能码"><a class="markdownIt-Anchor" href="#功能码"></a> 功能码</h3><table><thead><tr><th>命令码</th><th>含义</th></tr></thead><tbody><tr><td>01（0x01）</td><td>读线圈</td></tr><tr><td>02（0x02）</td><td>读离散量输入</td></tr><tr><td>03（0x03）</td><td>读保持寄存器</td></tr><tr><td>04（0x04）</td><td>读输入寄存器</td></tr><tr><td>05（0x05）</td><td>写单个线圈</td></tr><tr><td>06（0x06）</td><td>写单个寄存器</td></tr><tr><td>15（0x0F）</td><td>写多个线圈</td></tr><tr><td>16（0x10）</td><td>写多个寄存器</td></tr></tbody></table><h3 id="crc校验"><a class="markdownIt-Anchor" href="#crc校验"></a> CRC校验</h3><p>没什么好写的。循环冗余校验码。</p><h3 id="异常码"><a class="markdownIt-Anchor" href="#异常码"></a> 异常码</h3><p>当出现异常时，从站会向主站报异常码，主站应该要进行异常判断</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210525112259559.png" alt="image-20210525112259559" /></p><p>其中RTU异常数据格式为</p><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">异常响应功能码</th><th style="text-align:center">异常响应码</th><th style="text-align:center">CRC校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p>异常响应功能码 = 0x80 | 功能码</p><p>举例说明</p><p>读线圈时发生异常，异常报文如下</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210525113324256.png" alt="image-20210525113324256" /></p><p>离散输入读取时发生异常，异常报文如下</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210525113259799.png" alt="image-20210525113259799" /></p><p>其他功能异常报文以此类推</p><h2 id="rtu数据格式"><a class="markdownIt-Anchor" href="#rtu数据格式"></a> RTU数据格式</h2><p><strong>RTU报文帧</strong></p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210525114709320.png" alt="image-20210525114709320" /></p><h3 id="0x01读线圈"><a class="markdownIt-Anchor" href="#0x01读线圈"></a> 0x01：读线圈</h3><blockquote><p>Here is an example of a request to read coils 20–56 from slave device 17:</p></blockquote><p>从机地址0x11，读取线圈20-56（地址为0x13，读取数量为37）</p><h4 id="请求"><a class="markdownIt-Anchor" href="#请求"></a> 请求</h4><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">功能码</th><th style="text-align:center">起始地址</th><th style="text-align:center">数量</th><th style="text-align:center">校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210519154911541.png" alt="image-20210519154911541" /></p><h4 id="响应"><a class="markdownIt-Anchor" href="#响应"></a> 响应</h4><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">功能码</th><th style="text-align:center">字节数</th><th style="text-align:center">线圈数据</th><th style="text-align:center">校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">4个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210519154957272.png" alt="image-20210519154957272" /></p><h3 id="0x02读离散量输入"><a class="markdownIt-Anchor" href="#0x02读离散量输入"></a> 0x02：读离散量输入</h3><h4 id="请求-2"><a class="markdownIt-Anchor" href="#请求-2"></a> 请求</h4><blockquote><p>Here is an example of a request to read inputs 10197–10218 from slave device 17:</p></blockquote><p>从机地址0x11，读取离散量输入10197-10218（地址0x00C4开始读取22个）</p><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">功能码</th><th style="text-align:center">起始地址</th><th style="text-align:center">数量</th><th style="text-align:center">校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210519155612141.png" alt="image-20210519155612141" /></p><h4 id="响应-2"><a class="markdownIt-Anchor" href="#响应-2"></a> 响应</h4><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">功能码</th><th style="text-align:center">字节数</th><th style="text-align:center">数据</th><th style="text-align:center">校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">3个字节</td><td style="text-align:center">3个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210519155639621.png" alt="image-20210519155639621" /></p><h3 id="0x03读保持寄存器"><a class="markdownIt-Anchor" href="#0x03读保持寄存器"></a> 0x03：读保持寄存器</h3><h4 id="请求-3"><a class="markdownIt-Anchor" href="#请求-3"></a> 请求</h4><blockquote><p>Here is an example of a request to read registers 40108–40110 from slave device 17:</p></blockquote><p>从站地址0x11，读寄存器40108-40110（地址0x006B开始3个寄存器）</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210519160032864.png" alt="image-20210519160032864" /></p><h4 id="响应-3"><a class="markdownIt-Anchor" href="#响应-3"></a> 响应</h4><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210519160108010.png" alt="image-20210519160108010" /></p><h3 id="0x04读输入寄存器"><a class="markdownIt-Anchor" href="#0x04读输入寄存器"></a> 0x04：读输入寄存器</h3><h4 id="请求-4"><a class="markdownIt-Anchor" href="#请求-4"></a> 请求</h4><blockquote><p>Here is an example of a request to read register 30009 from slave device 17:</p></blockquote><p>从站地址0x11，读输入寄存器30009（地址0x0008）</p><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">功能码</th><th style="text-align:center">地址</th><th style="text-align:center">数量</th><th style="text-align:center">校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210519160527712.png" alt="image-20210519160527712" /></p><h4 id="响应-4"><a class="markdownIt-Anchor" href="#响应-4"></a> 响应</h4><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">功能码</th><th style="text-align:center">字节数</th><th style="text-align:center">数据</th><th style="text-align:center">校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210519160547321.png" alt="image-20210519160547321" /></p><h3 id="0x05写单个线圈"><a class="markdownIt-Anchor" href="#0x05写单个线圈"></a> 0x05：写单个线圈</h3><h4 id="请求-5"><a class="markdownIt-Anchor" href="#请求-5"></a> 请求</h4><blockquote><p>Coils are addressed starting at zero: coil 1 is addressed as 0.</p><p>A value of FF 00 hex requests the coil to be ON. A value of 00 00 requests it to be OFF.</p><p>Here is an example of a request to force coil 173 ON in slave device 17:</p></blockquote><p>线圈1的地址为0</p><p>往地址0x11的从站线圈地址0x00AC写入单个线圈</p><ul><li>0xFF00代表打开</li><li>0x0000代表关闭</li></ul><p>从站地址0x11，打开第173个线圈（地址0x00AC）</p><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">功能码</th><th style="text-align:center">线圈地址</th><th style="text-align:center">线圈数据</th><th style="text-align:center">校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210519160640757.png" alt="image-20210519160640757" /></p><h4 id="响应-5"><a class="markdownIt-Anchor" href="#响应-5"></a> 响应</h4><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">功能码</th><th style="text-align:center">线圈地址</th><th style="text-align:center">线圈数据</th><th style="text-align:center">校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210519160704178.png" alt="image-20210519160704178" /></p><h3 id="0x06写单个寄存器"><a class="markdownIt-Anchor" href="#0x06写单个寄存器"></a> 0x06：写单个寄存器</h3><h4 id="请求-6"><a class="markdownIt-Anchor" href="#请求-6"></a> 请求</h4><blockquote><p>Here is an example of a request to preset register 40002 to 00 03 hex in slave device 17:</p></blockquote><p>从站地址0x11，往寄存器40002（地址0x0001）写入数据0x0003</p><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">功能码</th><th style="text-align:center">寄存器地址</th><th style="text-align:center">寄存器数据</th><th style="text-align:center">校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210519160743875.png" alt="image-20210519160743875" /></p><h4 id="响应-6"><a class="markdownIt-Anchor" href="#响应-6"></a> 响应</h4><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">功能码</th><th style="text-align:center">寄存器地址</th><th style="text-align:center">寄存器数据</th><th style="text-align:center">校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210519160811503.png" alt="image-20210519160811503" /></p><h3 id="0x0f写多个线圈"><a class="markdownIt-Anchor" href="#0x0f写多个线圈"></a> 0x0F：写多个线圈</h3><h4 id="请求-7"><a class="markdownIt-Anchor" href="#请求-7"></a> 请求</h4><blockquote><p>The following page shows an example of a request to force a series of ten coils starting at coil 20 (addressed as 19, or 13 hex) in slave device 17.</p></blockquote><p>从站地址0x11，写线圈20-29（地址0x13开始10个线圈）</p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210524171709618.png" alt="image-20210524171709618" /></p><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">功能码</th><th style="text-align:center">线圈起始地址</th><th style="text-align:center">字节数量</th><th style="text-align:center">写线圈数据</th><th style="text-align:center">校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210524170735739.png" alt="image-20210524170735739" /></p><h4 id="响应-7"><a class="markdownIt-Anchor" href="#响应-7"></a> 响应</h4><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">功能码</th><th style="text-align:center">线圈地址</th><th style="text-align:center">线圈数量</th><th style="text-align:center">校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210524171020350.png" alt="image-20210524171020350" /></p><h3 id="0x10写多个寄存器"><a class="markdownIt-Anchor" href="#0x10写多个寄存器"></a> 0x10：写多个寄存器</h3><h4 id="请求-8"><a class="markdownIt-Anchor" href="#请求-8"></a> 请求</h4><blockquote><p>Here is an example of a request to preset two registers starting at 40002 to 00 0A and 01 02 hex, in slave device 17:</p></blockquote><p>从站地址0x11，往寄存器40002-40003（地址0x0001开始两个寄存器）写入数据0x000A、0x0102</p><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">功能码</th><th style="text-align:center">寄存器起始地址</th><th style="text-align:center">寄存器数量</th><th style="text-align:center">字节数量</th><th style="text-align:center">数据</th><th style="text-align:center">校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">4个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210524171119658.png" alt="image-20210524171119658" /></p><h4 id="响应-8"><a class="markdownIt-Anchor" href="#响应-8"></a> 响应</h4><table><thead><tr><th style="text-align:center">从站地址</th><th style="text-align:center">功能码</th><th style="text-align:center">寄存器起始地址</th><th style="text-align:center">寄存器数量</th><th style="text-align:center">校验码</th></tr></thead><tbody><tr><td style="text-align:center">1个字节</td><td style="text-align:center">1个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td><td style="text-align:center">2个字节</td></tr></tbody></table><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210524171148358.png" alt="image-20210524171148358" /></p><h2 id="tcp报文数据格式"><a class="markdownIt-Anchor" href="#tcp报文数据格式"></a> TCP报文数据格式</h2><p><strong>TCP报文帧</strong></p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210525115045844.png" alt="TCP报文帧" /></p><p><strong>MBAP报文头</strong></p><p><img src="https://gitee.com/kepler23b/imagesbed/raw/master/img/image-20210525115303603.png" alt="image-20210525115303603" /></p><p><strong>帧结构PDU</strong></p><p>PDU由<strong>功能码+数据码</strong>组成</p><h2 id="上位机与plc通讯过程必知必会"><a class="markdownIt-Anchor" href="#上位机与plc通讯过程必知必会"></a> 上位机与PLC通讯过程必知必会</h2><p>根据MODBUS通讯协议可知，在上位机编写过程中</p><ul><li><p>串口通信</p><ul><li>需要知道 从站地址、数据类型对应的地址表，PLC从站地址默认0x01，部分PLC可设置0x00地址进行广播</li></ul></li><li><p>TCP通信</p><ul><li>除了上面的信息，还应知晓IP地址和端口号，PLC端口地址默认502</li></ul></li></ul><p>其中从站地址在PLC配置软件中可以进行配置，详细可见三菱的 《fx5 modbus手册》</p><p>数据类型对应MODBUS地址表也可以参考上面的手册，在附录中会进行地址映射说明</p>]]></content>
      
      
      <categories>
          
          <category> 通讯协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列原理以及实现</title>
      <link href="2020/01/01/Queue%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/"/>
      <url>2020/01/01/Queue%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="队列模型"><a class="markdownIt-Anchor" href="#队列模型"></a> 队列模型</h2><p><strong>入队</strong></p><p>在表的末尾插入一个元素，模型语言就是，队列大小+1，队尾指针+1</p><p><strong>出队</strong></p><p>在表的开头删除一个元素，模型语言就是，队列大小-1，队头指针+1</p><p>整个模型满足先入先出</p><h2 id="数组实现"><a class="markdownIt-Anchor" href="#数组实现"></a> 数组实现</h2><p>在嵌入式设计中，使用一个队列通常需要事先分配一个空间而不是动态分配一个空间，是因为嵌入式芯片的堆区很小（当然也可以自己扩大），所以使用数组来实现队列在嵌入式应用中比较适合。</p><p>队头队尾指针在碰到数组边界时候，需要循环初始位置。使用循环数组来进行实现，入队出队时指针对最大队列进行取模就可以完成。</p><p>队列的数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElementType *data;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> front;  <span class="comment">// 队头位置</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> rear;   <span class="comment">// 队尾位置</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> size;   <span class="comment">// 队列大小</span></span><br><span class="line">&#125; Queue;</span><br></pre></td></tr></table></figure><p>需要实现以下几个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CreateQueue</span><span class="params">(Queue *<span class="built_in">queue</span>,ElementType *buffer)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span><span class="params">(Queue *<span class="built_in">queue</span>,ElementType element)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span>;</span><br><span class="line"><span class="function">ElementType <span class="title">FrontAndDequeue</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span>;</span><br><span class="line"><span class="function">ElementType <span class="title">Front</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printfQueue</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>函数实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 创建一个队列，需要从外部传入空间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CreateQueue</span><span class="params">(Queue *<span class="built_in">queue</span>,ElementType *buffer)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span> != <span class="literal">NULL</span> &amp;&amp; buffer != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">queue</span>-&gt;front = <span class="number">0</span>;           <span class="comment">// 队头指针</span></span><br><span class="line">        <span class="built_in">queue</span>-&gt;rear = <span class="number">0</span>;            <span class="comment">// 队尾指针</span></span><br><span class="line">        <span class="built_in">queue</span>-&gt;size = <span class="number">0</span>;            <span class="comment">// 队列大小</span></span><br><span class="line">        <span class="built_in">queue</span>-&gt;data = buffer;       <span class="comment">// 缓冲区</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 判断队列是否为满</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">queue</span>-&gt;size == MAXSIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 判断队列是否为空</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">queue</span>-&gt;size == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 入队操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Enqueue</span><span class="params">(Queue *<span class="built_in">queue</span>,ElementType element)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isFull(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Full queue&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;                           <span class="comment">// 队列已经满了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;rear++] = element;       <span class="comment">// 队尾加入元素</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;size++;                              <span class="comment">// 大小加1</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear %= MAXSIZE;                     <span class="comment">// 队尾指针循环判定</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 出队操作</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;size--;                          <span class="comment">// 大小减1</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;front++;                         <span class="comment">// 队头指针加1</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;front %= MAXSIZE;                <span class="comment">// 队头指针循环   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 队列清空</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 取队头元素</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function">ElementType <span class="title">Front</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 取队头元素并且出队</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function">ElementType <span class="title">FrontAndDequeue</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> index = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line">    </span><br><span class="line">    Dequeue(<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;data[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 打印队列</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printfQueue</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="built_in">queue</span>-&gt;front;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isEmpty(<span class="built_in">queue</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;queue is empty!!!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">queue</span>-&gt;size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">queue</span>-&gt;data[index++]);</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数测试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElementType buffer[MAXSIZE];</span><br><span class="line"></span><br><span class="line">    Queue <span class="built_in">queue</span>;</span><br><span class="line">    CreateQueue(&amp;<span class="built_in">queue</span>, buffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; MAXSIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Enqueue(&amp;<span class="built_in">queue</span>, i);</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printfQueue(&amp;<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; MAXSIZE/<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (! isEmpty(&amp;<span class="built_in">queue</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Dequeue(&amp;<span class="built_in">queue</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Queue Empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printfQueue(&amp;<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; MAXSIZE/<span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (! isEmpty(&amp;<span class="built_in">queue</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Dequeue(&amp;<span class="built_in">queue</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Queue Empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printfQueue(&amp;<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; MAXSIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Enqueue(&amp;<span class="built_in">queue</span>, i);</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printfQueue(&amp;<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">    MakeEmpty(&amp;<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">    printfQueue(&amp;<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

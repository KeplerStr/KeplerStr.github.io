<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c++基础</title>
      <link href="2020/01/01/C++%E5%9F%BA%E7%A1%80/"/>
      <url>2020/01/01/C++%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="c基础上"><a class="markdownIt-Anchor" href="#c基础上"></a> c++基础（上）</h2><h3 id="什么是c"><a class="markdownIt-Anchor" href="#什么是c"></a> 什么是c++</h3><p>c语言的升级版，在c的基础上增加了很多功能。是一种高级语言。</p><h3 id="什么是面向对象什么是面向过程"><a class="markdownIt-Anchor" href="#什么是面向对象什么是面向过程"></a> 什么是面向对象，什么是面向过程</h3><p>c语言就是面向过程的，c++就是面向对象的。</p><p>示例：a+b</p><p>​直接计算a+b就是面向过程</p><p>​面向对象就是a+b封装到类里面，形成一个方法。</p><h3 id="c的灵魂c的类"><a class="markdownIt-Anchor" href="#c的灵魂c的类"></a> c<ins>的灵魂，c</ins>的类</h3><p>类可以看成是c语言的结构体的升级版。类的成员不仅是变量，也可以是函数。</p><h3 id="如何定义一个类"><a class="markdownIt-Anchor" href="#如何定义一个类"></a> 如何定义一个类</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是对象"><a class="markdownIt-Anchor" href="#什么是对象"></a> 什么是对象</h3><p>对象是类的实例化。</p><h3 id="如何定义一个对象"><a class="markdownIt-Anchor" href="#如何定义一个对象"></a> 如何定义一个对象</h3><p>直接定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student my;<span class="comment">//student是类，my是对象</span></span><br></pre></td></tr></table></figure><p>在堆里定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student *my = <span class="keyword">new</span> student;<span class="comment">//</span></span><br></pre></td></tr></table></figure><p>删除对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> my;</span><br></pre></td></tr></table></figure><h3 id="怎么访问类的成员"><a class="markdownIt-Anchor" href="#怎么访问类的成员"></a> 怎么访问类的成员</h3><p>普通类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student my;<span class="comment">//student是类，my是对象</span></span><br><span class="line">my.age;</span><br></pre></td></tr></table></figure><p>指针类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student *my = <span class="keyword">new</span> student;<span class="comment">//</span></span><br><span class="line">my-&gt;age;</span><br></pre></td></tr></table></figure><h3 id="类的成员函数"><a class="markdownIt-Anchor" href="#类的成员函数"></a> 类的成员函数</h3><p>类里面的成员不仅可以是变量也可以是函数</p><p>第一步：在类里面声明函数</p><p>第二步：实现函数。在类里面写，也可以在类外面写</p><p>写在里面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">123</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写在外面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">student::test</span><span class="params">()</span></span>&#123; <span class="comment">//student::表示属于这个类里面的函数</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">123</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的访问修饰符"><a class="markdownIt-Anchor" href="#类的访问修饰符"></a> 类的访问修饰符</h3><p>类的访问修饰符是对类的成员进行权限管理。</p><p>public：表示函数和变量是公有的，任何人都可以用访问。</p><p>private：表示私有，只能在类里面访问。想在类外面访问，可以通过公有成员函数访问。</p><p>protected：表示函数和变量只能在自己的类里面自己访问自己，但是可以被派生类访问。</p><h2 id="c基础下"><a class="markdownIt-Anchor" href="#c基础下"></a> c++基础（下）</h2><h3 id="类函数的重载特性"><a class="markdownIt-Anchor" href="#类函数的重载特性"></a> 类函数的重载特性</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重载函数在调用的时候会根据参数来自动匹配函数进行调用</p><h3 id="构造函数和析构函数"><a class="markdownIt-Anchor" href="#构造函数和析构函数"></a> 构造函数和析构函数</h3><p>析构函数：假如定义了析构函数，当对象被删除或者生命周期结束的时候，就会触发析构函数。</p><p>构造函数：假如定义了构造函数，当对象被创建就会触发这个构造函数。</p><p>如何定义？</p><ol><li>析构函数和构造函数的名字必须和类名一样。</li><li>析构函数需要在函数名前加~</li><li>构造函数可以被重载，析构函数不能被重载</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    student();</span><br><span class="line">    student(<span class="keyword">int</span> b);</span><br><span class="line">    ~student();</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">student::student()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student::student(<span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student::~student()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    student *my = <span class="keyword">new</span> student(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的继承"><a class="markdownIt-Anchor" href="#类的继承"></a> 类的继承</h3><p>什么是类的继承？</p><p>类的继承允许我们在新的类里面继承父类的public还有protected部分，private是不能被继承的。</p><p>格式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 儿子:</span><span class="keyword">public</span> 爸爸&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">……</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mystudent</span>:</span><span class="keyword">public</span> student&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如何在子类访问父类成员？</p><p>也是通过.和-&gt;来访问</p><h3 id="虚函数和纯虚函数"><a class="markdownIt-Anchor" href="#虚函数和纯虚函数"></a> 虚函数和纯虚函数</h3><p>虚函数：有实际定义的，允许派生类对他进行覆盖式的替换，用virtual来修饰。</p><p>纯虚函数：没有实际定义的虚函数就是纯虚函数。</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;<span class="comment">//虚函数 父类定义 子类覆盖修改</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//纯虚函数</span></span><br></pre></td></tr></table></figure><p>如何定义一个虚函数？</p><p>用virtual来进行修饰。</p><p>虚函数的优点？</p><p>可以预留接口，便于分工合作。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> c </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/01/01/hello-world/"/>
      <url>2020/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
